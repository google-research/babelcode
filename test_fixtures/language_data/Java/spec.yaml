primitives:
  string:
    type_name: 'String'
    input: 'Test String'
    output: '"Test String"'
    null_output: '""'
  integer: 
    type_name: 'Integer'
    input: 1
    output: '1'
  boolean:
    type_name: 'Boolean'
    input: True
    output: 'true'
  float:
    type_name: 'Float'
    input: 10.1
    output: '10.1f'
  double:
    type_name: 'Double'
    input: 10.1
    output: '10.1'
  character:
    type_name: 'Character'
    input: "c"
    output: "'c'"
    null_output: "''"
  long:
    type_name: 'Long'
    input: 1
    output: '1L'
data_structures_schema:
  TYPE_NAME_1[]: 
    expected: 'ArrayList<TYPE_NAME_1>'
    elements:
      - expected: 'TYPE_NAME_1'
  list<list<TYPE_NAME_1>>: 
    expected: 'ArrayList<ArrayList<TYPE_NAME_1>>'
    elements:
      - expected: 'ArrayList<TYPE_NAME_1>'
        elements: 
          - expected: 'TYPE_NAME_1'
  map<TYPE_NAME_1;TYPE_NAME_1>: 
    expected: 'Map<TYPE_NAME_1, TYPE_NAME_1>'
    elements:
      - expected: 'TYPE_NAME_1'
    key_type: 
      expected: 'TYPE_NAME_1'
  set<TYPE_NAME_1>:
    expected: HashSet<TYPE_NAME_1>
    elements:
      - expected: 'TYPE_NAME_1'

prompt_translation:
  argument_name: 'arg_name'
  signature_argument: 'TYPE_NAME arg_name'
  return_type: "TYPE_NAME"
  docstring: "    /**\n     * Test Docstring.\n     * \\/\\*\\*\\/\\/\\/\\*\\/--\"\"\"\n     */"
  signature_with_docstring: "class Solution {\nDOCSTRING\n    public RETURNS test(SIGNATURE) {"


escaped_string:
  input: "$"
  expected: "$"

data_structures_literals:
  nested_list: 'new ArrayList<>(Arrays.asList(new ArrayList<>(Arrays.asList(TYPE_VAL_1, TYPE_VAL_1)), new ArrayList<>(Arrays.asList(TYPE_VAL_1))))'
  nested_map: 'Map.ofEntries(entry(KEY_VAL_1, new ArrayList<>(Arrays.asList(TYPE_VAL_1, TYPE_VAL_1))))'
  set: 'new HashSet<>(Arrays.asList(TYPE_VAL_1))'


entry_point: test
entry_cls: Solution