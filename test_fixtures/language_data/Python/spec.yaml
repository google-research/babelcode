primitives:
  string:
    type_name: 'str'
    input: 'Test String'
    output: '"Test String"'
    null_output: '""'
  integer: 
    type_name: 'int'
    input: 1
    output: '1'
  boolean:
    type_name: 'bool'
    input: True
    output: 'True'
  float:
    type_name: 'float'
    input: 10.1
    output: '10.1'
  double:
    type_name: 'float'
    input: 10.1
    output: '10.1'
  character:
    type_name: 'str'
    input: "c"
    output: "'c'"
    null_output: "''"
  long:
    type_name: 'int'
    input: 1
    output: '1'
data_structures_schema:
  TYPE_NAME_1[]: 
    expected: 'List[TYPE_NAME_1]'
    elements:
      - expected: 'TYPE_NAME_1'
  list<list<TYPE_NAME_1>>: 
    expected: 'List[List[TYPE_NAME_1]]'
    elements:
      - expected: 'List[TYPE_NAME_1]'
        elements: 
          - expected: 'TYPE_NAME_1'
  set<TYPE_NAME_1>:
    expected: 'Set[TYPE_NAME_1]'
    elements:
      - expected: 'TYPE_NAME_1'
  map<TYPE_NAME_1;TYPE_NAME_1>: 
    expected: 'Dict[TYPE_NAME_1, TYPE_NAME_1]'
    elements:
      - expected: 'TYPE_NAME_1'
    key_type: 
      expected: 'TYPE_NAME_1'
      
prompt_translation:
  argument_name: 'arg_name'
  signature_argument: 'arg_name: TYPE_NAME'
  return_type: " -> TYPE_NAME"
  docstring: "    \"\"\"Test Docstring.\n    /**///*/--\\\"\\\"\\\"\n    \"\"\""
  signature_with_docstring: "def test(SIGNATURE)RETURNS:\nDOCSTRING"

escaped_string:
  input: "$"
  expected: "$"
data_structures_literals:
  nested_list: '[[TYPE_VAL_1, TYPE_VAL_1], [TYPE_VAL_1]]'
  nested_map: '{KEY_VAL_1: [TYPE_VAL_1, TYPE_VAL_1]}'
  set: 'set([TYPE_VAL_1])'
entry_point: 'test'