primitives:
  string:
    type_name: 'String'
    input: 'Test String'
    output: '"Test String"'
    null_output: '""'
  integer: 
    type_name: 'Integer'
    input: 1
    output: '1'
  boolean:
    type_name: 'Bool'
    input: True
    output: 'True'
  float:
    type_name: 'Double'
    input: 10.1
    output: '10.1'
  double:
    type_name: 'Double'
    input: 10.1
    output: '10.1'
  character:
    type_name: 'Char'
    input: "c"
    output: "'c'"
    null_output: "''"
  long:
    type_name: 'Integer'
    input: 1
    output: '1'
data_structures_schema:
  TYPE_NAME_1[]: 
    expected: '[TYPE_NAME_1]'
    elements:
      - expected: 'TYPE_NAME_1'
  list<list<TYPE_NAME_1>>: 
    expected: '[[TYPE_NAME_1]]'
    elements:
      - expected: '[TYPE_NAME_1]'
        elements: 
        - expected: 'TYPE_NAME_1'
  map<TYPE_NAME_1;TYPE_NAME_1>: 
    expected: 'Map.Map TYPE_NAME_1 TYPE_NAME_1'
    elements:
      - expected: 'TYPE_NAME_1'
    key_type: 
      expected: 'TYPE_NAME_1'
  set<TYPE_NAME_1>:
    expected: 'Set.Set TYPE_NAME_1'
    elements:
      - expected: 'TYPE_NAME_1'
prompt_translation:
  argument_name: 'arg_name'
  signature_argument: 'TYPE_NAME'
  return_type: "TYPE_NAME"
  docstring: "-- | Test Docstring.\n-- /**///*/\\-\\-\"\"\""
  signature_with_docstring: "DOCSTRING\ntest :: SIGNATURE -> RETURNS\ntest arg_name = "

escaped_string:
  input: "$"
  expected: "$"

data_structures_literals:
  nested_list: '[[TYPE_VAL_1, TYPE_VAL_1], [TYPE_VAL_1]]'
  nested_map: 'Map.fromList [(KEY_VAL_1, [TYPE_VAL_1, TYPE_VAL_1])]'
  set: 'Set.fromList [TYPE_VAL_1]'


entry_point: test