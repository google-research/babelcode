primitives:
  string:
    type_name: 'String'
    input: 'Test String'
    output: '"Test String".to_string()'
    null_output: '"".to_string()'
  integer: 
    type_name: 'i32'
    input: 1
    output: '1'
  boolean:
    type_name: 'bool'
    input: True
    output: 'true'
  float:
    type_name: 'f32'
    input: 10.1
    output: '10.1'
  double:
    type_name: 'f64'
    input: 10.1
    output: '10.1'
  character:
    type_name: 'char'
    input: "c"
    output: "'c'"
    null_output: "''"
  long:
    type_name: 'i64'
    input: 1
    output: '1'
data_structures_schema:
  TYPE_NAME_1[]: 
    expected: 'Vec<TYPE_NAME_1>'
    elements:
      - expected: 'TYPE_NAME_1'
  list<list<TYPE_NAME_1>>: 
    expected: 'Vec<Vec<TYPE_NAME_1>>'
    elements:
      - expected: 'Vec<TYPE_NAME_1>'
        elements: 
          - expected: 'TYPE_NAME_1'
  map<TYPE_NAME_1;TYPE_NAME_1>: 
    expected: 'HashMap<TYPE_NAME_1, TYPE_NAME_1>'
    elements:
      - expected: 'TYPE_NAME_1'
    key_type: 
      expected: 'TYPE_NAME_1'
  set<TYPE_NAME_1>:
    expected: 'HashSet<TYPE_NAME_1>'
    elements:
      - expected: 'TYPE_NAME_1'

prompt_translation:
  argument_name: 'arg_name'
  signature_argument: 'arg_name: TYPE_NAME'
  return_type: "TYPE_NAME"
  docstring: "/// Test Docstring.\n/// /**\\/\\/\\/*/--\"\"\""
  signature_with_docstring: "DOCSTRING\npub fn test(SIGNATURE) -> RETURNS {"


escaped_string:
  input: "$"
  expected: "\\$"

data_structures_literals:
  nested_list: 'Vec::from([Vec::from([TYPE_VAL_1, TYPE_VAL_1]), Vec::from([TYPE_VAL_1])])'
  nested_map: 'HashMap::from([(KEY_VAL_1, Vec::from([TYPE_VAL_1, TYPE_VAL_1]))])'
  set: 'Vec::from([TYPE_VAL_1]).into_iter().collect()'
entry_point: 'test'