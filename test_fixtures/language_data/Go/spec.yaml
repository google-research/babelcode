primitives:
  string:
    type_name: 'string'
    input: 'Test String'
    output: '"Test String"'
    null_output: '""'
  integer: 
    type_name: 'int'
    input: 1
    output: '1'
  boolean:
    type_name: 'bool'
    input: True
    output: 'true'
  float:
    type_name: 'float64'
    input: 10.1
    output: '10.1'
  double:
    type_name: 'float64'
    input: 10.1
    output: '10.1'
  character:
    type_name: 'char'
    input: "c"
    output: "'c'"
    null_output: "''"
  long:
    type_name: 'int64'
    input: 1
    output: '1'
data_structures_schema:
  TYPE_NAME_1[]: 
    expected: '[]TYPE_NAME_1'
    elements:
      - expected: 'TYPE_NAME_1'
  list<list<TYPE_NAME_1>>: 
    expected: '[][]TYPE_NAME_1'
    elements:
      - expected: '[]TYPE_NAME_1'
        elements: 
        - expected: 'TYPE_NAME_1'
  map<TYPE_NAME_1;TYPE_NAME_1>: 
    expected: 'map[TYPE_NAME_1]TYPE_NAME_1'
    elements:
      - expected: 'TYPE_NAME_1'
    key_type: 
      expected: 'TYPE_NAME_1'
  set<TYPE_NAME_1>:
    expected: 'map[TYPE_NAME_1]bool'
    elements:
      - expected: 'TYPE_NAME_1'

prompt_translation:
  argument_name: 'arg_name'
  signature_argument: 'arg_name TYPE_NAME'
  return_type: "TYPE_NAME"
  docstring: "// Test Docstring.\n// /**\\/\\//*/--\"\"\""
  signature_with_docstring: "DOCSTRING\nfunc test(SIGNATURE) RETURNS {"

escaped_string:
  input: "$"
  expected: "$"
  
entry_point: test

data_structures_literals:
  nested_list: 'TYPE_NAME_1{{TYPE_VAL_1, TYPE_VAL_1}, {TYPE_VAL_1}}'
  nested_map: 'map[KEY_TYPE_1]TYPE_NAME_1{KEY_VAL_1: TYPE_NAME_1{TYPE_VAL_1, TYPE_VAL_1}}'
  set: 'TYPE_NAME_1{TYPE_VAL_1: true}'
