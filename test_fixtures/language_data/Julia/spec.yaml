primitives:
  string:
    type_name: 'String'
    input: 'Test String'
    output: '"Test String"'
    null_output: '""'
  integer: 
    type_name: 'Int64'
    input: 1
    output: '1'
  boolean:
    type_name: 'Bool'
    input: True
    output: 'true'
  float:
    type_name: 'Float64'
    input: 10.1
    output: '10.1'
  double:
    type_name: 'Float64'
    input: 10.1
    output: '10.1'
  character:
    type_name: 'Char'
    input: "c"
    output: "'c'"
    null_output: "''"
  long:
    type_name: 'Int64'
    input: 1
    output: '1'
    
data_structures_schema:
  TYPE_NAME_1[]: 
    expected: 'Vector{TYPE_NAME_1}'
    elements:
      - expected: 'TYPE_NAME_1'
  list<list<TYPE_NAME_1>>: 
    expected: 'Vector{Vector{TYPE_NAME_1}}'
    elements:
      - expected: 'Vector{TYPE_NAME_1}'
        elements: 
          - expected: 'TYPE_NAME_1'
  map<TYPE_NAME_1;TYPE_NAME_1>: 
    expected: 'Dict{TYPE_NAME_1, TYPE_NAME_1}'
    elements:
      - expected: 'TYPE_NAME_1'
    key_type: 
      expected: 'TYPE_NAME_1'
  set<TYPE_NAME_1>:
    expected: 'Set{TYPE_NAME_1}'
    elements:
      - expected: 'TYPE_NAME_1'

prompt_translation:
  argument_name: 'arg_name'
  signature_argument: 'arg_name::TYPE_NAME'
  return_type: "::TYPE_NAME"
  docstring: "\"\"\"\nTest Docstring.\n/**///*/--\\\"\\\"\\\"\n\"\"\""
  signature_with_docstring: "DOCSTRING\nfunction test(SIGNATURE)RETURNS"


escaped_string:
  input: "$"
  expected: "$"

data_structures_literals:
  nested_list: '[[TYPE_VAL_1, TYPE_VAL_1], [TYPE_VAL_1]]'
  nested_map: 'Dict(KEY_VAL_1 => [TYPE_VAL_1, TYPE_VAL_1])'
  set: 'Set([TYPE_VAL_1])'

entry_point: 'test'

