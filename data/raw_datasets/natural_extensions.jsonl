{"code": "def remove_first_and_last(s,ch): \n\tfor i in range(len(s)): \n\t\tif (s[i] == ch): \n\t\t\ts = s[0 : i] + s[i + 1:] \n\t\t\tbreak\n\tfor i in range(len(s) - 1,-1,-1):  \n\t\tif (s[i] == ch): \n\t\t\t\ts = s[0 : i] + s[i + 1:] \n\t\t\t\tbreak\n\treturn s","context_text":null, "id": 11, "is_extension": false, "test_list": ["assert remove_first_and_last(\"hello\",\"l\") == \"heo\"", "assert remove_first_and_last(\"hello\",\"a\") == \"hello\"", "assert remove_first_and_last(\"PPpPpPP\",\"P\") == \"PpPpP\""], "text": "Write a function to remove the first and last occurrences of a character in a string", "title": "MBPP/11"}
{"code": "def remove_first_and_last(seqs, ch):\n\tout = []\n\tfor seq in seqs:\n\tseq = seq.replace(ch,'',1)\n\tlast_idx = seq.rfind(ch)\n\tif last_idx == -1:\n\t\tout.append(seq)\n\telse:\n\t\tout.append(seq[:last_idx]+seq[last_idx+1:])\n\treturn out","context_text": "remove the character from each string in an array.", "is_extension": true, "original_id": 11, "test_list": ["assert remove_first_and_last([\"Hello World\",\"!\"],\"l\") == [\"Helo Word\", \"!\"]", "assert remove_first_and_last([\"aaa\",\"aa\"],\"a\") == [\"a\", \"\"]", "assert remove_first_and_last([\"Testing String\"],\"o\") == [\"Testing String\"]"], "text": "Write a function to remove the first and last occurrence of a character in string in an array of strings", "title": "MBPP/11_string-array"}
{"code": "def remove_first_and_last(s, ch, n, m):\n\ts = s.replace(ch,'',n)\n\tlast_idx = s.rfind(ch)\n\tfor _ in range(m):\n\t\tlast_idx = s.rfind(ch)\n\t\tif last_idx == -1:\n\t\t\treturn s\n\t\ts = s[:last_idx]+s[last_idx+1:]\n\treturn s","context_text":"remove the first n and last m occurences", "is_extension": true, "original_id": 11, "test_list": ["assert remove_first_and_last(\"Hello World\",\"l\",1,1) == \"Helo Word\"", "assert remove_first_and_last(\"aAbAcAdAeAf\",\"A\",1,2) == \"abAcAdef\"", "assert remove_first_and_last(\"Apple\",\"z\",1,1) == \"Apple\""], "text": "Write a function to remove the first n and last m occurrences of a character in a string", "title": "MBPP/11_first-n-last-m"}
{"code": "def remove_first_and_last(s, ch):\n\tseq_copy = s.lower()\n\tch_lower = ch.lower()\n\ttry:\n\t\tfirst_idx = seq_copy.index(ch_lower)\n\texcept ValueError:\n\t\treturn s\n\ts = s[:first_idx] + s[first_idx+1:]\n\tseq_copy = seq_copy[:first_idx] + seq_copy[first_idx+1:]\n\tlast_idx = seq_copy.rfind(ch_lower)\n\tif last_idx == -1:\n\t\treturn s\n\treturn s[:last_idx] + s[last_idx+1:]", "context_text": "remove the character regardless of case", "is_extension": true, "original_id": 11, "test_list": ["assert remove_first_and_last(\"Hello World\",\"h\") == \"ello World\"", "assert remove_first_and_last(\"AbaAca\",\"A\") == \"baAc\"", "assert remove_first_and_last(\"PiLlow\",\"l\") == \"Piow\""], "text": "Write a function to remove the first and last occurrence character, case insensitive, from a sequence.", "title": "MBPP/11_case-insensitive"}

