{"question_id": "2342", "schema": {"name": "maximumSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [18, 43, 36, 13, 7]}, "outputs": 54}, {"idx": 1, "inputs": {"nums": [10, 12, 19, 14]}, "outputs": -1}], "title": "Max Sum of a Pair With Equal Sum of Digits", "entry_fn_name": "maximumSum"}
{"question_id": "2350", "schema": {"name": "shortestSequence", "params": [{"name": "rolls", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rolls": [4, 2, 1, 2, 3, 3, 2, 4, 1], "k": 4}, "outputs": 3}, {"idx": 1, "inputs": {"rolls": [1, 1, 2, 2], "k": 2}, "outputs": 2}, {"idx": 2, "inputs": {"rolls": [1, 1, 3, 2, 2, 2, 3, 3], "k": 4}, "outputs": 1}], "title": "Shortest Impossible Sequence of Rolls", "entry_fn_name": "shortestSequence"}
{"question_id": "2347", "schema": {"name": "bestHand", "params": [{"name": "ranks", "type": "integer[]"}, {"type": "character[]", "name": "suits"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"ranks": [13, 2, 3, 1, 9], "suits": ["a", "a", "a", "a", "a"]}, "outputs": "Flush"}, {"idx": 1, "inputs": {"ranks": [4, 4, 2, 4, 4], "suits": ["d", "a", "a", "b", "c"]}, "outputs": "Three of a Kind"}, {"idx": 2, "inputs": {"ranks": [10, 10, 2, 12, 9], "suits": ["a", "b", "c", "a", "d"]}, "outputs": "Pair"}], "title": "Best Poker Hand", "entry_fn_name": "bestHand"}
{"question_id": "2348", "schema": {"name": "zeroFilledSubarray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 0, 0, 2, 0, 0, 4]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [0, 0, 0, 2, 0, 0]}, "outputs": 9}, {"idx": 2, "inputs": {"nums": [2, 10, 2019]}, "outputs": 0}], "title": "Number of Zero-Filled Subarrays", "entry_fn_name": "zeroFilledSubarray"}
{"question_id": "2354", "schema": {"name": "countExcellentPairs", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1], "k": 3}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [5, 1, 1], "k": 10}, "outputs": 0}], "title": "Number of Excellent Pairs", "entry_fn_name": "countExcellentPairs"}
{"question_id": "2352", "schema": {"name": "equalPairs", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[3, 2, 1], [1, 7, 6], [2, 7, 7]]}, "outputs": 1}, {"idx": 1, "inputs": {"grid": [[3, 1, 2, 2], [1, 4, 4, 5], [2, 4, 2, 2], [2, 4, 2, 2]]}, "outputs": 3}], "title": "Equal Row and Column Pairs", "entry_fn_name": "equalPairs"}
{"question_id": "2351", "schema": {"name": "repeatedCharacter", "params": [{"name": "s", "type": "string"}], "return": {"type": "character"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abccbaacz"}, "outputs": "c"}, {"idx": 1, "inputs": {"s": "abcdd"}, "outputs": "d"}], "title": "First Letter to Appear Twice", "entry_fn_name": "repeatedCharacter"}
{"question_id": "2344", "schema": {"name": "minOperations", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[]", "name": "numsDivide"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 2, 4, 3], "numsDivide": [9, 6, 9, 3, 15]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [4, 3, 6], "numsDivide": [8, 2, 6, 10]}, "outputs": -1}], "title": "Minimum Deletions to Make Array Divisible", "entry_fn_name": "minOperations"}
{"question_id": "2343", "schema": {"name": "smallestTrimmedNumbers", "params": [{"name": "nums", "type": "string[]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": ["102", "473", "251", "814"], "queries": [[1, 1], [2, 3], [4, 2], [1, 2]]}, "outputs": [2, 2, 1, 0]}, {"idx": 1, "inputs": {"nums": ["24", "37", "96", "04"], "queries": [[2, 1], [2, 2]]}, "outputs": [3, 0]}], "title": "Query Kth Smallest Trimmed Number", "entry_fn_name": "smallestTrimmedNumbers"}
{"question_id": "2341", "schema": {"name": "numberOfPairs", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 2, 1, 3, 2, 2]}, "outputs": [3, 1]}, {"idx": 1, "inputs": {"nums": [1, 1]}, "outputs": [1, 0]}, {"idx": 2, "inputs": {"nums": [0]}, "outputs": [0, 1]}], "title": "Maximum Number of Pairs in Array", "entry_fn_name": "numberOfPairs"}
{"question_id": "2334", "schema": {"name": "validSubarraySize", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "threshold"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 4, 3, 1], "threshold": 6}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [6, 5, 6, 5, 8], "threshold": 7}, "outputs": 1}], "title": "Subarray With Elements Greater Than Varying Threshold", "entry_fn_name": "validSubarraySize"}
{"question_id": "2333", "schema": {"name": "minSumSquareDiff", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}, {"type": "integer", "name": "k1"}, {"type": "integer", "name": "k2"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 3, 4], "nums2": [2, 10, 20, 19], "k1": 0, "k2": 0}, "outputs": 579}, {"idx": 1, "inputs": {"nums1": [1, 4, 10, 12], "nums2": [5, 8, 6, 9], "k1": 1, "k2": 1}, "outputs": 43}], "title": "Minimum Sum of Squared Difference", "entry_fn_name": "minSumSquareDiff"}
{"question_id": "2332", "schema": {"name": "latestTimeCatchTheBus", "params": [{"name": "buses", "type": "integer[]"}, {"type": "integer[]", "name": "passengers"}, {"type": "integer", "name": "capacity"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"buses": [10, 20], "passengers": [2, 17, 18, 19], "capacity": 2}, "outputs": 16}, {"idx": 1, "inputs": {"buses": [20, 30, 10], "passengers": [19, 13, 26, 4, 25, 11, 21], "capacity": 2}, "outputs": 20}], "title": "The Latest Time to Catch a Bus", "entry_fn_name": "latestTimeCatchTheBus"}
{"question_id": "2331", "schema": {"name": "evaluateTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [2, 1, 3, null, null, 0, 1]}, "outputs": true}, {"idx": 1, "inputs": {"root": [0]}, "outputs": false}], "title": "Evaluate Boolean Binary Tree", "entry_fn_name": "evaluateTree"}
{"question_id": "2338", "schema": {"name": "idealArrays", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "maxValue"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "maxValue": 5}, "outputs": 10}, {"idx": 1, "inputs": {"n": 5, "maxValue": 3}, "outputs": 11}], "title": "Count the Number of Ideal Arrays", "entry_fn_name": "idealArrays"}
{"question_id": "2337", "schema": {"name": "canChange", "params": [{"name": "start", "type": "string"}, {"type": "string", "name": "target"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"start": "_L__R__R_", "target": "L______RR"}, "outputs": true}, {"idx": 1, "inputs": {"start": "R_L_", "target": "__LR"}, "outputs": false}, {"idx": 2, "inputs": {"start": "_R", "target": "R_"}, "outputs": false}], "title": "Move Pieces to Obtain a String", "entry_fn_name": "canChange"}
{"question_id": "2335", "schema": {"name": "fillCups", "params": [{"name": "amount", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"amount": [1, 4, 2]}, "outputs": 4}, {"idx": 1, "inputs": {"amount": [5, 4, 4]}, "outputs": 7}, {"idx": 2, "inputs": {"amount": [5, 0, 0]}, "outputs": 5}], "title": "Minimum Amount of Time to Fill Cups", "entry_fn_name": "fillCups"}
{"question_id": "2326", "schema": {"name": "spiralMatrix", "params": [{"name": "m", "type": "integer"}, {"type": "integer", "name": "n"}, {"type": "ListNode", "name": "head"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"m": 3, "n": 5, "head": [3, 0, 2, 6, 8, 1, 7, 9, 4, 2, 5, 5, 0]}, "outputs": [[3, 0, 2, 6, 8], [5, 0, -1, -1, 1], [5, 2, 4, 9, 7]]}, {"idx": 1, "inputs": {"m": 1, "n": 4, "head": [0, 1, 2]}, "outputs": [[0, 1, 2, -1]]}], "title": "Spiral Matrix IV", "entry_fn_name": "spiralMatrix"}
{"question_id": "2328", "schema": {"name": "countPaths", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 1], [3, 4]]}, "outputs": 8}, {"idx": 1, "inputs": {"grid": [[1], [2]]}, "outputs": 3}], "title": "Number of Increasing Paths in a Grid", "entry_fn_name": "countPaths"}
{"question_id": "2327", "schema": {"name": "peopleAwareOfSecret", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "delay"}, {"type": "integer", "name": "forget"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "delay": 2, "forget": 4}, "outputs": 5}, {"idx": 1, "inputs": {"n": 4, "delay": 1, "forget": 3}, "outputs": 6}], "title": "Number of People Aware of a Secret", "entry_fn_name": "peopleAwareOfSecret"}
{"question_id": "2325", "schema": {"name": "decodeMessage", "params": [{"name": "key", "type": "string"}, {"type": "string", "name": "message"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"key": "the quick brown fox jumps over the lazy dog", "message": "vkbs bs t suepuv"}, "outputs": "this is a secret"}, {"idx": 1, "inputs": {"key": "eljuxhpwnyrdgtqkviszcfmabo", "message": "zwx hnfx lqantp mnoeius ycgk vcnjrdb"}, "outputs": "the five boxing wizards jump quickly"}], "title": "Decode the Message", "entry_fn_name": "decodeMessage"}
{"question_id": "2318", "schema": {"name": "distinctSequences", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": 184}, {"idx": 1, "inputs": {"n": 2}, "outputs": 22}], "title": "Number of Distinct Roll Sequences", "entry_fn_name": "distinctSequences"}
{"question_id": "2316", "schema": {"name": "countPairs", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "edges": [[0, 1], [0, 2], [1, 2]]}, "outputs": 0}, {"idx": 1, "inputs": {"n": 7, "edges": [[0, 2], [0, 5], [2, 4], [1, 6], [5, 4]]}, "outputs": 14}], "title": "Count Unreachable Pairs of Nodes in an Undirected Graph", "entry_fn_name": "countPairs"}
{"question_id": "2317", "schema": {"name": "maximumXOR", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 4, 6]}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 9, 2]}, "outputs": 11}], "title": "Maximum XOR After Operations ", "entry_fn_name": "maximumXOR"}
{"question_id": "2315", "schema": {"name": "countAsterisks", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "l|*e*et|c**o|*de|"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "iamprogrammer"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "yo|uar|e**|b|e***au|tifu|l"}, "outputs": 5}], "title": "Count Asterisks", "entry_fn_name": "countAsterisks"}
{"question_id": "2322", "schema": {"name": "minimumScore", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 5, 5, 4, 11], "edges": [[0, 1], [1, 2], [1, 3], [3, 4]]}, "outputs": 9}, {"idx": 1, "inputs": {"nums": [5, 5, 2, 4, 4, 2], "edges": [[0, 1], [1, 2], [5, 2], [4, 3], [1, 3]]}, "outputs": 0}], "title": "Minimum Score After Removals on a Tree", "entry_fn_name": "minimumScore"}
{"question_id": "2319", "schema": {"name": "checkXMatrix", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[2, 0, 0, 1], [0, 3, 1, 0], [0, 5, 2, 0], [4, 0, 0, 2]]}, "outputs": true}, {"idx": 1, "inputs": {"grid": [[5, 7, 0], [0, 3, 1], [0, 5, 0]]}, "outputs": false}], "title": "Check if Matrix Is X-Matrix", "entry_fn_name": "checkXMatrix"}
{"question_id": "2320", "schema": {"name": "countHousePlacements", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 4}, {"idx": 1, "inputs": {"n": 2}, "outputs": 9}], "title": "Count Number of Ways to Place Houses", "entry_fn_name": "countHousePlacements"}
{"question_id": "2311", "schema": {"name": "longestSubsequence", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1001010", "k": 5}, "outputs": 5}, {"idx": 1, "inputs": {"s": "00101001", "k": 1}, "outputs": 6}], "title": "Longest Binary Subsequence Less Than or Equal to K", "entry_fn_name": "longestSubsequence"}
{"question_id": "2302", "schema": {"name": "countSubarrays", "params": [{"name": "nums", "type": "integer[]"}, {"type": "long", "name": "k"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 4, 3, 5], "k": 10}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [1, 1, 1], "k": 5}, "outputs": 5}], "title": "Count Subarrays With Score Less Than K", "entry_fn_name": "countSubarrays"}
{"question_id": "2301", "schema": {"name": "matchReplacement", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "sub"}, {"type": "character[][]", "name": "mappings"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "fool3e7bar", "sub": "leet", "mappings": [["e", "3"], ["t", "7"], ["t", "8"]]}, "outputs": true}, {"idx": 1, "inputs": {"s": "fooleetbar", "sub": "f00l", "mappings": [["o", "0"]]}, "outputs": false}, {"idx": 2, "inputs": {"s": "Fool33tbaR", "sub": "leetd", "mappings": [["e", "3"], ["t", "7"], ["t", "8"], ["d", "b"], ["p", "b"]]}, "outputs": true}], "title": "Match Substring After Replacement", "entry_fn_name": "matchReplacement"}
{"question_id": "2300", "schema": {"name": "successfulPairs", "params": [{"name": "spells", "type": "integer[]"}, {"type": "integer[]", "name": "potions"}, {"type": "long", "name": "success"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"spells": [5, 1, 3], "potions": [1, 2, 3, 4, 5], "success": 7}, "outputs": [4, 0, 3]}, {"idx": 1, "inputs": {"spells": [3, 1, 2], "potions": [8, 5, 8], "success": 16}, "outputs": [2, 0, 2]}], "title": "Successful Pairs of Spells and Potions", "entry_fn_name": "successfulPairs"}
{"question_id": "2299", "schema": {"name": "strongPasswordCheckerII", "params": [{"name": "password", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"password": "IloveLe3tcode!"}, "outputs": true}, {"idx": 1, "inputs": {"password": "Me+You--IsMyDream"}, "outputs": false}, {"idx": 2, "inputs": {"password": "1aB!"}, "outputs": false}], "title": "Strong Password Checker II", "entry_fn_name": "strongPasswordCheckerII"}
{"question_id": "2306", "schema": {"name": "distinctNames", "params": [{"name": "ideas", "type": "string[]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"ideas": ["coffee", "donuts", "time", "toffee"]}, "outputs": 6}, {"idx": 1, "inputs": {"ideas": ["lack", "back"]}, "outputs": 0}], "title": "Naming a Company", "entry_fn_name": "distinctNames"}
{"question_id": "2295", "schema": {"name": "arrayChange", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[][]", "name": "operations"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 4, 6], "operations": [[1, 3], [4, 7], [6, 1]]}, "outputs": [3, 2, 7, 1]}, {"idx": 1, "inputs": {"nums": [1, 2], "operations": [[1, 3], [2, 1], [3, 2]]}, "outputs": [2, 1]}], "title": "Replace Elements in an Array", "entry_fn_name": "arrayChange"}
{"question_id": "2294", "schema": {"name": "partitionArray", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 6, 1, 2, 5], "k": 2}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 2, 3], "k": 1}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [2, 2, 4, 5], "k": 0}, "outputs": 3}], "title": "Partition Array Such That Maximum Difference Is K", "entry_fn_name": "partitionArray"}
{"question_id": "2293", "schema": {"name": "minMaxGame", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 5, 2, 4, 8, 2, 2]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [3]}, "outputs": 3}], "title": "Min Max Game", "entry_fn_name": "minMaxGame"}
{"question_id": "2236", "schema": {"name": "checkTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [10, 4, 6]}, "outputs": true}, {"idx": 1, "inputs": {"root": [5, 3, 1]}, "outputs": false}], "title": "Root Equals Sum of Children", "entry_fn_name": "checkTree"}
{"question_id": "2235", "schema": {"name": "sum", "params": [{"name": "num1", "type": "integer"}, {"type": "integer", "name": "num2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num1": 12, "num2": 5}, "outputs": 17}, {"idx": 1, "inputs": {"num1": -10, "num2": 4}, "outputs": -6}], "title": "Add Two Integers", "entry_fn_name": "sum"}
{"question_id": "2285", "schema": {"name": "maximumImportance", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "roads"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "roads": [[0, 1], [1, 2], [2, 3], [0, 2], [1, 3], [2, 4]]}, "outputs": 43}, {"idx": 1, "inputs": {"n": 5, "roads": [[0, 3], [2, 4], [1, 3]]}, "outputs": 20}], "title": "Maximum Total Importance of Roads", "entry_fn_name": "maximumImportance"}
{"question_id": "2284", "schema": {"name": "largestWordCount", "params": [{"name": "messages", "type": "string[]"}, {"type": "string[]", "name": "senders"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"messages": ["Hello userTwooo", "Hi userThree", "Wonderful day Alice", "Nice day userThree"], "senders": ["Alice", "userTwo", "userThree", "Alice"]}, "outputs": "Alice"}, {"idx": 1, "inputs": {"messages": ["How is leetcode for everyone", "Leetcode is useful for practice"], "senders": ["Bob", "Charlie"]}, "outputs": "Charlie"}], "title": "Sender With Largest Word Count", "entry_fn_name": "largestWordCount"}
{"question_id": "2283", "schema": {"name": "digitCount", "params": [{"name": "num", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"num": "1210"}, "outputs": true}, {"idx": 1, "inputs": {"num": "030"}, "outputs": false}], "title": "Check if Number Has Equal Digit Count and Digit Value", "entry_fn_name": "digitCount"}
{"question_id": "2290", "schema": {"name": "minimumObstacles", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1, 1], [1, 1, 0], [1, 1, 0]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]]}, "outputs": 0}], "title": "Minimum Obstacle Removal to Reach Corner", "entry_fn_name": "minimumObstacles"}
{"question_id": "2289", "schema": {"name": "totalSteps", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 3, 4, 4, 7, 3, 6, 11, 8, 5, 11]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [4, 5, 7, 7, 13]}, "outputs": 0}], "title": "Steps to Make Array Non-decreasing", "entry_fn_name": "totalSteps"}
{"question_id": "2288", "schema": {"name": "discountPrices", "params": [{"name": "sentence", "type": "string"}, {"type": "integer", "name": "discount"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"sentence": "there are $1 $2 and 5$ candies in the shop", "discount": 50}, "outputs": "there are $0.50 $1.00 and 5$ candies in the shop"}, {"idx": 1, "inputs": {"sentence": "1 2 $3 4 $5 $6 7 8$ $9 $10$", "discount": 100}, "outputs": "1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$"}], "title": "Apply Discount to Prices", "entry_fn_name": "discountPrices"}
{"question_id": "2287", "schema": {"name": "rearrangeCharacters", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ilovecodingonleetcode", "target": "code"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "abcba", "target": "abc"}, "outputs": 1}, {"idx": 2, "inputs": {"s": "abbaccaddaeea", "target": "aaaaa"}, "outputs": 1}], "title": "Rearrange Characters to Make Target String", "entry_fn_name": "rearrangeCharacters"}
{"question_id": "2281", "schema": {"name": "totalStrength", "params": [{"name": "strength", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"strength": [1, 3, 1, 2]}, "outputs": 44}, {"idx": 1, "inputs": {"strength": [5, 4, 6]}, "outputs": 213}], "title": "Sum of Total Strength of Wizards", "entry_fn_name": "totalStrength"}
{"question_id": "2280", "schema": {"name": "minimumLines", "params": [{"name": "stockPrices", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stockPrices": [[1, 7], [2, 6], [3, 5], [4, 4], [5, 4], [6, 3], [7, 2], [8, 1]]}, "outputs": 3}, {"idx": 1, "inputs": {"stockPrices": [[3, 4], [1, 2], [7, 8], [2, 3]]}, "outputs": 1}], "title": "Minimum Lines to Represent a Line Chart", "entry_fn_name": "minimumLines"}
{"question_id": "2279", "schema": {"name": "maximumBags", "params": [{"name": "capacity", "type": "integer[]"}, {"type": "integer[]", "name": "rocks"}, {"type": "integer", "name": "additionalRocks"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"capacity": [2, 3, 4, 5], "rocks": [1, 2, 4, 4], "additionalRocks": 2}, "outputs": 3}, {"idx": 1, "inputs": {"capacity": [10, 2, 2], "rocks": [2, 2, 0], "additionalRocks": 100}, "outputs": 3}], "title": "Maximum Bags With Full Capacity of Rocks", "entry_fn_name": "maximumBags"}
{"question_id": "2278", "schema": {"name": "percentageLetter", "params": [{"name": "s", "type": "string"}, {"type": "character", "name": "letter"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "foobar", "letter": "o"}, "outputs": 33}, {"idx": 1, "inputs": {"s": "jjjj", "letter": "k"}, "outputs": 0}], "title": "Percentage of Letter in String", "entry_fn_name": "percentageLetter"}
{"question_id": "2246", "schema": {"name": "longestPath", "params": [{"type": "integer[]", "name": "parent"}, {"type": "string", "name": "s"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"parent": [-1, 0, 0, 1, 1, 2], "s": "abacbe"}, "outputs": 3}, {"idx": 1, "inputs": {"parent": [-1, 0, 0, 0], "s": "aabc"}, "outputs": 3}], "title": "Longest Path With Different Adjacent Characters", "entry_fn_name": "longestPath"}
{"question_id": "2245", "schema": {"name": "maxTrailingZeros", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[23, 17, 15, 3, 20], [8, 1, 20, 27, 11], [9, 4, 6, 2, 21], [40, 9, 1, 10, 6], [22, 7, 4, 5, 3]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[4, 3, 2], [7, 6, 1], [8, 8, 8]]}, "outputs": 0}], "title": "Maximum Trailing Zeros in a Cornered Path", "entry_fn_name": "maxTrailingZeros"}
{"question_id": "2244", "schema": {"name": "minimumRounds", "params": [{"name": "tasks", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tasks": [2, 2, 3, 3, 2, 4, 4, 4, 4, 4]}, "outputs": 4}, {"idx": 1, "inputs": {"tasks": [2, 3, 3]}, "outputs": -1}], "title": "Minimum Rounds to Complete All Tasks", "entry_fn_name": "minimumRounds"}
{"question_id": "2243", "schema": {"name": "digitSum", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "11111222223", "k": 3}, "outputs": "135"}, {"idx": 1, "inputs": {"s": "00000000", "k": 3}, "outputs": "000"}], "title": "Calculate Digit Sum of a String", "entry_fn_name": "digitSum"}
{"question_id": "2272", "schema": {"name": "largestVariance", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aababbb"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "abcde"}, "outputs": 0}], "title": "Substring With Largest Variance", "entry_fn_name": "largestVariance"}
{"question_id": "2271", "schema": {"name": "maximumWhiteTiles", "params": [{"name": "tiles", "type": "integer[][]"}, {"type": "integer", "name": "carpetLen"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tiles": [[1, 5], [10, 11], [12, 18], [20, 25], [30, 32]], "carpetLen": 10}, "outputs": 9}, {"idx": 1, "inputs": {"tiles": [[10, 11], [1, 1]], "carpetLen": 2}, "outputs": 2}], "title": "Maximum White Tiles Covered by a Carpet", "entry_fn_name": "maximumWhiteTiles"}
{"question_id": "2270", "schema": {"name": "waysToSplitArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 4, -8, 7]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 3, 1, 0]}, "outputs": 2}], "title": "Number of Ways to Split Array", "entry_fn_name": "waysToSplitArray"}
{"question_id": "2275", "schema": {"name": "largestCombination", "params": [{"name": "candidates", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"candidates": [16, 17, 71, 62, 12, 24, 14]}, "outputs": 4}, {"idx": 1, "inputs": {"candidates": [8, 8]}, "outputs": 2}], "title": "Largest Combination With Bitwise AND Greater Than Zero", "entry_fn_name": "largestCombination"}
{"question_id": "2274", "schema": {"name": "maxConsecutive", "params": [{"name": "bottom", "type": "integer"}, {"type": "integer", "name": "top"}, {"type": "integer[]", "name": "special"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"bottom": 2, "top": 9, "special": [4, 6]}, "outputs": 3}, {"idx": 1, "inputs": {"bottom": 6, "top": 8, "special": [7, 6, 8]}, "outputs": 0}], "title": "Maximum Consecutive Floors Without Special Floors", "entry_fn_name": "maxConsecutive"}
{"question_id": "2242", "schema": {"name": "maximumScore", "params": [{"type": "integer[]", "name": "scores"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"scores": [5, 2, 9, 8, 4], "edges": [[0, 1], [1, 2], [2, 3], [0, 2], [1, 3], [2, 4]]}, "outputs": 24}, {"idx": 1, "inputs": {"scores": [9, 20, 6, 4, 11, 12], "edges": [[0, 3], [5, 3], [2, 4], [1, 3]]}, "outputs": -1}], "title": "Maximum Score of a Node Sequence", "entry_fn_name": "maximumScore"}
{"question_id": "2240", "schema": {"name": "waysToBuyPensPencils", "params": [{"name": "total", "type": "integer"}, {"type": "integer", "name": "cost1"}, {"type": "integer", "name": "cost2"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"total": 20, "cost1": 10, "cost2": 5}, "outputs": 9}, {"idx": 1, "inputs": {"total": 5, "cost1": 10, "cost2": 10}, "outputs": 1}], "title": "Number of Ways to Buy Pens and Pencils", "entry_fn_name": "waysToBuyPensPencils"}
{"question_id": "2239", "schema": {"name": "findClosestNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-4, -2, 1, 4, 8]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [2, -1, 1]}, "outputs": 1}], "title": "Find Closest Number to Zero", "entry_fn_name": "findClosestNumber"}
{"question_id": "2267", "schema": {"name": "hasValidPath", "params": [{"name": "grid", "type": "character[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [["(", "(", "("], [")", "(", ")"], ["(", "(", ")"], ["(", "(", ")"]]}, "outputs": true}, {"idx": 1, "inputs": {"grid": [[")", ")"], ["(", "("]]}, "outputs": false}], "title": " Check if There Is a Valid Parentheses String Path", "entry_fn_name": "hasValidPath"}
{"question_id": "2266", "schema": {"name": "countTexts", "params": [{"name": "pressedKeys", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"pressedKeys": "22233"}, "outputs": 8}, {"idx": 1, "inputs": {"pressedKeys": "222222222222222222222222222222222222"}, "outputs": 82876089}], "title": "Count Number of Texts", "entry_fn_name": "countTexts"}
{"question_id": "2265", "schema": {"name": "averageOfSubtree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 8, 5, 0, 1, null, 6]}, "outputs": 5}, {"idx": 1, "inputs": {"root": [1]}, "outputs": 1}], "title": "Count Nodes Equal to Average of Subtree", "entry_fn_name": "averageOfSubtree"}
{"question_id": "2264", "schema": {"name": "largestGoodInteger", "params": [{"name": "num", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": "6777133339"}, "outputs": "777"}, {"idx": 1, "inputs": {"num": "2300019"}, "outputs": "000"}, {"idx": 2, "inputs": {"num": "42352338"}, "outputs": ""}], "title": "Largest 3-Same-Digit Number in String", "entry_fn_name": "largestGoodInteger"}
{"question_id": "2224", "schema": {"name": "convertTime", "params": [{"name": "current", "type": "string"}, {"type": "string", "name": "correct"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"current": "02:30", "correct": "04:35"}, "outputs": 3}, {"idx": 1, "inputs": {"current": "11:00", "correct": "11:01"}, "outputs": 1}], "title": "Minimum Number of Operations to Convert Time", "entry_fn_name": "convertTime"}
{"question_id": "2258", "schema": {"name": "maximumMinutes", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 1, 0], [0, 2, 0, 0, 1, 2, 0], [0, 0, 2, 2, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[0, 0, 0, 0], [0, 1, 2, 0], [0, 2, 0, 0]]}, "outputs": -1}, {"idx": 2, "inputs": {"grid": [[0, 0, 0], [2, 2, 0], [1, 2, 0]]}, "outputs": 1000000000}], "title": "Escape the Spreading Fire", "entry_fn_name": "maximumMinutes"}
{"question_id": "2257", "schema": {"name": "countUnguarded", "params": [{"name": "m", "type": "integer"}, {"type": "integer", "name": "n"}, {"type": "integer[][]", "name": "guards"}, {"type": "integer[][]", "name": "walls"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 4, "n": 6, "guards": [[0, 0], [1, 1], [2, 3]], "walls": [[0, 1], [2, 2], [1, 4]]}, "outputs": 7}, {"idx": 1, "inputs": {"m": 3, "n": 3, "guards": [[1, 1]], "walls": [[0, 1], [1, 0], [2, 1], [1, 2]]}, "outputs": 4}], "title": "Count Unguarded Cells in the Grid", "entry_fn_name": "countUnguarded"}
{"question_id": "2256", "schema": {"name": "minimumAverageDifference", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 5, 3, 9, 5, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [0]}, "outputs": 0}], "title": "Minimum Average Difference", "entry_fn_name": "minimumAverageDifference"}
{"question_id": "2255", "schema": {"name": "countPrefixes", "params": [{"name": "words", "type": "string[]"}, {"type": "string", "name": "s"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["a", "b", "c", "ab", "bc", "abc"], "s": "abc"}, "outputs": 3}, {"idx": 1, "inputs": {"words": ["a", "a"], "s": "aa"}, "outputs": 2}], "title": "Count Prefixes of a Given String", "entry_fn_name": "countPrefixes"}
{"question_id": "2262", "schema": {"name": "appealSum", "params": [{"name": "s", "type": "string"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abbca"}, "outputs": 28}, {"idx": 1, "inputs": {"s": "code"}, "outputs": 20}], "title": "Total Appeal of A String", "entry_fn_name": "appealSum"}
{"question_id": "2260", "schema": {"name": "minimumCardPickup", "params": [{"name": "cards", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"cards": [3, 4, 2, 3, 4, 7]}, "outputs": 4}, {"idx": 1, "inputs": {"cards": [1, 0, 5, 3]}, "outputs": -1}], "title": "Minimum Consecutive Cards to Pick Up", "entry_fn_name": "minimumCardPickup"}
{"question_id": "2259", "schema": {"name": "removeDigit", "params": [{"name": "number", "type": "string"}, {"type": "character", "name": "digit"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"number": "123", "digit": "3"}, "outputs": "12"}, {"idx": 1, "inputs": {"number": "1231", "digit": "1"}, "outputs": "231"}, {"idx": 2, "inputs": {"number": "551", "digit": "5"}, "outputs": "51"}], "title": "Remove Digit From Number to Maximize Result", "entry_fn_name": "removeDigit"}
{"question_id": "2251", "schema": {"name": "fullBloomFlowers", "params": [{"name": "flowers", "type": "integer[][]"}, {"type": "integer[]", "name": "persons"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"flowers": [[1, 6], [3, 7], [9, 12], [4, 13]], "persons": [2, 3, 7, 11]}, "outputs": [1, 2, 2, 2]}, {"idx": 1, "inputs": {"flowers": [[1, 10], [3, 3]], "persons": [3, 3, 2]}, "outputs": [2, 2, 1]}], "title": "Number of Flowers in Full Bloom", "entry_fn_name": "fullBloomFlowers"}
{"question_id": "2250", "schema": {"name": "countRectangles", "params": [{"name": "rectangles", "type": "integer[][]"}, {"type": "integer[][]", "name": "points"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"rectangles": [[1, 2], [2, 3], [2, 5]], "points": [[2, 1], [1, 4]]}, "outputs": [2, 1]}, {"idx": 1, "inputs": {"rectangles": [[1, 1], [2, 2], [3, 3]], "points": [[1, 3], [1, 1]]}, "outputs": [1, 3]}], "title": "Count Number of Rectangles Containing Each Point", "entry_fn_name": "countRectangles"}
{"question_id": "2249", "schema": {"name": "countLatticePoints", "params": [{"name": "circles", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"circles": [[2, 2, 1]]}, "outputs": 5}, {"idx": 1, "inputs": {"circles": [[2, 2, 2], [3, 4, 1]]}, "outputs": 16}], "title": "Count Lattice Points Inside a Circle", "entry_fn_name": "countLatticePoints"}
{"question_id": "2234", "schema": {"name": "maximumBeauty", "params": [{"name": "flowers", "type": "integer[]"}, {"type": "long", "name": "newFlowers"}, {"type": "integer", "name": "target"}, {"type": "integer", "name": "full"}, {"type": "integer", "name": "partial"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"flowers": [1, 3, 1, 1], "newFlowers": 7, "target": 6, "full": 12, "partial": 1}, "outputs": 14}, {"idx": 1, "inputs": {"flowers": [2, 4, 5, 3], "newFlowers": 10, "target": 5, "full": 2, "partial": 6}, "outputs": 30}], "title": "Maximum Total Beauty of the Gardens", "entry_fn_name": "maximumBeauty"}
{"question_id": "2233", "schema": {"name": "maximumProduct", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 4], "k": 5}, "outputs": 20}, {"idx": 1, "inputs": {"nums": [6, 3, 3, 2], "k": 2}, "outputs": 216}], "title": "Maximum Product After K Increments", "entry_fn_name": "maximumProduct"}
{"question_id": "2232", "schema": {"name": "minimizeResult", "params": [{"name": "expression", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "247+38"}, "outputs": "2(47+38)"}, {"idx": 1, "inputs": {"expression": "12+34"}, "outputs": "1(2+3)4"}, {"idx": 2, "inputs": {"expression": "999+999"}, "outputs": "(999+999)"}], "title": "Minimize Result by Adding Parentheses to Expression", "entry_fn_name": "minimizeResult"}
{"question_id": "2231", "schema": {"name": "largestInteger", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 1234}, "outputs": 3412}, {"idx": 1, "inputs": {"num": 65875}, "outputs": 87655}], "title": "Largest Number After Digit Swaps by Parity", "entry_fn_name": "largestInteger"}
{"question_id": "2223", "schema": {"name": "sumScores", "params": [{"name": "s", "type": "string"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"s": "babab"}, "outputs": 9}, {"idx": 1, "inputs": {"s": "azbazbzaz"}, "outputs": 14}], "title": "Sum of Scores of Built Strings", "entry_fn_name": "sumScores"}
{"question_id": "2222", "schema": {"name": "numberOfWays", "params": [{"name": "s", "type": "string"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"s": "001101"}, "outputs": 6}, {"idx": 1, "inputs": {"s": "11100"}, "outputs": 0}], "title": "Number of Ways to Select Buildings", "entry_fn_name": "numberOfWays"}
{"question_id": "2221", "schema": {"name": "triangularSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5]}, "outputs": 8}, {"idx": 1, "inputs": {"nums": [5]}, "outputs": 5}], "title": "Find Triangular Sum of an Array", "entry_fn_name": "triangularSum"}
{"question_id": "2220", "schema": {"name": "minBitFlips", "params": [{"name": "start", "type": "integer"}, {"type": "integer", "name": "goal"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"start": 10, "goal": 7}, "outputs": 3}, {"idx": 1, "inputs": {"start": 3, "goal": 4}, "outputs": 3}], "title": "Minimum Bit Flips to Convert Number", "entry_fn_name": "minBitFlips"}
{"question_id": "2203", "schema": {"name": "minimumWeight", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer", "name": "src1"}, {"type": "integer", "name": "src2"}, {"type": "integer", "name": "dest"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "edges": [[0, 2, 2], [0, 5, 6], [1, 0, 3], [1, 4, 5], [2, 1, 1], [2, 3, 3], [2, 3, 4], [3, 4, 2], [4, 5, 1]], "src1": 0, "src2": 1, "dest": 5}, "outputs": 9}, {"idx": 1, "inputs": {"n": 3, "edges": [[0, 1, 1], [2, 1, 1]], "src1": 0, "src2": 1, "dest": 2}, "outputs": -1}], "title": "Minimum Weighted Subgraph With the Required Paths", "entry_fn_name": "minimumWeight"}
{"question_id": "2200", "schema": {"name": "findKDistantIndices", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "key"}, {"type": "integer", "name": "k"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 4, 9, 1, 3, 9, 5], "key": 9, "k": 1}, "outputs": [1, 2, 3, 4, 5, 6]}, {"idx": 1, "inputs": {"nums": [2, 2, 2, 2, 2], "key": 2, "k": 2}, "outputs": [0, 1, 2, 3, 4]}], "title": "Find All K-Distant Indices in an Array", "entry_fn_name": "findKDistantIndices"}
{"question_id": "2213", "schema": {"name": "longestRepeating", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "queryCharacters"}, {"type": "integer[]", "name": "queryIndices"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"s": "babacc", "queryCharacters": "bcb", "queryIndices": [1, 3, 3]}, "outputs": [3, 3, 4]}, {"idx": 1, "inputs": {"s": "abyzz", "queryCharacters": "aa", "queryIndices": [2, 1]}, "outputs": [2, 3]}], "title": "Longest Substring of One Repeating Character", "entry_fn_name": "longestRepeating"}
{"question_id": "2212", "schema": {"name": "maximumBobPoints", "params": [{"name": "numArrows", "type": "integer"}, {"type": "integer[]", "name": "aliceArrows"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"numArrows": 9, "aliceArrows": [1, 1, 0, 1, 0, 0, 2, 1, 0, 1, 2, 0]}, "outputs": [0, 0, 0, 0, 1, 1, 0, 0, 1, 2, 3, 1]}, {"idx": 1, "inputs": {"numArrows": 3, "aliceArrows": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2]}, "outputs": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]}], "title": "Maximum Points in an Archery Competition", "entry_fn_name": "maximumBobPoints"}
{"question_id": "2211", "schema": {"name": "countCollisions", "params": [{"name": "directions", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"directions": "RLRSLL"}, "outputs": 5}, {"idx": 1, "inputs": {"directions": "LLRR"}, "outputs": 0}], "title": "Count Collisions on a Road", "entry_fn_name": "countCollisions"}
{"question_id": "2210", "schema": {"name": "countHillValley", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 4, 1, 1, 6, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [6, 6, 5, 5, 4, 1]}, "outputs": 0}], "title": "Count Hills and Valleys in an Array", "entry_fn_name": "countHillValley"}
{"question_id": "2190", "schema": {"name": "mostFrequent", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "key"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 100, 200, 1, 100], "key": 1}, "outputs": 100}, {"idx": 1, "inputs": {"nums": [2, 2, 2, 2, 3], "key": 2}, "outputs": 2}], "title": "Most Frequent Number Following Key In an Array", "entry_fn_name": "mostFrequent"}
{"question_id": "2209", "schema": {"name": "minimumWhiteTiles", "params": [{"name": "floor", "type": "string"}, {"type": "integer", "name": "numCarpets"}, {"type": "integer", "name": "carpetLen"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"floor": "10110101", "numCarpets": 2, "carpetLen": 2}, "outputs": 2}, {"idx": 1, "inputs": {"floor": "11111", "numCarpets": 2, "carpetLen": 3}, "outputs": 0}], "title": "Minimum White Tiles After Covering With Carpets", "entry_fn_name": "minimumWhiteTiles"}
{"question_id": "2208", "schema": {"name": "halveArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 19, 8, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [3, 8, 20]}, "outputs": 3}], "title": "Minimum Operations to Halve Array Sum", "entry_fn_name": "halveArray"}
{"question_id": "2207", "schema": {"name": "maximumSubsequenceCount", "params": [{"name": "text", "type": "string"}, {"type": "string", "name": "pattern"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"text": "abdcdbc", "pattern": "ac"}, "outputs": 4}, {"idx": 1, "inputs": {"text": "aabb", "pattern": "ab"}, "outputs": 6}], "title": "Maximize Number of Subsequences in a String", "entry_fn_name": "maximumSubsequenceCount"}
{"question_id": "2206", "schema": {"name": "divideArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 3, 2, 2, 2]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": false}], "title": "Divide Array Into Equal Pairs", "entry_fn_name": "divideArray"}
{"question_id": "2197", "schema": {"name": "replaceNonCoprimes", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [6, 4, 3, 2, 7, 6, 2]}, "outputs": [12, 7, 6]}, {"idx": 1, "inputs": {"nums": [2, 2, 1, 1, 3, 3, 3]}, "outputs": [2, 1, 1, 3]}], "title": "Replace Non-Coprime Numbers in Array", "entry_fn_name": "replaceNonCoprimes"}
{"question_id": "2196", "schema": {"name": "createBinaryTree", "params": [{"name": "descriptions", "type": "integer[][]"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"descriptions": [[20, 15, 1], [20, 17, 0], [50, 20, 1], [50, 80, 0], [80, 19, 1]]}, "outputs": [50, 20, 80, 15, 17, 19]}, {"idx": 1, "inputs": {"descriptions": [[1, 2, 1], [2, 3, 0], [3, 4, 1]]}, "outputs": [1, 2, null, null, 3, 4]}], "title": "Create Binary Tree From Descriptions", "entry_fn_name": "createBinaryTree"}
{"question_id": "2195", "schema": {"name": "minimalKSum", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 4, 25, 10, 25], "k": 2}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [5, 6], "k": 6}, "outputs": 25}], "title": "Append K Integers With Minimal Sum", "entry_fn_name": "minimalKSum"}
{"question_id": "2194", "schema": {"name": "cellsInRange", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "K1:L2"}, "outputs": ["K1", "K2", "L1", "L2"]}, {"idx": 1, "inputs": {"s": "A1:F1"}, "outputs": ["A1", "B1", "C1", "D1", "E1", "F1"]}], "title": "Cells in a Range on an Excel Sheet", "entry_fn_name": "cellsInRange"}
{"question_id": "2183", "schema": {"name": "countPairs", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5], "k": 2}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4], "k": 5}, "outputs": 0}], "title": "Count Array Pairs Divisible by K", "entry_fn_name": "countPairs"}
{"question_id": "2182", "schema": {"name": "repeatLimitedString", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "repeatLimit"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "cczazcc", "repeatLimit": 3}, "outputs": "zzcccac"}, {"idx": 1, "inputs": {"s": "aababab", "repeatLimit": 2}, "outputs": "bbabaa"}], "title": "Construct String With Repeat Limit", "entry_fn_name": "repeatLimitedString"}
{"question_id": "2181", "schema": {"name": "mergeNodes", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [0, 3, 1, 0, 4, 5, 2, 0]}, "outputs": [4, 11]}, {"idx": 1, "inputs": {"head": [0, 1, 0, 3, 0, 2, 2, 0]}, "outputs": [1, 3, 4]}], "title": "Merge Nodes in Between Zeros", "entry_fn_name": "mergeNodes"}
{"question_id": "2180", "schema": {"name": "countEven", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 4}, "outputs": 2}, {"idx": 1, "inputs": {"num": 30}, "outputs": 14}], "title": "Count Integers With Even Digit Sum", "entry_fn_name": "countEven"}
{"question_id": "2188", "schema": {"name": "minimumFinishTime", "params": [{"name": "tires", "type": "integer[][]"}, {"type": "integer", "name": "changeTime"}, {"type": "integer", "name": "numLaps"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tires": [[2, 3], [3, 4]], "changeTime": 5, "numLaps": 4}, "outputs": 21}, {"idx": 1, "inputs": {"tires": [[1, 10], [2, 2], [3, 4]], "changeTime": 6, "numLaps": 5}, "outputs": 25}], "title": "Minimum Time to Finish the Race", "entry_fn_name": "minimumFinishTime"}
{"question_id": "2187", "schema": {"name": "minimumTime", "params": [{"name": "time", "type": "integer[]"}, {"type": "integer", "name": "totalTrips"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"time": [1, 2, 3], "totalTrips": 5}, "outputs": 3}, {"idx": 1, "inputs": {"time": [2], "totalTrips": 1}, "outputs": 2}], "title": "Minimum Time to Complete Trips", "entry_fn_name": "minimumTime"}
{"question_id": "2186", "schema": {"name": "minSteps", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "t"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leetco", "t": "cot"}, "outputs": 7}, {"idx": 1, "inputs": {"s": "night", "t": "thing"}, "outputs": 0}], "title": "Minimum Number of Steps to Make Two Strings Anagram II", "entry_fn_name": "minSteps"}
{"question_id": "2172", "schema": {"name": "maximumANDSum", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "numSlots"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5, 6], "numSlots": 3}, "outputs": 9}, {"idx": 1, "inputs": {"nums": [1, 3, 10, 4, 7, 1], "numSlots": 9}, "outputs": 24}], "title": "Maximum AND Sum of Array", "entry_fn_name": "maximumANDSum"}
{"question_id": "2170", "schema": {"name": "minimumOperations", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 3, 2, 4, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 2, 2, 2, 2]}, "outputs": 2}], "title": "Minimum Operations to Make the Array Alternating", "entry_fn_name": "minimumOperations"}
{"question_id": "2169", "schema": {"name": "countOperations", "params": [{"name": "num1", "type": "integer"}, {"type": "integer", "name": "num2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num1": 2, "num2": 3}, "outputs": 3}, {"idx": 1, "inputs": {"num1": 10, "num2": 10}, "outputs": 1}], "title": "Count Operations to Obtain Zero", "entry_fn_name": "countOperations"}
{"question_id": "2167", "schema": {"name": "minimumTime", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1100101"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "0010"}, "outputs": 2}], "title": "Minimum Time to Remove All Cars Containing Illegal Goods", "entry_fn_name": "minimumTime"}
{"question_id": "2165", "schema": {"name": "smallestNumber", "params": [{"name": "num", "type": "long"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"num": 310}, "outputs": 103}, {"idx": 1, "inputs": {"num": -7605}, "outputs": -7650}], "title": "Smallest Value of the Rearranged Number", "entry_fn_name": "smallestNumber"}
{"question_id": "2164", "schema": {"name": "sortEvenOdd", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 1, 2, 3]}, "outputs": [2, 3, 4, 1]}, {"idx": 1, "inputs": {"nums": [2, 1]}, "outputs": [2, 1]}], "title": "Sort Even and Odd Indices Independently", "entry_fn_name": "sortEvenOdd"}
{"question_id": "2179", "schema": {"name": "goodTriplets", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [2, 0, 1, 3], "nums2": [0, 1, 2, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"nums1": [4, 0, 1, 3, 2], "nums2": [4, 1, 0, 2, 3]}, "outputs": 4}], "title": "Count Good Triplets in an Array", "entry_fn_name": "goodTriplets"}
{"question_id": "2178", "schema": {"name": "maximumEvenSplit", "params": [{"name": "finalSum", "type": "long"}], "return": {"type": "list<long>"}}, "test_cases": [{"idx": 0, "inputs": {"finalSum": 12}, "outputs": [2, 4, 6]}, {"idx": 1, "inputs": {"finalSum": 7}, "outputs": []}, {"idx": 2, "inputs": {"finalSum": 28}, "outputs": [6, 8, 2, 12]}], "title": "Maximum Split of Positive Even Integers", "entry_fn_name": "maximumEvenSplit"}
{"question_id": "2177", "schema": {"name": "sumOfThree", "params": [{"name": "num", "type": "long"}], "return": {"type": "long[]"}}, "test_cases": [{"idx": 0, "inputs": {"num": 33}, "outputs": [10, 11, 12]}, {"idx": 1, "inputs": {"num": 4}, "outputs": []}], "title": "Find Three Consecutive Integers That Sum to a Given Number", "entry_fn_name": "sumOfThree"}
{"question_id": "2176", "schema": {"name": "countPairs", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 2, 2, 2, 1, 3], "k": 2}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4], "k": 1}, "outputs": 0}], "title": "Count Equal and Divisible Pairs in an Array", "entry_fn_name": "countPairs"}
{"question_id": "2157", "schema": {"name": "groupStrings", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["a", "b", "ab", "cde"]}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"words": ["a", "ab", "abc"]}, "outputs": [1, 3]}], "title": "Groups of Strings", "entry_fn_name": "groupStrings"}
{"question_id": "2156", "schema": {"name": "subStrHash", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "power"}, {"type": "integer", "name": "modulo"}, {"type": "integer", "name": "k"}, {"type": "integer", "name": "hashValue"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leetcode", "power": 7, "modulo": 20, "k": 2, "hashValue": 0}, "outputs": "ee"}, {"idx": 1, "inputs": {"s": "fbxzaad", "power": 31, "modulo": 100, "k": 3, "hashValue": 32}, "outputs": "fbx"}], "title": "Find Substring With Given Hash Value", "entry_fn_name": "subStrHash"}
{"question_id": "2154", "schema": {"name": "findFinalValue", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "original"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 3, 6, 1, 12], "original": 3}, "outputs": 24}, {"idx": 1, "inputs": {"nums": [2, 7, 9], "original": 4}, "outputs": 4}], "title": "Keep Multiplying Found Values by Two", "entry_fn_name": "findFinalValue"}
{"question_id": "2151", "schema": {"name": "maximumGood", "params": [{"name": "statements", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"statements": [[2, 1, 2], [1, 2, 2], [2, 0, 2]]}, "outputs": 2}, {"idx": 1, "inputs": {"statements": [[2, 0], [0, 2]]}, "outputs": 1}], "title": "Maximum Good People Based on Statements", "entry_fn_name": "maximumGood"}
{"question_id": "2149", "schema": {"name": "rearrangeArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, -2, -5, 2, -4]}, "outputs": [3, -2, 1, -5, 2, -4]}, {"idx": 1, "inputs": {"nums": [-1, 1]}, "outputs": [1, -1]}], "title": "Rearrange Array Elements by Sign", "entry_fn_name": "rearrangeArray"}
{"question_id": "2150", "schema": {"name": "findLonely", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 6, 5, 8]}, "outputs": [10, 8]}, {"idx": 1, "inputs": {"nums": [1, 3, 5, 3]}, "outputs": [1, 5]}], "title": "Find All Lonely Numbers in the Array", "entry_fn_name": "findLonely"}
{"question_id": "2148", "schema": {"name": "countElements", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [11, 7, 2, 15]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [-3, 3, 3, 90]}, "outputs": 2}], "title": "Count Elements With Strictly Smaller and Greater Elements ", "entry_fn_name": "countElements"}
{"question_id": "2163", "schema": {"name": "minimumDifference", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 2]}, "outputs": -1}, {"idx": 1, "inputs": {"nums": [7, 9, 5, 8, 1, 3]}, "outputs": 1}], "title": "Minimum Difference in Sums After Removal of Elements", "entry_fn_name": "minimumDifference"}
{"question_id": "2162", "schema": {"name": "minCostSetTime", "params": [{"name": "startAt", "type": "integer"}, {"type": "integer", "name": "moveCost"}, {"type": "integer", "name": "pushCost"}, {"type": "integer", "name": "targetSeconds"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"startAt": 1, "moveCost": 2, "pushCost": 1, "targetSeconds": 600}, "outputs": 6}, {"idx": 1, "inputs": {"startAt": 0, "moveCost": 1, "pushCost": 2, "targetSeconds": 76}, "outputs": 6}], "title": "Minimum Cost to Set Cooking Time", "entry_fn_name": "minCostSetTime"}
{"question_id": "2161", "schema": {"name": "pivotArray", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "pivot"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [9, 12, 5, 10, 14, 3, 10], "pivot": 10}, "outputs": [9, 5, 3, 10, 10, 12, 14]}, {"idx": 1, "inputs": {"nums": [-3, 4, 3, 2], "pivot": 2}, "outputs": [-3, 2, 4, 3]}], "title": "Partition Array According to Given Pivot", "entry_fn_name": "pivotArray"}
{"question_id": "2160", "schema": {"name": "minimumSum", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 2932}, "outputs": 52}, {"idx": 1, "inputs": {"num": 4009}, "outputs": 13}], "title": "Minimum Sum of Four Digit Number After Splitting Digits", "entry_fn_name": "minimumSum"}
{"question_id": "2141", "schema": {"name": "maxRunTime", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "batteries"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "batteries": [3, 3, 3]}, "outputs": 4}, {"idx": 1, "inputs": {"n": 2, "batteries": [1, 1, 1, 1]}, "outputs": 2}], "title": "Maximum Running Time of N Computers", "entry_fn_name": "maxRunTime"}
{"question_id": "2140", "schema": {"name": "mostPoints", "params": [{"name": "questions", "type": "integer[][]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"questions": [[3, 2], [4, 3], [4, 4], [2, 5]]}, "outputs": 5}, {"idx": 1, "inputs": {"questions": [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]}, "outputs": 7}], "title": "Solving Questions With Brainpower", "entry_fn_name": "mostPoints"}
{"question_id": "2155", "schema": {"name": "maxScoreIndices", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 0, 1, 0]}, "outputs": [2, 4]}, {"idx": 1, "inputs": {"nums": [0, 0, 0]}, "outputs": [3]}, {"idx": 2, "inputs": {"nums": [1, 1]}, "outputs": [0]}], "title": "All Divisions With the Highest Score of a Binary Array", "entry_fn_name": "maxScoreIndices"}
{"question_id": "2138", "schema": {"name": "divideString", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}, {"type": "character", "name": "fill"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcdefghi", "k": 3, "fill": "x"}, "outputs": ["abc", "def", "ghi"]}, {"idx": 1, "inputs": {"s": "abcdefghij", "k": 3, "fill": "x"}, "outputs": ["abc", "def", "ghi", "jxx"]}], "title": "Divide a String Into Groups of Size k", "entry_fn_name": "divideString"}
{"question_id": "2136", "schema": {"name": "earliestFullBloom", "params": [{"name": "plantTime", "type": "integer[]"}, {"type": "integer[]", "name": "growTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"plantTime": [1, 4, 3], "growTime": [2, 3, 1]}, "outputs": 9}, {"idx": 1, "inputs": {"plantTime": [1, 2, 3, 2], "growTime": [2, 1, 2, 1]}, "outputs": 9}, {"idx": 2, "inputs": {"plantTime": [1], "growTime": [1]}, "outputs": 2}], "title": "Earliest Possible Day of Full Bloom", "entry_fn_name": "earliestFullBloom"}
{"question_id": "2135", "schema": {"name": "wordCount", "params": [{"name": "startWords", "type": "string[]"}, {"type": "string[]", "name": "targetWords"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"startWords": ["ant", "act", "tack"], "targetWords": ["tack", "act", "acti"]}, "outputs": 2}, {"idx": 1, "inputs": {"startWords": ["ab", "a"], "targetWords": ["abc", "abcd"]}, "outputs": 1}], "title": "Count Words Obtained After Adding a Letter", "entry_fn_name": "wordCount"}
{"question_id": "2134", "schema": {"name": "minSwaps", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 0, 1, 1, 0, 0]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [0, 1, 1, 1, 0, 0, 1, 1, 0]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [1, 1, 0, 0, 1]}, "outputs": 0}], "title": "Minimum Swaps to Group All 1's Together II", "entry_fn_name": "minSwaps"}
{"question_id": "2133", "schema": {"name": "checkValid", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 2, 3], [3, 1, 2], [2, 3, 1]]}, "outputs": true}, {"idx": 1, "inputs": {"matrix": [[1, 1, 1], [1, 2, 3], [1, 2, 3]]}, "outputs": false}], "title": "Check if Every Row and Column Contains All Numbers", "entry_fn_name": "checkValid"}
{"question_id": "2147", "schema": {"name": "numberOfWays", "params": [{"name": "corridor", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"corridor": "SSPPSPS"}, "outputs": 3}, {"idx": 1, "inputs": {"corridor": "PPSPSP"}, "outputs": 1}, {"idx": 2, "inputs": {"corridor": "S"}, "outputs": 0}], "title": "Number of Ways to Divide a Long Corridor", "entry_fn_name": "numberOfWays"}
{"question_id": "2146", "schema": {"name": "highestRankedKItems", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer[]", "name": "pricing"}, {"type": "integer[]", "name": "start"}, {"type": "integer", "name": "k"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 2, 0, 1], [1, 3, 0, 1], [0, 2, 5, 1]], "pricing": [2, 5], "start": [0, 0], "k": 3}, "outputs": [[0, 1], [1, 1], [2, 1]]}, {"idx": 1, "inputs": {"grid": [[1, 2, 0, 1], [1, 3, 3, 1], [0, 2, 5, 1]], "pricing": [2, 3], "start": [2, 3], "k": 2}, "outputs": [[2, 1], [1, 2]]}, {"idx": 2, "inputs": {"grid": [[1, 1, 1], [0, 0, 1], [2, 3, 4]], "pricing": [2, 3], "start": [0, 0], "k": 3}, "outputs": [[2, 1], [2, 0]]}], "title": "K Highest Ranked Items Within a Price Range", "entry_fn_name": "highestRankedKItems"}
{"question_id": "2145", "schema": {"name": "numberOfArrays", "params": [{"name": "differences", "type": "integer[]"}, {"type": "integer", "name": "lower"}, {"type": "integer", "name": "upper"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"differences": [1, -3, 4], "lower": 1, "upper": 6}, "outputs": 2}, {"idx": 1, "inputs": {"differences": [3, -4, 5, 1, -2], "lower": -4, "upper": 5}, "outputs": 4}, {"idx": 2, "inputs": {"differences": [4, -7, 2], "lower": 3, "upper": 6}, "outputs": 0}], "title": "Count the Hidden Sequences", "entry_fn_name": "numberOfArrays"}
{"question_id": "2144", "schema": {"name": "minimumCost", "params": [{"name": "cost", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"cost": [1, 2, 3]}, "outputs": 5}, {"idx": 1, "inputs": {"cost": [6, 5, 7, 9, 2, 2]}, "outputs": 23}, {"idx": 2, "inputs": {"cost": [5, 5]}, "outputs": 10}], "title": "Minimum Cost of Buying Candies With Discount", "entry_fn_name": "minimumCost"}
{"question_id": "2127", "schema": {"name": "maximumInvitations", "params": [{"name": "favorite", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"favorite": [2, 2, 1, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"favorite": [1, 2, 0]}, "outputs": 3}, {"idx": 2, "inputs": {"favorite": [3, 0, 1, 4, 1]}, "outputs": 4}], "title": "Maximum Employees to Be Invited to a Meeting", "entry_fn_name": "maximumInvitations"}
{"question_id": "2126", "schema": {"name": "asteroidsDestroyed", "params": [{"name": "mass", "type": "integer"}, {"type": "integer[]", "name": "asteroids"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"mass": 10, "asteroids": [3, 9, 19, 5, 21]}, "outputs": true}, {"idx": 1, "inputs": {"mass": 5, "asteroids": [4, 9, 23, 4]}, "outputs": false}], "title": "Destroying Asteroids", "entry_fn_name": "asteroidsDestroyed"}
{"question_id": "2125", "schema": {"name": "numberOfBeams", "params": [{"name": "bank", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"bank": ["011001", "000000", "010100", "001000"]}, "outputs": 8}, {"idx": 1, "inputs": {"bank": ["000", "111", "000"]}, "outputs": 0}], "title": "Number of Laser Beams in a Bank", "entry_fn_name": "numberOfBeams"}
{"question_id": "2124", "schema": {"name": "checkString", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aaabbb"}, "outputs": true}, {"idx": 1, "inputs": {"s": "abab"}, "outputs": false}, {"idx": 2, "inputs": {"s": "bbb"}, "outputs": true}], "title": "Check if All A's Appears Before All B's", "entry_fn_name": "checkString"}
{"question_id": "2122", "schema": {"name": "recoverArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 10, 6, 4, 8, 12]}, "outputs": [3, 7, 11]}, {"idx": 1, "inputs": {"nums": [1, 1, 3, 3]}, "outputs": [2, 2]}, {"idx": 2, "inputs": {"nums": [5, 435]}, "outputs": [220]}], "title": "Recover the Original Array", "entry_fn_name": "recoverArray"}
{"question_id": "2121", "schema": {"name": "getDistances", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "long[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 1, 3, 1, 2, 3, 3]}, "outputs": [4, 2, 7, 2, 4, 4, 5]}, {"idx": 1, "inputs": {"arr": [10, 5, 10, 10]}, "outputs": [5, 0, 3, 4]}], "title": "Intervals Between Identical Elements", "entry_fn_name": "getDistances"}
{"question_id": "2120", "schema": {"name": "executeInstructions", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "startPos"}, {"type": "string", "name": "s"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "startPos": [0, 1], "s": "RRDDLU"}, "outputs": [1, 5, 4, 3, 1, 0]}, {"idx": 1, "inputs": {"n": 2, "startPos": [1, 1], "s": "LURD"}, "outputs": [4, 1, 0, 0]}, {"idx": 2, "inputs": {"n": 1, "startPos": [0, 0], "s": "LRUD"}, "outputs": [0, 0, 0, 0]}], "title": "Execution of All Suffix Instructions Staying in a Grid", "entry_fn_name": "executeInstructions"}
{"question_id": "2119", "schema": {"name": "isSameAfterReversals", "params": [{"name": "num", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"num": 526}, "outputs": true}, {"idx": 1, "inputs": {"num": 1800}, "outputs": false}, {"idx": 2, "inputs": {"num": 0}, "outputs": true}], "title": "A Number After a Double Reversal", "entry_fn_name": "isSameAfterReversals"}
{"question_id": "2131", "schema": {"name": "longestPalindrome", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["lc", "cl", "gg"]}, "outputs": 6}, {"idx": 1, "inputs": {"words": ["ab", "ty", "yt", "lc", "cl", "ab"]}, "outputs": 8}, {"idx": 2, "inputs": {"words": ["cc", "ll", "xx"]}, "outputs": 2}], "title": "Longest Palindrome by Concatenating Two Letter Words", "entry_fn_name": "longestPalindrome"}
{"question_id": "2130", "schema": {"name": "pairSum", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"head": [5, 4, 2, 1]}, "outputs": 6}, {"idx": 1, "inputs": {"head": [4, 2, 2, 3]}, "outputs": 7}, {"idx": 2, "inputs": {"head": [1, 100000]}, "outputs": 100001}], "title": "Maximum Twin Sum of a Linked List", "entry_fn_name": "pairSum"}
{"question_id": "2129", "schema": {"name": "capitalizeTitle", "params": [{"name": "title", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"title": "capiTalIze tHe titLe"}, "outputs": "Capitalize The Title"}, {"idx": 1, "inputs": {"title": "First leTTeR of EACH Word"}, "outputs": "First Letter of Each Word"}, {"idx": 2, "inputs": {"title": "i lOve leetcode"}, "outputs": "i Love Leetcode"}], "title": "Capitalize the Title", "entry_fn_name": "capitalizeTitle"}
{"question_id": "2111", "schema": {"name": "kIncreasing", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [5, 4, 3, 2, 1], "k": 1}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [4, 1, 5, 2, 6, 2], "k": 2}, "outputs": 0}, {"idx": 2, "inputs": {"arr": [4, 1, 5, 2, 6, 2], "k": 3}, "outputs": 2}], "title": "Minimum Operations to Make the Array K-Increasing", "entry_fn_name": "kIncreasing"}
{"question_id": "2110", "schema": {"name": "getDescentPeriods", "params": [{"name": "prices", "type": "integer[]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [3, 2, 1, 4]}, "outputs": 7}, {"idx": 1, "inputs": {"prices": [8, 6, 7, 7]}, "outputs": 4}, {"idx": 2, "inputs": {"prices": [1]}, "outputs": 1}], "title": "Number of Smooth Descent Periods of a Stock", "entry_fn_name": "getDescentPeriods"}
{"question_id": "2109", "schema": {"name": "addSpaces", "params": [{"name": "s", "type": "string"}, {"type": "integer[]", "name": "spaces"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "LeetcodeHelpsMeLearn", "spaces": [8, 13, 15]}, "outputs": "Leetcode Helps Me Learn"}, {"idx": 1, "inputs": {"s": "icodeinpython", "spaces": [1, 5, 7, 9]}, "outputs": "i code in py thon"}, {"idx": 2, "inputs": {"s": "spacing", "spaces": [0, 1, 2, 3, 4, 5, 6]}, "outputs": " s p a c i n g"}], "title": "Adding Spaces to a String", "entry_fn_name": "addSpaces"}
{"question_id": "2108", "schema": {"name": "firstPalindrome", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["abc", "car", "ada", "racecar", "cool"]}, "outputs": "ada"}, {"idx": 1, "inputs": {"words": ["notapalindrome", "racecar"]}, "outputs": "racecar"}, {"idx": 2, "inputs": {"words": ["def", "ghi"]}, "outputs": ""}], "title": "Find First Palindromic String in the Array", "entry_fn_name": "firstPalindrome"}
{"question_id": "2106", "schema": {"name": "maxTotalFruits", "params": [{"name": "fruits", "type": "integer[][]"}, {"type": "integer", "name": "startPos"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"fruits": [[2, 8], [6, 3], [8, 6]], "startPos": 5, "k": 4}, "outputs": 9}, {"idx": 1, "inputs": {"fruits": [[0, 9], [4, 1], [5, 7], [6, 2], [7, 4], [10, 9]], "startPos": 5, "k": 4}, "outputs": 14}, {"idx": 2, "inputs": {"fruits": [[0, 3], [6, 4], [8, 5]], "startPos": 3, "k": 2}, "outputs": 0}], "title": "Maximum Fruits Harvested After at Most K Steps", "entry_fn_name": "maxTotalFruits"}
{"question_id": "2105", "schema": {"name": "minimumRefill", "params": [{"name": "plants", "type": "integer[]"}, {"type": "integer", "name": "capacityA"}, {"type": "integer", "name": "capacityB"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"plants": [2, 2, 3, 3], "capacityA": 5, "capacityB": 5}, "outputs": 1}, {"idx": 1, "inputs": {"plants": [2, 2, 3, 3], "capacityA": 3, "capacityB": 4}, "outputs": 2}, {"idx": 2, "inputs": {"plants": [5], "capacityA": 10, "capacityB": 8}, "outputs": 0}], "title": "Watering Plants II", "entry_fn_name": "minimumRefill"}
{"question_id": "2104", "schema": {"name": "subArrayRanges", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [1, 3, 3]}, "outputs": 4}, {"idx": 2, "inputs": {"nums": [4, -2, -3, 4, 1]}, "outputs": 59}], "title": "Sum of Subarray Ranges", "entry_fn_name": "subArrayRanges"}
{"question_id": "2103", "schema": {"name": "countPoints", "params": [{"name": "rings", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rings": "B0B6G0R6R0R6G9"}, "outputs": 1}, {"idx": 1, "inputs": {"rings": "B0R0G0R9R0B0G0"}, "outputs": 1}, {"idx": 2, "inputs": {"rings": "G4"}, "outputs": 0}], "title": "Rings and Rods", "entry_fn_name": "countPoints"}
{"question_id": "2117", "schema": {"name": "abbreviateProduct", "params": [{"name": "left", "type": "integer"}, {"type": "integer", "name": "right"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"left": 1, "right": 4}, "outputs": "24e0"}, {"idx": 1, "inputs": {"left": 2, "right": 11}, "outputs": "399168e2"}, {"idx": 2, "inputs": {"left": 371, "right": 375}, "outputs": "7219856259e3"}], "title": "Abbreviating the Product of a Range", "entry_fn_name": "abbreviateProduct"}
{"question_id": "2116", "schema": {"name": "canBeValid", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "locked"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "))()))", "locked": "010100"}, "outputs": true}, {"idx": 1, "inputs": {"s": "()()", "locked": "0000"}, "outputs": true}, {"idx": 2, "inputs": {"s": ")", "locked": "0"}, "outputs": false}], "title": "Check if a Parentheses String Can Be Valid", "entry_fn_name": "canBeValid"}
{"question_id": "2115", "schema": {"name": "findAllRecipes", "params": [{"name": "recipes", "type": "string[]"}, {"type": "list<list<string>>", "name": "ingredients"}, {"type": "string[]", "name": "supplies"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"recipes": ["bread"], "ingredients": [["yeast", "flour"]], "supplies": ["yeast", "flour", "corn"]}, "outputs": ["bread"]}, {"idx": 1, "inputs": {"recipes": ["bread", "sandwich"], "ingredients": [["yeast", "flour"], ["bread", "meat"]], "supplies": ["yeast", "flour", "meat"]}, "outputs": ["bread", "sandwich"]}, {"idx": 2, "inputs": {"recipes": ["bread", "sandwich", "burger"], "ingredients": [["yeast", "flour"], ["bread", "meat"], ["sandwich", "meat", "bread"]], "supplies": ["yeast", "flour", "meat"]}, "outputs": ["bread", "sandwich", "burger"]}], "title": "Find All Possible Recipes from Given Supplies", "entry_fn_name": "findAllRecipes"}
{"question_id": "2096", "schema": {"name": "getDirections", "params": [{"name": "root", "type": "TreeNode"}, {"type": "integer", "name": "startValue"}, {"type": "integer", "name": "destValue"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 1, 2, 3, null, 6, 4], "startValue": 3, "destValue": 6}, "outputs": "UURL"}, {"idx": 1, "inputs": {"root": [2, 1], "startValue": 2, "destValue": 1}, "outputs": "L"}], "title": "Step-By-Step Directions From a Binary Tree Node to Another", "entry_fn_name": "getDirections"}
{"question_id": "2095", "schema": {"name": "deleteMiddle", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 3, 4, 7, 1, 2, 6]}, "outputs": [1, 3, 4, 1, 2, 6]}, {"idx": 1, "inputs": {"head": [1, 2, 3, 4]}, "outputs": [1, 2, 4]}, {"idx": 2, "inputs": {"head": [2, 1]}, "outputs": [2]}], "title": "Delete the Middle Node of a Linked List", "entry_fn_name": "deleteMiddle"}
{"question_id": "2094", "schema": {"name": "findEvenNumbers", "params": [{"name": "digits", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"digits": [2, 1, 3, 0]}, "outputs": [102, 120, 130, 132, 210, 230, 302, 310, 312, 320]}, {"idx": 1, "inputs": {"digits": [2, 2, 8, 8, 2]}, "outputs": [222, 228, 282, 288, 822, 828, 882]}, {"idx": 2, "inputs": {"digits": [3, 7, 5]}, "outputs": []}], "title": "Finding 3-Digit Even Numbers", "entry_fn_name": "findEvenNumbers"}
{"question_id": "2092", "schema": {"name": "findAllPeople", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "meetings"}, {"type": "integer", "name": "firstPerson"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "meetings": [[1, 2, 5], [2, 3, 8], [1, 5, 10]], "firstPerson": 1}, "outputs": [0, 1, 2, 3, 5]}, {"idx": 1, "inputs": {"n": 4, "meetings": [[3, 1, 3], [1, 2, 2], [0, 3, 3]], "firstPerson": 3}, "outputs": [0, 1, 3]}, {"idx": 2, "inputs": {"n": 5, "meetings": [[3, 4, 2], [1, 2, 1], [2, 3, 1]], "firstPerson": 1}, "outputs": [0, 1, 2, 3, 4]}], "title": "Find All People With Secret", "entry_fn_name": "findAllPeople"}
{"question_id": "2090", "schema": {"name": "getAverages", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [7, 4, 3, 9, 1, 8, 5, 2, 6], "k": 3}, "outputs": [-1, -1, -1, 5, 4, 4, -1, -1, -1]}, {"idx": 1, "inputs": {"nums": [100000], "k": 0}, "outputs": [100000]}, {"idx": 2, "inputs": {"nums": [8], "k": 100000}, "outputs": [-1]}], "title": "K Radius Subarray Averages", "entry_fn_name": "getAverages"}
{"question_id": "2089", "schema": {"name": "targetIndices", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 5, 2, 3], "target": 2}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"nums": [1, 2, 5, 2, 3], "target": 3}, "outputs": [3]}, {"idx": 2, "inputs": {"nums": [1, 2, 5, 2, 3], "target": 5}, "outputs": [4]}], "title": "Find Target Indices After Sorting Array", "entry_fn_name": "targetIndices"}
{"question_id": "2101", "schema": {"name": "maximumDetonation", "params": [{"name": "bombs", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"bombs": [[2, 1, 3], [6, 1, 4]]}, "outputs": 2}, {"idx": 1, "inputs": {"bombs": [[1, 1, 5], [10, 10, 5]]}, "outputs": 1}, {"idx": 2, "inputs": {"bombs": [[1, 2, 3], [2, 3, 1], [3, 4, 2], [4, 5, 3], [5, 6, 4]]}, "outputs": 5}], "title": "Detonate the Maximum Bombs", "entry_fn_name": "maximumDetonation"}
{"question_id": "2100", "schema": {"name": "goodDaysToRobBank", "params": [{"type": "integer[]", "name": "security"}, {"type": "integer", "name": "time"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"security": [5, 3, 3, 3, 5, 6, 2], "time": 2}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"security": [1, 1, 1, 1, 1], "time": 0}, "outputs": [0, 1, 2, 3, 4]}, {"idx": 2, "inputs": {"security": [1, 2, 3, 4, 5, 6], "time": 2}, "outputs": []}], "title": "Find Good Days to Rob the Bank", "entry_fn_name": "goodDaysToRobBank"}
{"question_id": "2099", "schema": {"name": "maxSubsequence", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 3, 3], "k": 2}, "outputs": [3, 3]}, {"idx": 1, "inputs": {"nums": [-1, -2, 3, 4], "k": 3}, "outputs": [-1, 3, 4]}, {"idx": 2, "inputs": {"nums": [3, 4, 3, 3], "k": 2}, "outputs": [3, 4]}], "title": "Find Subsequence of Length K With the Largest Sum", "entry_fn_name": "maxSubsequence"}
{"question_id": "2081", "schema": {"name": "kMirror", "params": [{"name": "k", "type": "integer"}, {"type": "integer", "name": "n"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"k": 2, "n": 5}, "outputs": 25}, {"idx": 1, "inputs": {"k": 3, "n": 7}, "outputs": 499}, {"idx": 2, "inputs": {"k": 7, "n": 17}, "outputs": 20379000}], "title": "Sum of k-Mirror Numbers", "entry_fn_name": "kMirror"}
{"question_id": "2097", "schema": {"name": "validArrangement", "params": [{"name": "pairs", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"pairs": [[5, 1], [4, 5], [11, 9], [9, 4]]}, "outputs": [[11, 9], [9, 4], [4, 5], [5, 1]]}, {"idx": 1, "inputs": {"pairs": [[1, 3], [3, 2], [2, 1]]}, "outputs": [[1, 3], [3, 2], [2, 1]]}, {"idx": 2, "inputs": {"pairs": [[1, 2], [1, 3], [2, 1]]}, "outputs": [[1, 2], [2, 1], [1, 3]]}], "title": "Valid Arrangement of Pairs", "entry_fn_name": "validArrangement"}
{"question_id": "2132", "schema": {"name": "possibleToStamp", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer", "name": "stampHeight"}, {"type": "integer", "name": "stampWidth"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]], "stampHeight": 4, "stampWidth": 3}, "outputs": true}, {"idx": 1, "inputs": {"grid": [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], "stampHeight": 2, "stampWidth": 2}, "outputs": false}], "title": "Stamping the Grid", "entry_fn_name": "possibleToStamp"}
{"question_id": "2076", "schema": {"name": "friendRequests", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "restrictions"}, {"type": "integer[][]", "name": "requests"}], "return": {"type": "boolean[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "restrictions": [[0, 1]], "requests": [[0, 2], [2, 1]]}, "outputs": [true, false]}, {"idx": 1, "inputs": {"n": 3, "restrictions": [[0, 1]], "requests": [[1, 2], [0, 2]]}, "outputs": [true, false]}, {"idx": 2, "inputs": {"n": 5, "restrictions": [[0, 1], [1, 2], [2, 3]], "requests": [[0, 4], [1, 2], [3, 1], [3, 4]]}, "outputs": [true, false, true, false]}], "title": "Process Restricted Friend Requests", "entry_fn_name": "friendRequests"}
{"question_id": "2075", "schema": {"name": "decodeCiphertext", "params": [{"name": "encodedText", "type": "string"}, {"type": "integer", "name": "rows"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"encodedText": "ch   ie   pr", "rows": 3}, "outputs": "cipher"}, {"idx": 1, "inputs": {"encodedText": "iveo    eed   l te   olc", "rows": 4}, "outputs": "i love leetcode"}, {"idx": 2, "inputs": {"encodedText": "coding", "rows": 1}, "outputs": "coding"}], "title": "Decode the Slanted Ciphertext", "entry_fn_name": "decodeCiphertext"}
{"question_id": "2074", "schema": {"name": "reverseEvenLengthGroups", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [5, 2, 6, 3, 9, 1, 7, 3, 8, 4]}, "outputs": [5, 6, 2, 3, 9, 1, 4, 8, 3, 7]}, {"idx": 1, "inputs": {"head": [1, 1, 0, 6]}, "outputs": [1, 0, 1, 6]}, {"idx": 2, "inputs": {"head": [1, 1, 0, 6, 5]}, "outputs": [1, 0, 1, 5, 6]}], "title": "Reverse Nodes in Even Length Groups", "entry_fn_name": "reverseEvenLengthGroups"}
{"question_id": "2073", "schema": {"name": "timeRequiredToBuy", "params": [{"name": "tickets", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tickets": [2, 3, 2], "k": 2}, "outputs": 6}, {"idx": 1, "inputs": {"tickets": [5, 1, 1, 1], "k": 0}, "outputs": 8}], "title": "Time Needed to Buy Tickets", "entry_fn_name": "timeRequiredToBuy"}
{"question_id": "2088", "schema": {"name": "countPyramids", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1, 1, 0], [1, 1, 1, 1]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[1, 1, 1], [1, 1, 1]]}, "outputs": 2}, {"idx": 2, "inputs": {"grid": [[1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 0, 0, 1]]}, "outputs": 13}], "title": "Count Fertile Pyramids in a Land", "entry_fn_name": "countPyramids"}
{"question_id": "2087", "schema": {"name": "minCost", "params": [{"name": "startPos", "type": "integer[]"}, {"type": "integer[]", "name": "homePos"}, {"type": "integer[]", "name": "rowCosts"}, {"type": "integer[]", "name": "colCosts"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"startPos": [1, 0], "homePos": [2, 3], "rowCosts": [5, 4, 3], "colCosts": [8, 2, 6, 7]}, "outputs": 18}, {"idx": 1, "inputs": {"startPos": [0, 0], "homePos": [0, 0], "rowCosts": [5], "colCosts": [26]}, "outputs": 0}], "title": "Minimum Cost Homecoming of a Robot in a Grid", "entry_fn_name": "minCost"}
{"question_id": "2086", "schema": {"name": "minimumBuckets", "params": [{"name": "street", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"street": "H..H"}, "outputs": 2}, {"idx": 1, "inputs": {"street": ".H.H."}, "outputs": 1}, {"idx": 2, "inputs": {"street": ".HHH."}, "outputs": -1}], "title": "Minimum Number of Buckets Required to Collect Rainwater from Houses", "entry_fn_name": "minimumBuckets"}
{"question_id": "2085", "schema": {"name": "countWords", "params": [{"name": "words1", "type": "string[]"}, {"type": "string[]", "name": "words2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words1": ["leetcode", "is", "amazing", "as", "is"], "words2": ["amazing", "leetcode", "is"]}, "outputs": 2}, {"idx": 1, "inputs": {"words1": ["b", "bb", "bbb"], "words2": ["a", "aa", "aaa"]}, "outputs": 0}, {"idx": 2, "inputs": {"words1": ["a", "ab"], "words2": ["a", "a", "a", "ab"]}, "outputs": 1}], "title": "Count Common Words With One Occurrence", "entry_fn_name": "countWords"}
{"question_id": "2065", "schema": {"name": "maximalPathQuality", "params": [{"name": "values", "type": "integer[]"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer", "name": "maxTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"values": [0, 32, 10, 43], "edges": [[0, 1, 10], [1, 2, 15], [0, 3, 10]], "maxTime": 49}, "outputs": 75}, {"idx": 1, "inputs": {"values": [5, 10, 15, 20], "edges": [[0, 1, 10], [1, 2, 10], [0, 3, 10]], "maxTime": 30}, "outputs": 25}, {"idx": 2, "inputs": {"values": [1, 2, 3, 4], "edges": [[0, 1, 10], [1, 2, 11], [2, 3, 12], [1, 3, 13]], "maxTime": 50}, "outputs": 7}], "title": "Maximum Path Quality of a Graph", "entry_fn_name": "maximalPathQuality"}
{"question_id": "2064", "schema": {"name": "minimizedMaximum", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "quantities"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "quantities": [11, 6]}, "outputs": 3}, {"idx": 1, "inputs": {"n": 7, "quantities": [15, 10, 10]}, "outputs": 5}, {"idx": 2, "inputs": {"n": 1, "quantities": [100000]}, "outputs": 100000}], "title": "Minimized Maximum of Products Distributed to Any Store", "entry_fn_name": "minimizedMaximum"}
{"question_id": "2063", "schema": {"name": "countVowels", "params": [{"name": "word", "type": "string"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"word": "aba"}, "outputs": 6}, {"idx": 1, "inputs": {"word": "abc"}, "outputs": 3}, {"idx": 2, "inputs": {"word": "ltcd"}, "outputs": 0}], "title": "Vowels of All Substrings", "entry_fn_name": "countVowels"}
{"question_id": "2062", "schema": {"name": "countVowelSubstrings", "params": [{"name": "word", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word": "aeiouu"}, "outputs": 2}, {"idx": 1, "inputs": {"word": "unicornarihan"}, "outputs": 0}, {"idx": 2, "inputs": {"word": "cuaieuouac"}, "outputs": 7}], "title": "Count Vowel Substrings of a String", "entry_fn_name": "countVowelSubstrings"}
{"question_id": "2060", "schema": {"name": "possiblyEquals", "params": [{"name": "s1", "type": "string"}, {"type": "string", "name": "s2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "internationalization", "s2": "i18n"}, "outputs": true}, {"idx": 1, "inputs": {"s1": "l123e", "s2": "44"}, "outputs": true}, {"idx": 2, "inputs": {"s1": "a5b", "s2": "c5b"}, "outputs": false}], "title": "Check if an Original String Exists Given Two Encoded Strings", "entry_fn_name": "possiblyEquals"}
{"question_id": "2059", "schema": {"name": "minimumOperations", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "start"}, {"type": "integer", "name": "goal"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 4, 12], "start": 2, "goal": 12}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [3, 5, 7], "start": 0, "goal": -4}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [2, 8, 16], "start": 0, "goal": 1}, "outputs": -1}], "title": "Minimum Operations to Convert Number", "entry_fn_name": "minimumOperations"}
{"question_id": "2058", "schema": {"name": "nodesBetweenCriticalPoints", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"head": [3, 1]}, "outputs": [-1, -1]}, {"idx": 1, "inputs": {"head": [5, 3, 1, 2, 5, 1, 2]}, "outputs": [1, 3]}, {"idx": 2, "inputs": {"head": [1, 3, 2, 2, 3, 2, 2, 2, 7]}, "outputs": [3, 3]}], "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points", "entry_fn_name": "nodesBetweenCriticalPoints"}
{"question_id": "2057", "schema": {"name": "smallestEqual", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 2]}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [4, 3, 2, 1]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]}, "outputs": -1}], "title": "Smallest Index With Equal Value", "entry_fn_name": "smallestEqual"}
{"question_id": "2070", "schema": {"name": "maximumBeauty", "params": [{"name": "items", "type": "integer[][]"}, {"type": "integer[]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"items": [[1, 2], [3, 2], [2, 4], [5, 6], [3, 5]], "queries": [1, 2, 3, 4, 5, 6]}, "outputs": [2, 4, 5, 5, 6, 6]}, {"idx": 1, "inputs": {"items": [[1, 2], [1, 2], [1, 3], [1, 4]], "queries": [1]}, "outputs": [4]}, {"idx": 2, "inputs": {"items": [[10, 1000]], "queries": [5]}, "outputs": [0]}], "title": "Most Beautiful Item for Each Query", "entry_fn_name": "maximumBeauty"}
{"question_id": "2068", "schema": {"name": "checkAlmostEquivalent", "params": [{"name": "word1", "type": "string"}, {"type": "string", "name": "word2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "aaaa", "word2": "bccb"}, "outputs": false}, {"idx": 1, "inputs": {"word1": "abcdeef", "word2": "abaaacc"}, "outputs": true}, {"idx": 2, "inputs": {"word1": "cccddabba", "word2": "babababab"}, "outputs": true}], "title": "Check Whether Two Strings are Almost Equivalent", "entry_fn_name": "checkAlmostEquivalent"}
{"question_id": "2050", "schema": {"name": "minimumTime", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "relations"}, {"type": "integer[]", "name": "time"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "relations": [[1, 3], [2, 3]], "time": [3, 2, 5]}, "outputs": 8}, {"idx": 1, "inputs": {"n": 5, "relations": [[1, 5], [2, 5], [3, 5], [3, 4], [4, 5]], "time": [1, 2, 3, 4, 5]}, "outputs": 12}], "title": "Parallel Courses III", "entry_fn_name": "minimumTime"}
{"question_id": "2049", "schema": {"name": "countHighestScoreNodes", "params": [{"name": "parents", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"parents": [-1, 2, 0, 2, 0]}, "outputs": 3}, {"idx": 1, "inputs": {"parents": [-1, 2, 0]}, "outputs": 2}], "title": "Count Nodes With the Highest Score", "entry_fn_name": "countHighestScoreNodes"}
{"question_id": "2048", "schema": {"name": "nextBeautifulNumber", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 22}, {"idx": 1, "inputs": {"n": 1000}, "outputs": 1333}, {"idx": 2, "inputs": {"n": 3000}, "outputs": 3133}], "title": "Next Greater Numerically Balanced Number", "entry_fn_name": "nextBeautifulNumber"}
{"question_id": "2047", "schema": {"name": "countValidWords", "params": [{"name": "sentence", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"sentence": ""}, "outputs": 3}, {"idx": 1, "inputs": {"sentence": "!this  1-s b8d!"}, "outputs": 0}, {"idx": 2, "inputs": {"sentence": "stone-game10"}, "outputs": 5}], "title": "Number of Valid Words in a Sentence", "entry_fn_name": "countValidWords"}
{"question_id": "2045", "schema": {"name": "secondMinimum", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer", "name": "time"}, {"type": "integer", "name": "change"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "edges": [[1, 2], [1, 3], [1, 4], [3, 4], [4, 5]], "time": 3, "change": 5}, "outputs": 13}, {"idx": 1, "inputs": {"n": 2, "edges": [[1, 2]], "time": 3, "change": 2}, "outputs": 11}], "title": "Second Minimum Time to Reach Destination", "entry_fn_name": "secondMinimum"}
{"question_id": "2044", "schema": {"name": "countMaxOrSubsets", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 2, 2]}, "outputs": 7}, {"idx": 2, "inputs": {"nums": [3, 2, 1, 5]}, "outputs": 6}], "title": "Count Number of Maximum Bitwise-OR Subsets", "entry_fn_name": "countMaxOrSubsets"}
{"question_id": "2042", "schema": {"name": "areNumbersAscending", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1 box has 3 blue 4 red 6 green and 12 yellow marbles"}, "outputs": true}, {"idx": 1, "inputs": {"s": "hello world 5 x 5"}, "outputs": false}, {"idx": 2, "inputs": {"s": "sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s"}, "outputs": false}], "title": "Check if Numbers Are Ascending in a Sentence", "entry_fn_name": "areNumbersAscending"}
{"question_id": "2056", "schema": {"name": "countCombinations", "params": [{"name": "pieces", "type": "string[]"}, {"type": "integer[][]", "name": "positions"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"pieces": ["rook"], "positions": [[1, 1]]}, "outputs": 15}, {"idx": 1, "inputs": {"pieces": ["queen"], "positions": [[1, 1]]}, "outputs": 22}, {"idx": 2, "inputs": {"pieces": ["bishop"], "positions": [[4, 3]]}, "outputs": 12}], "title": "Number of Valid Move Combinations On Chessboard", "entry_fn_name": "countCombinations"}
{"question_id": "2055", "schema": {"name": "platesBetweenCandles", "params": [{"name": "s", "type": "string"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"s": "**|**|***|", "queries": [[2, 5], [5, 9]]}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"s": "***|**|*****|**||**|*", "queries": [[1, 17], [4, 5], [14, 17], [5, 11], [15, 16]]}, "outputs": [9, 0, 0, 0, 0]}], "title": "Plates Between Candles", "entry_fn_name": "platesBetweenCandles"}
{"question_id": "2054", "schema": {"name": "maxTwoEvents", "params": [{"name": "events", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"events": [[1, 3, 2], [4, 5, 2], [2, 4, 3]]}, "outputs": 4}, {"idx": 1, "inputs": {"events": [[1, 3, 2], [4, 5, 2], [1, 5, 5]]}, "outputs": 5}, {"idx": 2, "inputs": {"events": [[1, 5, 3], [1, 5, 1], [6, 6, 5]]}, "outputs": 8}], "title": "Two Best Non-Overlapping Events", "entry_fn_name": "maxTwoEvents"}
{"question_id": "2053", "schema": {"name": "kthDistinct", "params": [{"name": "arr", "type": "string[]"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"arr": ["d", "b", "c", "b", "c", "a"], "k": 2}, "outputs": "a"}, {"idx": 1, "inputs": {"arr": ["aaa", "aa", "a"], "k": 1}, "outputs": "aaa"}, {"idx": 2, "inputs": {"arr": ["a", "b", "a"], "k": 3}, "outputs": ""}], "title": "Kth Distinct String in an Array", "entry_fn_name": "kthDistinct"}
{"question_id": "2035", "schema": {"name": "minimumDifference", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 9, 7, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [-36, 36]}, "outputs": 72}, {"idx": 2, "inputs": {"nums": [2, -1, 0, 4, -2, -9]}, "outputs": 0}], "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "entry_fn_name": "minimumDifference"}
{"question_id": "2033", "schema": {"name": "minOperations", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer", "name": "x"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[2, 4], [6, 8]], "x": 2}, "outputs": 4}, {"idx": 1, "inputs": {"grid": [[1, 5], [2, 3]], "x": 1}, "outputs": 5}, {"idx": 2, "inputs": {"grid": [[1, 2], [3, 4]], "x": 2}, "outputs": -1}], "title": "Minimum Operations to Make a Uni-Value Grid", "entry_fn_name": "minOperations"}
{"question_id": "2032", "schema": {"name": "twoOutOfThree", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}, {"type": "integer[]", "name": "nums3"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 1, 3, 2], "nums2": [2, 3], "nums3": [3]}, "outputs": [3, 2]}, {"idx": 1, "inputs": {"nums1": [3, 1], "nums2": [2, 3], "nums3": [1, 2]}, "outputs": [2, 3, 1]}, {"idx": 2, "inputs": {"nums1": [1, 2, 2], "nums2": [4, 3, 3], "nums3": [5]}, "outputs": []}], "title": "Two Out of Three", "entry_fn_name": "twoOutOfThree"}
{"question_id": "2030", "schema": {"name": "smallestSubsequence", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}, {"type": "character", "name": "letter"}, {"type": "integer", "name": "repetition"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leet", "k": 3, "letter": "e", "repetition": 1}, "outputs": "eet"}, {"idx": 1, "inputs": {"s": "leetcode", "k": 4, "letter": "e", "repetition": 2}, "outputs": "ecde"}, {"idx": 2, "inputs": {"s": "bb", "k": 2, "letter": "b", "repetition": 2}, "outputs": "bb"}], "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "entry_fn_name": "smallestSubsequence"}
{"question_id": "2029", "schema": {"name": "stoneGameIX", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [2, 1]}, "outputs": true}, {"idx": 1, "inputs": {"stones": [2]}, "outputs": false}, {"idx": 2, "inputs": {"stones": [5, 1, 2, 4, 3]}, "outputs": false}], "title": "Stone Game IX", "entry_fn_name": "stoneGameIX"}
{"question_id": "2028", "schema": {"name": "missingRolls", "params": [{"name": "rolls", "type": "integer[]"}, {"type": "integer", "name": "mean"}, {"type": "integer", "name": "n"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"rolls": [3, 2, 4, 3], "mean": 4, "n": 2}, "outputs": [6, 6]}, {"idx": 1, "inputs": {"rolls": [1, 5, 6], "mean": 3, "n": 4}, "outputs": [2, 3, 2, 2]}, {"idx": 2, "inputs": {"rolls": [1, 2, 3, 4], "mean": 6, "n": 4}, "outputs": []}], "title": "Find Missing Observations", "entry_fn_name": "missingRolls"}
{"question_id": "2027", "schema": {"name": "minimumMoves", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "XXX"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "XXOX"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "OOOO"}, "outputs": 0}], "title": "Minimum Moves to Convert String", "entry_fn_name": "minimumMoves"}
{"question_id": "2039", "schema": {"name": "networkBecomesIdle", "params": [{"name": "edges", "type": "integer[][]"}, {"type": "integer[]", "name": "patience"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"edges": [[0, 1], [1, 2]], "patience": [0, 2, 1]}, "outputs": 8}, {"idx": 1, "inputs": {"edges": [[0, 1], [0, 2], [1, 2]], "patience": [0, 10, 10]}, "outputs": 3}], "title": "The Time When the Network Becomes Idle", "entry_fn_name": "networkBecomesIdle"}
{"question_id": "2040", "schema": {"name": "kthSmallestProduct", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}, {"type": "long", "name": "k"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [2, 5], "nums2": [3, 4], "k": 2}, "outputs": 8}, {"idx": 1, "inputs": {"nums1": [-4, -2, 0, 3], "nums2": [2, 4], "k": 6}, "outputs": 0}, {"idx": 2, "inputs": {"nums1": [-2, -1, 0, 1, 2], "nums2": [-3, -1, 2, 4, 5], "k": 3}, "outputs": -6}], "title": "Kth Smallest Product of Two Sorted Arrays", "entry_fn_name": "kthSmallestProduct"}
{"question_id": "2038", "schema": {"name": "winnerOfGame", "params": [{"name": "colors", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"colors": "AAABABB"}, "outputs": true}, {"idx": 1, "inputs": {"colors": "AA"}, "outputs": false}, {"idx": 2, "inputs": {"colors": "ABBBBBBBAAA"}, "outputs": false}], "title": "Remove Colored Pieces if Both Neighbors are the Same Color", "entry_fn_name": "winnerOfGame"}
{"question_id": "2037", "schema": {"name": "minMovesToSeat", "params": [{"name": "seats", "type": "integer[]"}, {"type": "integer[]", "name": "students"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"seats": [3, 1, 5], "students": [2, 7, 4]}, "outputs": 4}, {"idx": 1, "inputs": {"seats": [4, 1, 5, 9], "students": [1, 3, 2, 6]}, "outputs": 7}, {"idx": 2, "inputs": {"seats": [2, 2, 6, 6], "students": [1, 3, 2, 6]}, "outputs": 4}], "title": "Minimum Number of Moves to Seat Everyone", "entry_fn_name": "minMovesToSeat"}
{"question_id": "2019", "schema": {"name": "scoreOfStudents", "params": [{"name": "s", "type": "string"}, {"type": "integer[]", "name": "answers"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "7+3*1*2", "answers": [20, 13, 42]}, "outputs": 7}, {"idx": 1, "inputs": {"s": "3+5*2", "answers": [13, 0, 10, 13, 13, 16, 16]}, "outputs": 19}, {"idx": 2, "inputs": {"s": "6+0*1", "answers": [12, 9, 6, 4, 8, 6]}, "outputs": 10}], "title": "The Score of Students Solving Math Expression", "entry_fn_name": "scoreOfStudents"}
{"question_id": "2018", "schema": {"name": "placeWordInCrossword", "params": [{"name": "board", "type": "character[][]"}, {"type": "string", "name": "word"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"board": [["#", " ", "#"], [" ", " ", "#"], ["#", "c", " "]], "word": "abc"}, "outputs": true}, {"idx": 1, "inputs": {"board": [[" ", "#", "a"], [" ", "#", "c"], [" ", "#", "a"]], "word": "ac"}, "outputs": false}, {"idx": 2, "inputs": {"board": [["#", " ", "#"], [" ", " ", "#"], ["#", " ", "c"]], "word": "ca"}, "outputs": true}], "title": "Check if Word Can Be Placed In Crossword", "entry_fn_name": "placeWordInCrossword"}
{"question_id": "2017", "schema": {"name": "gridGame", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[2, 5, 4], [1, 5, 1]]}, "outputs": 4}, {"idx": 1, "inputs": {"grid": [[3, 3, 1], [8, 5, 2]]}, "outputs": 4}, {"idx": 2, "inputs": {"grid": [[1, 3, 1, 15], [1, 3, 3, 1]]}, "outputs": 7}], "title": "Grid Game", "entry_fn_name": "gridGame"}
{"question_id": "2016", "schema": {"name": "maximumDifference", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [7, 1, 5, 4]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [9, 4, 3, 2]}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [1, 5, 2, 10]}, "outputs": 9}], "title": "Maximum Difference Between Increasing Elements", "entry_fn_name": "maximumDifference"}
{"question_id": "2014", "schema": {"name": "longestSubsequenceRepeatedK", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "letsleetcode", "k": 2}, "outputs": "let"}, {"idx": 1, "inputs": {"s": "bb", "k": 2}, "outputs": "b"}, {"idx": 2, "inputs": {"s": "ab", "k": 2}, "outputs": ""}], "title": "Longest Subsequence Repeated k Times", "entry_fn_name": "longestSubsequenceRepeatedK"}
{"question_id": "2012", "schema": {"name": "sumOfBeauties", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 4, 6, 4]}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [3, 2, 1]}, "outputs": 0}], "title": "Sum of Beauty in the Array", "entry_fn_name": "sumOfBeauties"}
{"question_id": "2011", "schema": {"name": "finalValueAfterOperations", "params": [{"name": "operations", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"operations": ["--X", "X++", "X++"]}, "outputs": 1}, {"idx": 1, "inputs": {"operations": ["++X", "++X", "X++"]}, "outputs": 3}, {"idx": 2, "inputs": {"operations": ["X++", "++X", "--X", "X--"]}, "outputs": 0}], "title": "Final Value of Variable After Performing Operations", "entry_fn_name": "finalValueAfterOperations"}
{"question_id": "2025", "schema": {"name": "waysToPartition", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, -1, 2], "k": 3}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [0, 0, 0], "k": 1}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [22, 4, -25, -20, -15, 15, -16, 7, 19, -10, 0, -13, -14], "k": -33}, "outputs": 4}], "title": "Maximum Number of Ways to Partition an Array", "entry_fn_name": "waysToPartition"}
{"question_id": "2024", "schema": {"name": "maxConsecutiveAnswers", "params": [{"name": "answerKey", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"answerKey": "TTFF", "k": 2}, "outputs": 4}, {"idx": 1, "inputs": {"answerKey": "TFFT", "k": 1}, "outputs": 3}, {"idx": 2, "inputs": {"answerKey": "TTFTTFTT", "k": 1}, "outputs": 5}], "title": "Maximize the Confusion of an Exam", "entry_fn_name": "maxConsecutiveAnswers"}
{"question_id": "2023", "schema": {"name": "numOfPairs", "params": [{"name": "nums", "type": "string[]"}, {"type": "string", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": ["777", "7", "77", "77"], "target": "7777"}, "outputs": 4}, {"idx": 1, "inputs": {"nums": ["123", "4", "12", "34"], "target": "1234"}, "outputs": 2}, {"idx": 2, "inputs": {"nums": ["1", "1", "1"], "target": "11"}, "outputs": 6}], "title": "Number of Pairs of Strings With Concatenation Equal to Target", "entry_fn_name": "numOfPairs"}
{"question_id": "2022", "schema": {"name": "construct2DArray", "params": [{"name": "original", "type": "integer[]"}, {"type": "integer", "name": "m"}, {"type": "integer", "name": "n"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"original": [1, 2, 3, 4], "m": 2, "n": 2}, "outputs": [[1, 2], [3, 4]]}, {"idx": 1, "inputs": {"original": [1, 2, 3], "m": 1, "n": 3}, "outputs": [[1, 2, 3]]}, {"idx": 2, "inputs": {"original": [1, 2], "m": 1, "n": 1}, "outputs": []}], "title": "Convert 1D Array Into 2D Array", "entry_fn_name": "construct2DArray"}
{"question_id": "2003", "schema": {"name": "smallestMissingValueSubtree", "params": [{"name": "parents", "type": "integer[]"}, {"type": "integer[]", "name": "nums"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"parents": [-1, 0, 0, 2], "nums": [1, 2, 3, 4]}, "outputs": [5, 1, 1, 1]}, {"idx": 1, "inputs": {"parents": [-1, 0, 1, 0, 3, 3], "nums": [5, 4, 6, 2, 1, 3]}, "outputs": [7, 1, 1, 4, 2, 1]}, {"idx": 2, "inputs": {"parents": [-1, 2, 3, 0, 2, 4, 1], "nums": [2, 3, 4, 5, 6, 7, 8]}, "outputs": [1, 1, 1, 1, 1, 1, 1]}], "title": "Smallest Missing Genetic Value in Each Subtree", "entry_fn_name": "smallestMissingValueSubtree"}
{"question_id": "2002", "schema": {"name": "maxProduct", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"s": "leetcodecom"}, "outputs": 9}, {"idx": 1, "inputs": {"s": "bb"}, "outputs": 1}, {"idx": 2, "inputs": {"s": "accbcaxxcxx"}, "outputs": 25}], "title": "Maximum Product of the Length of Two Palindromic Subsequences", "entry_fn_name": "maxProduct"}
{"question_id": "2001", "schema": {"name": "interchangeableRectangles", "params": [{"name": "rectangles", "type": "integer[][]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"rectangles": [[4, 8], [3, 6], [10, 20], [15, 30]]}, "outputs": 6}, {"idx": 1, "inputs": {"rectangles": [[4, 5], [7, 8]]}, "outputs": 0}], "title": "Number of Pairs of Interchangeable Rectangles", "entry_fn_name": "interchangeableRectangles"}
{"question_id": "2000", "schema": {"name": "reversePrefix", "params": [{"name": "word", "type": "string"}, {"type": "character", "name": "ch"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"word": "efd", "ch": "d"}, "outputs": "efd"}, {"idx": 1, "inputs": {"word": "xe", "ch": "z"}, "outputs": "xe"}, {"idx": 2, "inputs": {"word": "abcd", "ch": "z"}, "outputs": "abcd"}], "title": "Reverse Prefix of Word", "entry_fn_name": "reversePrefix"}
{"question_id": "1997", "schema": {"name": "firstDayBeenInAllRooms", "params": [{"name": "nextVisit", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nextVisit": [0, 0]}, "outputs": 2}, {"idx": 1, "inputs": {"nextVisit": [0, 0, 2]}, "outputs": 6}, {"idx": 2, "inputs": {"nextVisit": [0, 1, 2, 0]}, "outputs": 6}], "title": "First Day Where You Have Been in All the Rooms", "entry_fn_name": "firstDayBeenInAllRooms"}
{"question_id": "1996", "schema": {"name": "numberOfWeakCharacters", "params": [{"name": "properties", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"properties": [[5, 5], [6, 3], [3, 6]]}, "outputs": 0}, {"idx": 1, "inputs": {"properties": [[2, 2], [3, 3]]}, "outputs": 1}, {"idx": 2, "inputs": {"properties": [[1, 5], [10, 4], [4, 3]]}, "outputs": 1}], "title": "The Number of Weak Characters in the Game", "entry_fn_name": "numberOfWeakCharacters"}
{"question_id": "1995", "schema": {"name": "countQuadruplets", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 6]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [3, 3, 6, 4, 5]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1, 1, 1, 3, 5]}, "outputs": 4}], "title": "Count Special Quadruplets", "entry_fn_name": "countQuadruplets"}
{"question_id": "1971", "schema": {"name": "validPath", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer", "name": "source"}, {"type": "integer", "name": "destination"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "edges": [[0, 1], [1, 2], [2, 0]], "source": 0, "destination": 2}, "outputs": true}, {"idx": 1, "inputs": {"n": 6, "edges": [[0, 1], [0, 2], [3, 5], [5, 4], [4, 3]], "source": 0, "destination": 5}, "outputs": false}], "title": "Find if Path Exists in Graph", "entry_fn_name": "validPath"}
{"question_id": "2009", "schema": {"name": "minOperations", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 2, 5, 3]}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 5, 6]}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [1, 10, 100, 1000]}, "outputs": 3}], "title": "Minimum Number of Operations to Make Array Continuous", "entry_fn_name": "minOperations"}
{"question_id": "2007", "schema": {"name": "findOriginalArray", "params": [{"name": "changed", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"changed": [1, 3, 4, 2, 6, 8]}, "outputs": [1, 3, 4]}, {"idx": 1, "inputs": {"changed": [6, 3, 0, 1]}, "outputs": []}, {"idx": 2, "inputs": {"changed": [1]}, "outputs": []}], "title": "Find Original Array From Doubled Array", "entry_fn_name": "findOriginalArray"}
{"question_id": "1987", "schema": {"name": "numberOfUniqueGoodSubsequences", "params": [{"name": "binary", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"binary": "001"}, "outputs": 2}, {"idx": 1, "inputs": {"binary": "11"}, "outputs": 2}, {"idx": 2, "inputs": {"binary": "101"}, "outputs": 5}], "title": "Number of Unique Good Subsequences", "entry_fn_name": "numberOfUniqueGoodSubsequences"}
{"question_id": "1986", "schema": {"name": "minSessions", "params": [{"name": "tasks", "type": "integer[]"}, {"type": "integer", "name": "sessionTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tasks": [1, 2, 3], "sessionTime": 3}, "outputs": 2}, {"idx": 1, "inputs": {"tasks": [3, 1, 3, 1, 1], "sessionTime": 8}, "outputs": 2}, {"idx": 2, "inputs": {"tasks": [1, 2, 3, 4, 5], "sessionTime": 15}, "outputs": 1}], "title": "Minimum Number of Work Sessions to Finish the Tasks", "entry_fn_name": "minSessions"}
{"question_id": "1985", "schema": {"name": "kthLargestNumber", "params": [{"name": "nums", "type": "string[]"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"nums": ["3", "6", "7", "10"], "k": 4}, "outputs": "3"}, {"idx": 1, "inputs": {"nums": ["2", "21", "12", "1"], "k": 3}, "outputs": "2"}, {"idx": 2, "inputs": {"nums": ["0", "0"], "k": 2}, "outputs": "0"}], "title": "Find the Kth Largest Integer in the Array", "entry_fn_name": "kthLargestNumber"}
{"question_id": "1984", "schema": {"name": "minimumDifference", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [90], "k": 1}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [9, 4, 1, 7], "k": 2}, "outputs": 2}], "title": "Minimum Difference Between Highest and Lowest of K Scores", "entry_fn_name": "minimumDifference"}
{"question_id": "1982", "schema": {"name": "recoverArray", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "sums"}], "return": {"type": "integer[]"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "sums": [-3, -2, -1, 0, 0, 1, 2, 3]}, "outputs": [1, 2, -3]}, {"idx": 1, "inputs": {"n": 2, "sums": [0, 0, 0, 0]}, "outputs": [0, 0]}, {"idx": 2, "inputs": {"n": 4, "sums": [0, 0, 5, 5, 4, -1, 4, 9, 9, -1, 4, 3, 4, 8, 3, 8]}, "outputs": [0, -1, 4, 5]}], "title": "Find Array Given Subset Sums", "entry_fn_name": "recoverArray"}
{"question_id": "1981", "schema": {"name": "minimizeTheDifference", "params": [{"name": "mat", "type": "integer[][]"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], "target": 13}, "outputs": 0}, {"idx": 1, "inputs": {"mat": [[1], [2], [3]], "target": 100}, "outputs": 94}, {"idx": 2, "inputs": {"mat": [[1, 2, 9, 8, 7]], "target": 6}, "outputs": 1}], "title": "Minimize the Difference Between Target and Chosen Elements", "entry_fn_name": "minimizeTheDifference"}
{"question_id": "1980", "schema": {"name": "findDifferentBinaryString", "params": [{"type": "string[]", "name": "nums"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"nums": ["01", "10"]}, "outputs": "11"}, {"idx": 1, "inputs": {"nums": ["00", "01"]}, "outputs": "11"}, {"idx": 2, "inputs": {"nums": ["111", "011", "001"]}, "outputs": "101"}], "title": "Find Unique Binary String", "entry_fn_name": "findDifferentBinaryString"}
{"question_id": "1979", "schema": {"name": "findGCD", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 5, 6, 9, 10]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [7, 5, 6, 8, 3]}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [3, 3]}, "outputs": 3}], "title": "Find Greatest Common Divisor of Array", "entry_fn_name": "findGCD"}
{"question_id": "1994", "schema": {"name": "numberOfGoodSubsets", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [4, 2, 3, 15]}, "outputs": 5}], "title": "The Number of Good Subsets", "entry_fn_name": "numberOfGoodSubsets"}
{"question_id": "1992", "schema": {"name": "findFarmland", "params": [{"name": "land", "type": "integer[][]"}], "return": {"type": "integer[][]"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"land": [[1, 0, 0], [0, 1, 1], [0, 1, 1]]}, "outputs": [[0, 0, 0, 0], [1, 1, 2, 2]]}, {"idx": 1, "inputs": {"land": [[1, 1], [1, 1]]}, "outputs": [[0, 0, 1, 1]]}, {"idx": 2, "inputs": {"land": [[0]]}, "outputs": []}], "title": "Find All Groups of Farmland", "entry_fn_name": "findFarmland"}
{"question_id": "1970", "schema": {"name": "latestDayToCross", "params": [{"name": "row", "type": "integer"}, {"type": "integer", "name": "col"}, {"type": "integer[][]", "name": "cells"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"row": 2, "col": 2, "cells": [[1, 1], [2, 1], [1, 2], [2, 2]]}, "outputs": 2}, {"idx": 1, "inputs": {"row": 2, "col": 2, "cells": [[1, 1], [1, 2], [2, 1], [2, 2]]}, "outputs": 1}, {"idx": 2, "inputs": {"row": 3, "col": 3, "cells": [[1, 2], [2, 1], [3, 3], [2, 2], [1, 1], [1, 3], [2, 3], [3, 2], [3, 1]]}, "outputs": 3}], "title": "Last Day Where You Can Still Cross", "entry_fn_name": "latestDayToCross"}
{"question_id": "1969", "schema": {"name": "minNonZeroProduct", "params": [{"name": "p", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"p": 1}, "outputs": 1}, {"idx": 1, "inputs": {"p": 2}, "outputs": 6}, {"idx": 2, "inputs": {"p": 3}, "outputs": 1512}], "title": "Minimum Non-Zero Product of the Array Elements", "entry_fn_name": "minNonZeroProduct"}
{"question_id": "1967", "schema": {"name": "numOfStrings", "params": [{"name": "patterns", "type": "string[]"}, {"type": "string", "name": "word"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"patterns": ["a", "abc", "bc", "d"], "word": "abc"}, "outputs": 3}, {"idx": 1, "inputs": {"patterns": ["a", "b", "c"], "word": "aaaaabbbbb"}, "outputs": 2}, {"idx": 2, "inputs": {"patterns": ["a", "a", "a"], "word": "ab"}, "outputs": 3}], "title": "Number of Strings That Appear as Substrings in Word", "entry_fn_name": "numOfStrings"}
{"question_id": "1964", "schema": {"name": "longestObstacleCourseAtEachPosition", "params": [{"name": "obstacles", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"obstacles": [1, 2, 3, 2]}, "outputs": [1, 2, 3, 3]}, {"idx": 1, "inputs": {"obstacles": [2, 2, 1]}, "outputs": [1, 2, 1]}, {"idx": 2, "inputs": {"obstacles": [3, 1, 5, 6, 4, 2]}, "outputs": [1, 1, 2, 3, 2, 2]}], "title": "Find the Longest Valid Obstacle Course at Each Position", "entry_fn_name": "longestObstacleCourseAtEachPosition"}
{"question_id": "1963", "schema": {"name": "minSwaps", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "][]["}, "outputs": 1}, {"idx": 1, "inputs": {"s": "]]][[["}, "outputs": 2}, {"idx": 2, "inputs": {"s": "[]"}, "outputs": 0}], "title": "Minimum Number of Swaps to Make the String Balanced", "entry_fn_name": "minSwaps"}
{"question_id": "1962", "schema": {"name": "minStoneSum", "params": [{"name": "piles", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"piles": [5, 4, 9], "k": 2}, "outputs": 12}, {"idx": 1, "inputs": {"piles": [4, 3, 6, 7], "k": 3}, "outputs": 12}], "title": "Remove Stones to Minimize the Total", "entry_fn_name": "minStoneSum"}
{"question_id": "1961", "schema": {"name": "isPrefixString", "params": [{"name": "s", "type": "string"}, {"type": "string[]", "name": "words"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "iloveleetcode", "words": ["i", "love", "leetcode", "apples"]}, "outputs": true}, {"idx": 1, "inputs": {"s": "iloveleetcode", "words": ["apples", "i", "love", "leetcode"]}, "outputs": false}], "title": "Check If String Is a Prefix of Array", "entry_fn_name": "isPrefixString"}
{"question_id": "1977", "schema": {"name": "numberOfCombinations", "params": [{"name": "num", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": "327"}, "outputs": 2}, {"idx": 1, "inputs": {"num": "094"}, "outputs": 0}, {"idx": 2, "inputs": {"num": "0"}, "outputs": 0}], "title": "Number of Ways to Separate Numbers", "entry_fn_name": "numberOfCombinations"}
{"question_id": "1976", "schema": {"name": "countPaths", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "roads"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7, "roads": [[0, 6, 7], [0, 1, 2], [1, 2, 3], [1, 3, 3], [6, 3, 3], [3, 5, 1], [6, 5, 1], [2, 5, 1], [0, 4, 5], [4, 6, 2]]}, "outputs": 4}, {"idx": 1, "inputs": {"n": 2, "roads": [[1, 0, 10]]}, "outputs": 1}], "title": "Number of Ways to Arrive at Destination", "entry_fn_name": "countPaths"}
{"question_id": "1974", "schema": {"name": "minTimeToType", "params": [{"name": "word", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word": "abc"}, "outputs": 5}, {"idx": 1, "inputs": {"word": "bza"}, "outputs": 7}, {"idx": 2, "inputs": {"word": "zjpc"}, "outputs": 34}], "title": "Minimum Time to Type Word Using Special Typewriter", "entry_fn_name": "minTimeToType"}
{"question_id": "1955", "schema": {"name": "countSpecialSubsequences", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 2, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [2, 2, 0, 0]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [0, 1, 2, 0, 1, 2]}, "outputs": 7}], "title": "Count Number of Special Subsequences", "entry_fn_name": "countSpecialSubsequences"}
{"question_id": "1968", "schema": {"name": "rearrangeArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5]}, "outputs": [1, 2, 4, 5, 3]}, {"idx": 1, "inputs": {"nums": [6, 2, 0, 9, 7]}, "outputs": [9, 7, 6, 2, 0]}], "title": "Array With Elements Not Equal to Average of Neighbors", "entry_fn_name": "rearrangeArray"}
{"question_id": "1953", "schema": {"name": "numberOfWeeks", "params": [{"name": "milestones", "type": "integer[]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"milestones": [1, 2, 3]}, "outputs": 6}, {"idx": 1, "inputs": {"milestones": [5, 2, 1]}, "outputs": 7}], "title": "Maximum Number of Weeks for Which You Can Work", "entry_fn_name": "numberOfWeeks"}
{"question_id": "1952", "schema": {"name": "isThree", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": false}, {"idx": 1, "inputs": {"n": 4}, "outputs": true}], "title": "Three Divisors", "entry_fn_name": "isThree"}
{"question_id": "1959", "schema": {"name": "minSpaceWastedKResizing", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 20], "k": 0}, "outputs": 10}, {"idx": 1, "inputs": {"nums": [10, 20, 30], "k": 1}, "outputs": 10}, {"idx": 2, "inputs": {"nums": [10, 20, 15, 30, 20], "k": 2}, "outputs": 15}], "title": "Minimum Total Space Wasted With K Resizing Operations", "entry_fn_name": "minSpaceWastedKResizing"}
{"question_id": "1958", "schema": {"name": "checkMove", "params": [{"name": "board", "type": "character[][]"}, {"type": "integer", "name": "rMove"}, {"type": "integer", "name": "cMove"}, {"type": "character", "name": "color"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"board": [[".", ".", ".", "B", ".", ".", ".", "."], [".", ".", ".", "W", ".", ".", ".", "."], [".", ".", ".", "W", ".", ".", ".", "."], [".", ".", ".", "W", ".", ".", ".", "."], ["W", "B", "B", ".", "W", "W", "W", "B"], [".", ".", ".", "B", ".", ".", ".", "."], [".", ".", ".", "B", ".", ".", ".", "."], [".", ".", ".", "W", ".", ".", ".", "."]], "rMove": 4, "cMove": 3, "color": "B"}, "outputs": true}, {"idx": 1, "inputs": {"board": [[".", ".", ".", ".", ".", ".", ".", "."], [".", "B", ".", ".", "W", ".", ".", "."], [".", ".", "W", ".", ".", ".", ".", "."], [".", ".", ".", "W", "B", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "B", "W", ".", "."], [".", ".", ".", ".", ".", ".", "W", "."], [".", ".", ".", ".", ".", ".", ".", "B"]], "rMove": 4, "cMove": 4, "color": "W"}, "outputs": false}], "title": "Check if Move is Legal", "entry_fn_name": "checkMove"}
{"question_id": "1948", "schema": {"name": "deleteDuplicateFolder", "params": [{"name": "paths", "type": "list<list<string>>"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"paths": [["a"], ["c"], ["d"], ["a", "b"], ["c", "b"], ["d", "a"]]}, "outputs": [["d"], ["d", "a"]]}, {"idx": 1, "inputs": {"paths": [["a"], ["c"], ["a", "b"], ["c", "b"], ["a", "b", "x"], ["a", "b", "x", "y"], ["w"], ["w", "y"]]}, "outputs": [["c"], ["c", "b"], ["a"], ["a", "b"]]}, {"idx": 2, "inputs": {"paths": [["a", "b"], ["c", "d"], ["c"], ["a"]]}, "outputs": [["c"], ["c", "d"], ["a"], ["a", "b"]]}], "title": "Delete Duplicate Folders in System", "entry_fn_name": "deleteDuplicateFolder"}
{"question_id": "1947", "schema": {"name": "maxCompatibilitySum", "params": [{"name": "students", "type": "integer[][]"}, {"type": "integer[][]", "name": "mentors"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"students": [[1, 1, 0], [1, 0, 1], [0, 0, 1]], "mentors": [[1, 0, 0], [0, 0, 1], [1, 1, 0]]}, "outputs": 8}, {"idx": 1, "inputs": {"students": [[0, 0], [0, 0], [0, 0]], "mentors": [[1, 1], [1, 1], [1, 1]]}, "outputs": 0}], "title": "Maximum Compatibility Score Sum", "entry_fn_name": "maxCompatibilitySum"}
{"question_id": "1946", "schema": {"name": "maximumNumber", "params": [{"name": "num", "type": "string"}, {"type": "integer[]", "name": "change"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": "32", "change": [9, 8, 5, 0, 3, 6, 4, 2, 6, 8]}, "outputs": "32"}, {"idx": 1, "inputs": {"num": "", "change": [9, 4, 3, 5, 7, 2, 1, 9, 0, 6]}, "outputs": ""}, {"idx": 2, "inputs": {"num": "5", "change": [1, 4, 7, 5, 3, 2, 5, 6, 9, 4]}, "outputs": "5"}], "title": "Largest Number After Mutating Substring", "entry_fn_name": "maximumNumber"}
{"question_id": "1945", "schema": {"name": "getLucky", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "iiii", "k": 1}, "outputs": 36}, {"idx": 1, "inputs": {"s": "leetcode", "k": 2}, "outputs": 6}, {"idx": 2, "inputs": {"s": "zbax", "k": 2}, "outputs": 8}], "title": "Sum of Digits of String After Convert", "entry_fn_name": "getLucky"}
{"question_id": "1938", "schema": {"name": "maxGeneticDifference", "params": [{"name": "parents", "type": "integer[]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"parents": [-1, 0, 1, 1], "queries": [[0, 2], [3, 2], [2, 5]]}, "outputs": [2, 3, 7]}, {"idx": 1, "inputs": {"parents": [3, 7, -1, 2, 0, 7, 0, 2], "queries": [[4, 6], [1, 15], [0, 5]]}, "outputs": [6, 14, 7]}], "title": "Maximum Genetic Difference Query", "entry_fn_name": "maxGeneticDifference"}
{"question_id": "1937", "schema": {"name": "maxPoints", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 2, 3], [1, 5, 1], [3, 1, 1]]}, "outputs": 9}, {"idx": 1, "inputs": {"points": [[1, 5], [2, 3], [4, 2]]}, "outputs": 11}], "title": "Maximum Number of Points with Cost", "entry_fn_name": "maxPoints"}
{"question_id": "1936", "schema": {"name": "addRungs", "params": [{"name": "rungs", "type": "integer[]"}, {"type": "integer", "name": "dist"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rungs": [1, 3, 5, 10], "dist": 2}, "outputs": 2}, {"idx": 1, "inputs": {"rungs": [3, 6, 8, 10], "dist": 3}, "outputs": 0}, {"idx": 2, "inputs": {"rungs": [3, 4, 6, 7], "dist": 2}, "outputs": 1}], "title": "Add Minimum Number of Rungs", "entry_fn_name": "addRungs"}
{"question_id": "1931", "schema": {"name": "colorTheGrid", "params": [{"name": "m", "type": "integer"}, {"type": "integer", "name": "n"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 1, "n": 1}, "outputs": 3}, {"idx": 1, "inputs": {"m": 1, "n": 2}, "outputs": 6}, {"idx": 2, "inputs": {"m": 5, "n": 5}, "outputs": 580986}], "title": "Painting a Grid With Three Different Colors", "entry_fn_name": "colorTheGrid"}
{"question_id": "1932", "schema": {"name": "canMerge", "params": [{"name": "trees", "type": "list<TreeNode>"}], "return": {"type": "TreeNode"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"trees": [[2, 1], [3, 2, 5], [5, 4]]}, "outputs": [3, 2, 5, 1, null, 4]}, {"idx": 1, "inputs": {"trees": [[5, 3, 8], [3, 2, 6]]}, "outputs": []}, {"idx": 2, "inputs": {"trees": [[5, 4], [3]]}, "outputs": []}], "title": "Merge BSTs to Create Single BST", "entry_fn_name": "canMerge"}
{"question_id": "1930", "schema": {"name": "countPalindromicSubsequence", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aabca"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "adc"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "bbcbaba"}, "outputs": 4}], "title": "Unique Length-3 Palindromic Subsequences", "entry_fn_name": "countPalindromicSubsequence"}
{"question_id": "1929", "schema": {"name": "getConcatenation", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 1]}, "outputs": [1, 2, 1, 1, 2, 1]}, {"idx": 1, "inputs": {"nums": [1, 3, 2, 1]}, "outputs": [1, 3, 2, 1, 1, 3, 2, 1]}], "title": "Concatenation of Array", "entry_fn_name": "getConcatenation"}
{"question_id": "1943", "schema": {"name": "splitPainting", "params": [{"name": "segments", "type": "integer[][]"}], "return": {"type": "list<list<long>>"}}, "test_cases": [{"idx": 0, "inputs": {"segments": [[1, 4, 5], [4, 7, 7], [1, 7, 9]]}, "outputs": [[1, 4, 14], [4, 7, 16]]}, {"idx": 1, "inputs": {"segments": [[1, 7, 9], [6, 8, 15], [8, 10, 7]]}, "outputs": [[1, 6, 9], [6, 7, 24], [7, 8, 15], [8, 10, 7]]}, {"idx": 2, "inputs": {"segments": [[1, 4, 5], [1, 4, 7], [4, 7, 1], [4, 7, 11]]}, "outputs": [[1, 4, 12], [4, 7, 12]]}], "title": "Describe the Painting", "entry_fn_name": "splitPainting"}
{"question_id": "1942", "schema": {"name": "smallestChair", "params": [{"type": "integer[][]", "name": "times"}, {"type": "integer", "name": "targetFriend"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"times": [[1, 4], [2, 3], [4, 6]], "targetFriend": 1}, "outputs": 1}, {"idx": 1, "inputs": {"times": [[3, 10], [1, 5], [2, 6]], "targetFriend": 0}, "outputs": 2}], "title": "The Number of the Smallest Unoccupied Chair", "entry_fn_name": "smallestChair"}
{"question_id": "1941", "schema": {"name": "areOccurrencesEqual", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abacbc"}, "outputs": true}, {"idx": 1, "inputs": {"s": "aaabb"}, "outputs": false}], "title": "Check if All Characters Have Equal Number of Occurrences", "entry_fn_name": "areOccurrencesEqual"}
{"question_id": "1922", "schema": {"name": "countGoodNumbers", "params": [{"name": "n", "type": "long"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 5}, {"idx": 1, "inputs": {"n": 4}, "outputs": 400}, {"idx": 2, "inputs": {"n": 50}, "outputs": 564908303}], "title": "Count Good Numbers", "entry_fn_name": "countGoodNumbers"}
{"question_id": "1921", "schema": {"name": "eliminateMaximum", "params": [{"name": "dist", "type": "integer[]"}, {"type": "integer[]", "name": "speed"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"dist": [1, 3, 4], "speed": [1, 1, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"dist": [1, 1, 2, 3], "speed": [1, 1, 1, 1]}, "outputs": 1}, {"idx": 2, "inputs": {"dist": [3, 2, 4], "speed": [5, 3, 2]}, "outputs": 1}], "title": "Eliminate Maximum Number of Monsters", "entry_fn_name": "eliminateMaximum"}
{"question_id": "1920", "schema": {"name": "buildArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 2, 1, 5, 3, 4]}, "outputs": [0, 1, 2, 4, 5, 3]}, {"idx": 1, "inputs": {"nums": [5, 0, 1, 2, 3, 4]}, "outputs": [4, 5, 0, 1, 2, 3]}], "title": "Build Array from Permutation", "entry_fn_name": "buildArray"}
{"question_id": "1901", "schema": {"name": "findPeakGrid", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer[]"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 4], [3, 2]]}, "outputs": [0, 1]}, {"idx": 1, "inputs": {"mat": [[10, 20, 15], [21, 30, 14], [7, 16, 32]]}, "outputs": [1, 1]}], "title": "Find a Peak Element II", "entry_fn_name": "findPeakGrid"}
{"question_id": "1915", "schema": {"name": "wonderfulSubstrings", "params": [{"name": "word", "type": "string"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"word": "aba"}, "outputs": 4}, {"idx": 1, "inputs": {"word": "aabb"}, "outputs": 9}, {"idx": 2, "inputs": {"word": "he"}, "outputs": 2}], "title": "Number of Wonderful Substrings", "entry_fn_name": "wonderfulSubstrings"}
{"question_id": "1914", "schema": {"name": "rotateGrid", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[40, 10], [30, 20]], "k": 1}, "outputs": [[10, 20], [40, 30]]}, {"idx": 1, "inputs": {"grid": [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], "k": 2}, "outputs": [[3, 4, 8, 12], [2, 11, 10, 16], [1, 7, 6, 15], [5, 9, 13, 14]]}], "title": "Cyclically Rotating a Grid", "entry_fn_name": "rotateGrid"}
{"question_id": "1913", "schema": {"name": "maxProductDifference", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 6, 2, 7, 4]}, "outputs": 34}, {"idx": 1, "inputs": {"nums": [4, 2, 5, 9, 7, 4, 8]}, "outputs": 64}], "title": "Maximum Product Difference Between Two Pairs", "entry_fn_name": "maxProductDifference"}
{"question_id": "1928", "schema": {"name": "minCost", "params": [{"name": "maxTime", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer[]", "name": "passingFees"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"maxTime": 30, "edges": [[0, 1, 10], [1, 2, 10], [2, 5, 10], [0, 3, 1], [3, 4, 10], [4, 5, 15]], "passingFees": [5, 1, 2, 20, 20, 3]}, "outputs": 11}, {"idx": 1, "inputs": {"maxTime": 29, "edges": [[0, 1, 10], [1, 2, 10], [2, 5, 10], [0, 3, 1], [3, 4, 10], [4, 5, 15]], "passingFees": [5, 1, 2, 20, 20, 3]}, "outputs": 48}, {"idx": 2, "inputs": {"maxTime": 25, "edges": [[0, 1, 10], [1, 2, 10], [2, 5, 10], [0, 3, 1], [3, 4, 10], [4, 5, 15]], "passingFees": [5, 1, 2, 20, 20, 3]}, "outputs": -1}], "title": "Minimum Cost to Reach Destination in Time", "entry_fn_name": "minCost"}
{"question_id": "1927", "schema": {"name": "sumGame", "params": [{"name": "num", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"num": "5023"}, "outputs": false}, {"idx": 1, "inputs": {"num": "25??"}, "outputs": true}, {"idx": 2, "inputs": {"num": "?3295???"}, "outputs": false}], "title": "Sum Game", "entry_fn_name": "sumGame"}
{"question_id": "1926", "schema": {"name": "nearestExit", "params": [{"name": "maze", "type": "character[][]"}, {"type": "integer[]", "name": "entrance"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"maze": [["+", "+", ".", "+"], [".", ".", ".", "+"], ["+", "+", "+", "."]], "entrance": [1, 2]}, "outputs": 1}, {"idx": 1, "inputs": {"maze": [["+", "+", "+"], [".", ".", "."], ["+", "+", "+"]], "entrance": [1, 0]}, "outputs": 2}, {"idx": 2, "inputs": {"maze": [[".", "+"]], "entrance": [0, 0]}, "outputs": -1}], "title": "Nearest Exit from Entrance in Maze", "entry_fn_name": "nearestExit"}
{"question_id": "1925", "schema": {"name": "countTriples", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": 2}, {"idx": 1, "inputs": {"n": 10}, "outputs": 4}], "title": "Count Square Sum Triples", "entry_fn_name": "countTriples"}
{"question_id": "1905", "schema": {"name": "countSubIslands", "params": [{"name": "grid1", "type": "integer[][]"}, {"type": "integer[][]", "name": "grid2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid1": [[1, 1, 1, 0, 0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 1, 1]], "grid2": [[1, 1, 1, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 0, 0], [1, 0, 1, 1, 0], [0, 1, 0, 1, 0]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid1": [[1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1]], "grid2": [[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1]]}, "outputs": 2}], "title": "Count Sub Islands", "entry_fn_name": "countSubIslands"}
{"question_id": "1906", "schema": {"name": "minDifference", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 4, 8], "queries": [[0, 1], [1, 2], [2, 3], [0, 3]]}, "outputs": [2, 1, 4, 1]}, {"idx": 1, "inputs": {"nums": [4, 5, 2, 2, 7, 10], "queries": [[2, 3], [0, 2], [0, 5], [3, 5]]}, "outputs": [-1, 1, 1, 3]}], "title": "Minimum Absolute Difference Queries", "entry_fn_name": "minDifference"}
{"question_id": "1904", "schema": {"name": "numberOfRounds", "params": [{"name": "loginTime", "type": "string"}, {"type": "string", "name": "logoutTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"loginTime": "09:31", "logoutTime": "10:14"}, "outputs": 1}, {"idx": 1, "inputs": {"loginTime": "21:30", "logoutTime": "03:00"}, "outputs": 22}], "title": "The Number of Full Rounds You Have Played", "entry_fn_name": "numberOfRounds"}
{"question_id": "1903", "schema": {"name": "largestOddNumber", "params": [{"name": "num", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": "52"}, "outputs": "5"}, {"idx": 1, "inputs": {"num": "4206"}, "outputs": ""}, {"idx": 2, "inputs": {"num": "35427"}, "outputs": "35427"}], "title": "Largest Odd Number in String", "entry_fn_name": "largestOddNumber"}
{"question_id": "1884", "schema": {"name": "twoEggDrop", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 2}, {"idx": 1, "inputs": {"n": 100}, "outputs": 14}], "title": "Egg Drop With 2 Eggs and N Floors", "entry_fn_name": "twoEggDrop"}
{"question_id": "1900", "schema": {"name": "earliestAndLatest", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "firstPlayer"}, {"type": "integer", "name": "secondPlayer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 11, "firstPlayer": 2, "secondPlayer": 4}, "outputs": [3, 4]}, {"idx": 1, "inputs": {"n": 5, "firstPlayer": 1, "secondPlayer": 5}, "outputs": [1, 1]}], "title": "The Earliest and Latest Rounds Where Players Compete", "entry_fn_name": "earliestAndLatest"}
{"question_id": "1898", "schema": {"name": "maximumRemovals", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "p"}, {"type": "integer[]", "name": "removable"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcacb", "p": "ab", "removable": [3, 1, 0]}, "outputs": 2}, {"idx": 1, "inputs": {"s": "abcbddddd", "p": "abcd", "removable": [3, 2, 1, 4, 5, 6]}, "outputs": 1}, {"idx": 2, "inputs": {"s": "abcab", "p": "abc", "removable": [0, 1, 2, 3, 4]}, "outputs": 0}], "title": "Maximum Number of Removable Characters", "entry_fn_name": "maximumRemovals"}
{"question_id": "1899", "schema": {"name": "mergeTriplets", "params": [{"name": "triplets", "type": "integer[][]"}, {"type": "integer[]", "name": "target"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"triplets": [[2, 5, 3], [1, 8, 4], [1, 7, 5]], "target": [2, 7, 5]}, "outputs": true}, {"idx": 1, "inputs": {"triplets": [[3, 4, 5], [4, 5, 6]], "target": [3, 2, 5]}, "outputs": false}, {"idx": 2, "inputs": {"triplets": [[2, 5, 3], [2, 3, 4], [1, 2, 5], [5, 2, 3]], "target": [5, 5, 5]}, "outputs": true}], "title": "Merge Triplets to Form Target Triplet", "entry_fn_name": "mergeTriplets"}
{"question_id": "1897", "schema": {"name": "makeEqual", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "boolean"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"words": ["abc", "aabc", "bc"]}, "outputs": true}, {"idx": 1, "inputs": {"words": ["ab", "a"]}, "outputs": false}], "title": "Redistribute Characters to Make All Strings Equal", "entry_fn_name": "makeEqual"}
{"question_id": "1910", "schema": {"name": "removeOccurrences", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "part"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "daabcbaabcbc", "part": "abc"}, "outputs": "dab"}, {"idx": 1, "inputs": {"s": "axxxxyyyyb", "part": "xy"}, "outputs": "ab"}], "title": "Remove All Occurrences of a Substring", "entry_fn_name": "removeOccurrences"}
{"question_id": "1889", "schema": {"name": "minWastedSpace", "params": [{"name": "packages", "type": "integer[]"}, {"type": "integer[][]", "name": "boxes"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"packages": [2, 3, 5], "boxes": [[4, 8], [2, 8]]}, "outputs": 6}, {"idx": 1, "inputs": {"packages": [2, 3, 5], "boxes": [[1, 4], [2, 3], [3, 4]]}, "outputs": -1}, {"idx": 2, "inputs": {"packages": [3, 5, 8, 10, 11, 12], "boxes": [[12], [11, 9], [10, 5, 14]]}, "outputs": 9}], "title": "Minimum Space Wasted From Packaging", "entry_fn_name": "minWastedSpace"}
{"question_id": "1888", "schema": {"name": "minFlips", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "111000"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "010"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "1110"}, "outputs": 1}], "title": "Minimum Number of Flips to Make the Binary String Alternating", "entry_fn_name": "minFlips"}
{"question_id": "1887", "schema": {"name": "reductionOperations", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 1, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 1, 1]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1, 1, 2, 2, 3]}, "outputs": 4}], "title": "Reduction Operations to Make the Array Elements Equal", "entry_fn_name": "reductionOperations"}
{"question_id": "1886", "schema": {"name": "findRotation", "params": [{"name": "mat", "type": "integer[][]"}, {"type": "integer[][]", "name": "target"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[0, 1], [1, 0]], "target": [[1, 0], [0, 1]]}, "outputs": true}, {"idx": 1, "inputs": {"mat": [[0, 1], [1, 1]], "target": [[1, 0], [0, 1]]}, "outputs": false}, {"idx": 2, "inputs": {"mat": [[0, 0, 0], [0, 1, 0], [1, 1, 1]], "target": [[1, 1, 1], [0, 1, 0], [0, 0, 0]]}, "outputs": true}], "title": "Determine Whether Matrix Can Be Obtained By Rotation", "entry_fn_name": "findRotation"}
{"question_id": "1883", "schema": {"name": "minSkips", "params": [{"name": "dist", "type": "integer[]"}, {"type": "integer", "name": "speed"}, {"type": "integer", "name": "hoursBefore"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"dist": [1, 3, 2], "speed": 4, "hoursBefore": 2}, "outputs": 1}, {"idx": 1, "inputs": {"dist": [7, 3, 5, 5], "speed": 2, "hoursBefore": 10}, "outputs": 2}, {"idx": 2, "inputs": {"dist": [7, 3, 5, 5], "speed": 1, "hoursBefore": 10}, "outputs": -1}], "title": "Minimum Skips to Arrive at Meeting On Time", "entry_fn_name": "minSkips"}
{"question_id": "1882", "schema": {"name": "assignTasks", "params": [{"name": "servers", "type": "integer[]"}, {"type": "integer[]", "name": "tasks"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"servers": [3, 3, 2], "tasks": [1, 2, 3, 2, 1, 2]}, "outputs": [2, 2, 0, 2, 1, 2]}, {"idx": 1, "inputs": {"servers": [5, 1, 4, 3, 2], "tasks": [2, 1, 2, 4, 5, 2, 1]}, "outputs": [1, 4, 1, 4, 1, 3, 2]}], "title": "Process Tasks Using Servers", "entry_fn_name": "assignTasks"}
{"question_id": "1881", "schema": {"name": "maxValue", "params": [{"name": "n", "type": "string"}, {"type": "integer", "name": "x"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": "99", "x": 9}, "outputs": "999"}, {"idx": 1, "inputs": {"n": "-13", "x": 2}, "outputs": "-123"}], "title": "Maximum Value after Insertion", "entry_fn_name": "maxValue"}
{"question_id": "1880", "schema": {"name": "isSumEqual", "params": [{"name": "firstWord", "type": "string"}, {"type": "string", "name": "secondWord"}, {"type": "string", "name": "targetWord"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"firstWord": "acb", "secondWord": "cba", "targetWord": "cdb"}, "outputs": true}, {"idx": 1, "inputs": {"firstWord": "aaa", "secondWord": "a", "targetWord": "aab"}, "outputs": false}, {"idx": 2, "inputs": {"firstWord": "aaa", "secondWord": "a", "targetWord": "aaaa"}, "outputs": true}], "title": "Check if Word Equals Summation of Two Words", "entry_fn_name": "isSumEqual"}
{"question_id": "1896", "schema": {"name": "minOperationsToFlip", "params": [{"name": "expression", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "1&(0|1)"}, "outputs": 1}, {"idx": 1, "inputs": {"expression": "(0&0)&(0&0&0)"}, "outputs": 3}, {"idx": 2, "inputs": {"expression": "(0|(1|0&1))"}, "outputs": 1}], "title": "Minimum Cost to Change the Final Value of Expression", "entry_fn_name": "minOperationsToFlip"}
{"question_id": "1894", "schema": {"name": "chalkReplacer", "params": [{"name": "chalk", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"chalk": [5, 1, 5], "k": 22}, "outputs": 0}, {"idx": 1, "inputs": {"chalk": [3, 4, 1, 2], "k": 25}, "outputs": 1}], "title": "Find the Student that Will Replace the Chalk", "entry_fn_name": "chalkReplacer"}
{"question_id": "1893", "schema": {"name": "isCovered", "params": [{"name": "ranges", "type": "integer[][]"}, {"type": "integer", "name": "left"}, {"type": "integer", "name": "right"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"ranges": [[1, 2], [3, 4], [5, 6]], "left": 2, "right": 5}, "outputs": true}, {"idx": 1, "inputs": {"ranges": [[1, 10], [10, 20]], "left": 21, "right": 21}, "outputs": false}], "title": "Check if All the Integers in a Range Are Covered", "entry_fn_name": "isCovered"}
{"question_id": "1872", "schema": {"name": "stoneGameVIII", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [-1, 2, -3, 4, -5]}, "outputs": 5}, {"idx": 1, "inputs": {"stones": [7, -6, 5, 10, 5, -2, -6]}, "outputs": 13}, {"idx": 2, "inputs": {"stones": [-10, -12]}, "outputs": -22}], "title": "Stone Game VIII", "entry_fn_name": "stoneGameVIII"}
{"question_id": "1871", "schema": {"name": "canReach", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "minJump"}, {"type": "integer", "name": "maxJump"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "111", "minJump": 2, "maxJump": 3}, "outputs": true}, {"idx": 1, "inputs": {"s": "01101110", "minJump": 2, "maxJump": 3}, "outputs": false}], "title": "Jump Game VII", "entry_fn_name": "canReach"}
{"question_id": "1870", "schema": {"name": "minSpeedOnTime", "params": [{"name": "dist", "type": "integer[]"}, {"type": "double", "name": "hour"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"dist": [1, 3, 2], "hour": 6}, "outputs": 1}, {"idx": 1, "inputs": {"dist": [1, 3, 2], "hour": 2.7}, "outputs": 3}, {"idx": 2, "inputs": {"dist": [1, 3, 2], "hour": 1.9}, "outputs": -1}], "title": "Minimum Speed to Arrive on Time", "entry_fn_name": "minSpeedOnTime"}
{"question_id": "1869", "schema": {"name": "checkZeroOnes", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1101"}, "outputs": true}, {"idx": 1, "inputs": {"s": "111000"}, "outputs": false}, {"idx": 2, "inputs": {"s": "110100010"}, "outputs": false}], "title": "Longer Contiguous Segments of Ones than Zeros", "entry_fn_name": "checkZeroOnes"}
{"question_id": "1866", "schema": {"name": "rearrangeSticks", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 2}, "outputs": 3}, {"idx": 1, "inputs": {"n": 5, "k": 5}, "outputs": 1}, {"idx": 2, "inputs": {"n": 20, "k": 11}, "outputs": 647427950}], "title": "Number of Ways to Rearrange Sticks With K Sticks Visible", "entry_fn_name": "rearrangeSticks"}
{"question_id": "1864", "schema": {"name": "minSwaps", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "111000"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "010"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "1110"}, "outputs": -1}], "title": "Minimum Number of Swaps to Make the Binary String Alternating", "entry_fn_name": "minSwaps"}
{"question_id": "1863", "schema": {"name": "subsetXORSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [5, 1, 6]}, "outputs": 28}, {"idx": 2, "inputs": {"nums": [3, 4, 5, 6, 7, 8]}, "outputs": 480}], "title": "Sum of All Subset XOR Totals", "entry_fn_name": "subsetXORSum"}
{"question_id": "1878", "schema": {"name": "getBiggestThree", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[3, 4, 5, 1, 3], [3, 3, 4, 2, 3], [20, 30, 200, 40, 10], [1, 5, 5, 4, 1], [4, 3, 2, 2, 5]]}, "outputs": [228, 216, 211]}, {"idx": 1, "inputs": {"grid": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": [20, 9, 8]}, {"idx": 2, "inputs": {"grid": [[7, 7, 7]]}, "outputs": [7]}], "title": "Get Biggest Three Rhombus Sums in a Grid", "entry_fn_name": "getBiggestThree"}
{"question_id": "1877", "schema": {"name": "minPairSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 5, 2, 3]}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [3, 5, 4, 2, 4, 6]}, "outputs": 8}], "title": "Minimize Maximum Pair Sum in Array", "entry_fn_name": "minPairSum"}
{"question_id": "1876", "schema": {"name": "countGoodSubstrings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "xyzzaz"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "aababcabc"}, "outputs": 4}], "title": "Substrings of Size Three with Distinct Characters", "entry_fn_name": "countGoodSubstrings"}
{"question_id": "1857", "schema": {"name": "largestPathValue", "params": [{"name": "colors", "type": "string"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"colors": "abaca", "edges": [[0, 1], [0, 2], [2, 3], [3, 4]]}, "outputs": 3}, {"idx": 1, "inputs": {"colors": "a", "edges": [[0, 0]]}, "outputs": -1}], "title": "Largest Color Value in a Directed Graph", "entry_fn_name": "largestPathValue"}
{"question_id": "1855", "schema": {"name": "maxDistance", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [55, 30, 5, 4, 2], "nums2": [100, 20, 10, 10, 5]}, "outputs": 2}, {"idx": 1, "inputs": {"nums1": [2, 2, 2], "nums2": [10, 10, 1]}, "outputs": 1}, {"idx": 2, "inputs": {"nums1": [30, 29, 19, 5], "nums2": [25, 25, 25, 25, 25]}, "outputs": 2}], "title": "Maximum Distance Between a Pair of Values", "entry_fn_name": "maxDistance"}
{"question_id": "1854", "schema": {"name": "maximumPopulation", "params": [{"name": "logs", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"logs": [[1993, 1999], [2000, 2010]]}, "outputs": 1993}, {"idx": 1, "inputs": {"logs": [[1950, 1961], [1960, 1971], [1970, 1981]]}, "outputs": 1960}], "title": "Maximum Population Year", "entry_fn_name": "maximumPopulation"}
{"question_id": "1850", "schema": {"name": "getMinSwaps", "params": [{"name": "num", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": "5489355142", "k": 4}, "outputs": 2}, {"idx": 1, "inputs": {"num": "11112", "k": 4}, "outputs": 4}, {"idx": 2, "inputs": {"num": "00123", "k": 1}, "outputs": 1}], "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number", "entry_fn_name": "getMinSwaps"}
{"question_id": "1851", "schema": {"name": "minInterval", "params": [{"name": "intervals", "type": "integer[][]"}, {"type": "integer[]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 4], [2, 4], [3, 6], [4, 4]], "queries": [2, 3, 4, 5]}, "outputs": [3, 3, 1, 4]}, {"idx": 1, "inputs": {"intervals": [[2, 3], [2, 5], [1, 8], [20, 25]], "queries": [2, 19, 5, 22]}, "outputs": [2, -1, 4, 6]}], "title": "Minimum Interval to Include Each Query", "entry_fn_name": "minInterval"}
{"question_id": "1849", "schema": {"name": "splitString", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1234"}, "outputs": false}, {"idx": 1, "inputs": {"s": "050043"}, "outputs": true}, {"idx": 2, "inputs": {"s": "9080701"}, "outputs": false}], "title": "Splitting a String Into Descending Consecutive Values", "entry_fn_name": "splitString"}
{"question_id": "1848", "schema": {"name": "getMinDistance", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "target"}, {"type": "integer", "name": "start"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5], "target": 5, "start": 3}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1], "target": 1, "start": 0}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "target": 1, "start": 0}, "outputs": 0}], "title": "Minimum Distance to the Target Element", "entry_fn_name": "getMinDistance"}
{"question_id": "1861", "schema": {"name": "rotateTheBox", "params": [{"name": "box", "type": "character[][]"}], "return": {"type": "character[][]"}}, "test_cases": [{"idx": 0, "inputs": {"box": [["#", ".", "#"]]}, "outputs": [["."], ["#"], ["#"]]}, {"idx": 1, "inputs": {"box": [["#", ".", "*", "."], ["#", "#", "*", "."]]}, "outputs": [["#", "."], ["#", "#"], ["*", "*"], [".", "."]]}, {"idx": 2, "inputs": {"box": [["#", "#", "*", ".", "*", "."], ["#", "#", "#", "*", ".", "."], ["#", "#", "#", ".", "#", "."]]}, "outputs": [[".", "#", "#"], [".", "#", "#"], ["#", "#", "*"], ["#", "*", "."], ["#", ".", "*"], ["#", ".", "."]]}], "title": "Rotating the Box", "entry_fn_name": "rotateTheBox"}
{"question_id": "1860", "schema": {"name": "memLeak", "params": [{"name": "memory1", "type": "integer"}, {"type": "integer", "name": "memory2"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"memory1": 2, "memory2": 2}, "outputs": [3, 1, 0]}, {"idx": 1, "inputs": {"memory1": 8, "memory2": 11}, "outputs": [6, 0, 4]}], "title": "Incremental Memory Leak", "entry_fn_name": "memLeak"}
{"question_id": "1859", "schema": {"name": "sortSentence", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "is2 sentence4 This1 a3"}, "outputs": "This is a sentence"}, {"idx": 1, "inputs": {"s": "Myself2 Me1 I4 and3"}, "outputs": "Me Myself and I"}], "title": "Sorting the Sentence", "entry_fn_name": "sortSentence"}
{"question_id": "1840", "schema": {"name": "maxBuilding", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "restrictions"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "restrictions": [[2, 1], [4, 1]]}, "outputs": 2}, {"idx": 1, "inputs": {"n": 6, "restrictions": []}, "outputs": 5}, {"idx": 2, "inputs": {"n": 10, "restrictions": [[5, 3], [2, 5], [7, 4], [10, 3]]}, "outputs": 5}], "title": "Maximum Building Height", "entry_fn_name": "maxBuilding"}
{"question_id": "1838", "schema": {"name": "maxFrequency", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 4], "k": 5}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 4, 8, 13], "k": 5}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [3, 9, 6], "k": 2}, "outputs": 1}], "title": "Frequency of the Most Frequent Element", "entry_fn_name": "maxFrequency"}
{"question_id": "1837", "schema": {"name": "sumBase", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 34, "k": 6}, "outputs": 9}, {"idx": 1, "inputs": {"n": 10, "k": 10}, "outputs": 1}], "title": "Sum of Digits in Base K", "entry_fn_name": "sumBase"}
{"question_id": "1835", "schema": {"name": "getXORSum", "params": [{"name": "arr1", "type": "integer[]"}, {"type": "integer[]", "name": "arr2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr1": [1, 2, 3], "arr2": [6, 5]}, "outputs": 0}, {"idx": 1, "inputs": {"arr1": [12], "arr2": [4]}, "outputs": 4}], "title": "Find XOR Sum of All Pairs Bitwise AND", "entry_fn_name": "getXORSum"}
{"question_id": "1834", "schema": {"name": "getOrder", "params": [{"name": "tasks", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"tasks": [[1, 2], [2, 4], [3, 2], [4, 1]]}, "outputs": [0, 2, 3, 1]}, {"idx": 1, "inputs": {"tasks": [[7, 10], [7, 12], [7, 5], [7, 4], [7, 2]]}, "outputs": [4, 3, 2, 0, 1]}], "title": "Single-Threaded CPU", "entry_fn_name": "getOrder"}
{"question_id": "1833", "schema": {"name": "maxIceCream", "params": [{"name": "costs", "type": "integer[]"}, {"type": "integer", "name": "coins"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"costs": [1, 3, 2, 4, 1], "coins": 7}, "outputs": 4}, {"idx": 1, "inputs": {"costs": [10, 6, 8, 7, 7, 8], "coins": 5}, "outputs": 0}, {"idx": 2, "inputs": {"costs": [1, 6, 3, 1, 2, 5], "coins": 20}, "outputs": 6}], "title": "Maximum Ice Cream Bars", "entry_fn_name": "maxIceCream"}
{"question_id": "1832", "schema": {"name": "checkIfPangram", "params": [{"name": "sentence", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"sentence": "thequickbrownfoxjumpsoverthelazydog"}, "outputs": true}, {"idx": 1, "inputs": {"sentence": "leetcode"}, "outputs": false}], "title": "Check if the Sentence Is Pangram", "entry_fn_name": "checkIfPangram"}
{"question_id": "1847", "schema": {"name": "closestRoom", "params": [{"name": "rooms", "type": "integer[][]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"rooms": [[2, 2], [1, 2], [3, 2]], "queries": [[3, 1], [3, 3], [5, 2]]}, "outputs": [3, -1, 3]}, {"idx": 1, "inputs": {"rooms": [[1, 4], [2, 3], [3, 5], [4, 1], [5, 2]], "queries": [[2, 3], [2, 4], [2, 5]]}, "outputs": [2, 1, 3]}], "title": "Closest Room", "entry_fn_name": "closestRoom"}
{"question_id": "1846", "schema": {"name": "maximumElementAfterDecrementingAndRearranging", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 2, 1, 2, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"arr": [100, 1, 1000]}, "outputs": 3}, {"idx": 2, "inputs": {"arr": [1, 2, 3, 4, 5]}, "outputs": 5}], "title": "Maximum Element After Decreasing and Rearranging", "entry_fn_name": "maximumElementAfterDecrementingAndRearranging"}
{"question_id": "1844", "schema": {"name": "replaceDigits", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "a1c1e1"}, "outputs": "abcdef"}, {"idx": 1, "inputs": {"s": "a1b2c3d4e"}, "outputs": "abbdcfdhe"}], "title": "Replace All Digits with Characters", "entry_fn_name": "replaceDigits"}
{"question_id": "1824", "schema": {"name": "minSideJumps", "params": [{"name": "obstacles", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"obstacles": [0, 1, 2, 3, 0]}, "outputs": 2}, {"idx": 1, "inputs": {"obstacles": [0, 1, 1, 3, 3, 0]}, "outputs": 0}, {"idx": 2, "inputs": {"obstacles": [0, 2, 1, 0, 3, 0]}, "outputs": 2}], "title": "Minimum Sideway Jumps", "entry_fn_name": "minSideJumps"}
{"question_id": "1823", "schema": {"name": "findTheWinner", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "k": 2}, "outputs": 3}, {"idx": 1, "inputs": {"n": 6, "k": 5}, "outputs": 1}], "title": "Find the Winner of the Circular Game", "entry_fn_name": "findTheWinner"}
{"question_id": "1822", "schema": {"name": "arraySign", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-1, -2, -3, -4, 3, 2, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 5, 0, 2, -3]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [-1, 1, -1, 1, -1]}, "outputs": -1}], "title": "Sign of the Product of an Array", "entry_fn_name": "arraySign"}
{"question_id": "1819", "schema": {"name": "countDifferentSubsequenceGCDs", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [6, 10, 3]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [5, 15, 40, 5, 6]}, "outputs": 7}], "title": "Number of Different Subsequences GCDs", "entry_fn_name": "countDifferentSubsequenceGCDs"}
{"question_id": "1818", "schema": {"name": "minAbsoluteSumDiff", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 7, 5], "nums2": [2, 3, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"nums1": [2, 4, 6, 8, 10], "nums2": [2, 4, 6, 8, 10]}, "outputs": 0}, {"idx": 2, "inputs": {"nums1": [1, 10, 4, 4, 2, 7], "nums2": [9, 3, 5, 1, 7, 4]}, "outputs": 20}], "title": "Minimum Absolute Sum Difference", "entry_fn_name": "minAbsoluteSumDiff"}
{"question_id": "1817", "schema": {"name": "findingUsersActiveMinutes", "params": [{"name": "logs", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"logs": [[0, 5], [1, 2], [0, 2], [0, 5], [1, 3]], "k": 5}, "outputs": [0, 2, 0, 0, 0]}, {"idx": 1, "inputs": {"logs": [[1, 1], [2, 2], [2, 3]], "k": 4}, "outputs": [1, 1, 0, 0]}], "title": "Finding the Users Active Minutes", "entry_fn_name": "findingUsersActiveMinutes"}
{"question_id": "1816", "schema": {"name": "truncateSentence", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "Hello how are you Contestant", "k": 4}, "outputs": "Hello how are you"}, {"idx": 1, "inputs": {"s": "What is the solution to this problem", "k": 4}, "outputs": "What is the solution"}, {"idx": 2, "inputs": {"s": "chopper is not a tanuki", "k": 5}, "outputs": "chopper is not a tanuki"}], "title": "Truncate Sentence", "entry_fn_name": "truncateSentence"}
{"question_id": "1830", "schema": {"name": "makeStringSorted", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "cba"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "aabaa"}, "outputs": 2}], "title": "Minimum Number of Operations to Make String Sorted", "entry_fn_name": "makeStringSorted"}
{"question_id": "1829", "schema": {"name": "getMaximumXor", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "maximumBit"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 1, 3], "maximumBit": 2}, "outputs": [0, 3, 2, 3]}, {"idx": 1, "inputs": {"nums": [2, 3, 4, 7], "maximumBit": 3}, "outputs": [5, 2, 6, 5]}, {"idx": 2, "inputs": {"nums": [0, 1, 2, 2, 5, 7], "maximumBit": 3}, "outputs": [4, 3, 6, 4, 6, 7]}], "title": "Maximum XOR for Each Query", "entry_fn_name": "getMaximumXor"}
{"question_id": "1827", "schema": {"name": "minOperations", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 5, 2, 4, 1]}, "outputs": 14}, {"idx": 2, "inputs": {"nums": [8]}, "outputs": 0}], "title": "Minimum Operations to Make the Array Increasing", "entry_fn_name": "minOperations"}
{"question_id": "1808", "schema": {"name": "maxNiceDivisors", "params": [{"name": "primeFactors", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"primeFactors": 5}, "outputs": 6}, {"idx": 1, "inputs": {"primeFactors": 8}, "outputs": 18}], "title": "Maximize Number of Nice Divisors", "entry_fn_name": "maxNiceDivisors"}
{"question_id": "1806", "schema": {"name": "reinitializePermutation", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 1}, {"idx": 1, "inputs": {"n": 4}, "outputs": 2}, {"idx": 2, "inputs": {"n": 6}, "outputs": 4}], "title": "Minimum Number of Operations to Reinitialize a Permutation", "entry_fn_name": "reinitializePermutation"}
{"question_id": "1807", "schema": {"name": "evaluate", "params": [{"type": "string", "name": "s"}, {"type": "list<list<string>>", "name": "knowledge"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(name)is(age)yearsold", "knowledge": [["name", "bob"], ["age", "two"]]}, "outputs": "bobistwoyearsold"}, {"idx": 1, "inputs": {"s": "hi(name)", "knowledge": [["a", "b"]]}, "outputs": "hi?"}, {"idx": 2, "inputs": {"s": "(a)(a)(a)aaa", "knowledge": [["a", "yes"]]}, "outputs": "yesyesyesaaa"}], "title": "Evaluate the Bracket Pairs of a String", "entry_fn_name": "evaluate"}
{"question_id": "1805", "schema": {"name": "numDifferentIntegers", "params": [{"name": "word", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word": "abcdef"}, "outputs": 3}, {"idx": 1, "inputs": {"word": "leetcode"}, "outputs": 2}, {"idx": 2, "inputs": {"word": "abc"}, "outputs": 1}], "title": "Number of Different Integers in a String", "entry_fn_name": "numDifferentIntegers"}
{"question_id": "1798", "schema": {"name": "getMaximumConsecutive", "params": [{"name": "coins", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"coins": [1, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"coins": [1, 1, 1, 4]}, "outputs": 8}, {"idx": 2, "inputs": {"nums": [1, 4, 10, 3, 1]}, "outputs": 20}], "title": "Maximum Number of Consecutive Values You Can Make", "entry_fn_name": "getMaximumConsecutive"}
{"question_id": "1802", "schema": {"name": "maxValue", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "index"}, {"type": "integer", "name": "maxSum"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "index": 2, "maxSum": 6}, "outputs": 2}, {"idx": 1, "inputs": {"n": 6, "index": 1, "maxSum": 10}, "outputs": 3}], "title": "Maximum Value at a Given Index in a Bounded Array", "entry_fn_name": "maxValue"}
{"question_id": "1801", "schema": {"name": "getNumberOfBacklogOrders", "params": [{"name": "orders", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"orders": [[10, 5, 0], [15, 2, 1], [25, 1, 1], [30, 4, 0]]}, "outputs": 6}, {"idx": 1, "inputs": {"orders": [[7, 1000000000, 1], [15, 3, 0], [5, 999999995, 0], [5, 1, 1]]}, "outputs": 999999984}], "title": "Number of Orders in the Backlog", "entry_fn_name": "getNumberOfBacklogOrders"}
{"question_id": "1800", "schema": {"name": "maxAscendingSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 20, 30, 5, 10, 50]}, "outputs": 65}, {"idx": 1, "inputs": {"nums": [10, 20, 30, 40, 50]}, "outputs": 150}, {"idx": 2, "inputs": {"nums": [12, 17, 15, 13, 10, 11, 12]}, "outputs": 33}], "title": "Maximum Ascending Subarray Sum", "entry_fn_name": "maxAscendingSum"}
{"question_id": "1814", "schema": {"name": "countNicePairs", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [42, 11, 1, 97]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [13, 10, 35, 24, 76]}, "outputs": 4}], "title": "Count Nice Pairs in an Array", "entry_fn_name": "countNicePairs"}
{"question_id": "1815", "schema": {"name": "maxHappyGroups", "params": [{"name": "batchSize", "type": "integer"}, {"type": "integer[]", "name": "groups"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"batchSize": 3, "groups": [1, 2, 3, 4, 5, 6]}, "outputs": 4}, {"idx": 1, "inputs": {"batchSize": 4, "groups": [1, 3, 2, 5, 2, 2, 1, 6]}, "outputs": 4}], "title": "Maximum Number of Groups Getting Fresh Donuts", "entry_fn_name": "maxHappyGroups"}
{"question_id": "1813", "schema": {"name": "areSentencesSimilar", "params": [{"name": "sentence1", "type": "string"}, {"type": "string", "name": "sentence2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"sentence1": "My name is Haley", "sentence2": "My Haley"}, "outputs": true}, {"idx": 1, "inputs": {"sentence1": "of", "sentence2": "A lot of words"}, "outputs": false}, {"idx": 2, "inputs": {"sentence1": "Eating right now", "sentence2": "Eating"}, "outputs": true}], "title": "Sentence Similarity III", "entry_fn_name": "areSentencesSimilar"}
{"question_id": "1812", "schema": {"name": "squareIsWhite", "params": [{"name": "coordinates", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"coordinates": "a1"}, "outputs": false}, {"idx": 1, "inputs": {"coordinates": "h3"}, "outputs": true}, {"idx": 2, "inputs": {"coordinates": "c7"}, "outputs": false}], "title": "Determine Color of a Chessboard Square", "entry_fn_name": "squareIsWhite"}
{"question_id": "1793", "schema": {"name": "maximumScore", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 4, 3, 7, 4, 5], "k": 3}, "outputs": 15}, {"idx": 1, "inputs": {"nums": [5, 5, 4, 5, 4, 1, 1, 1], "k": 0}, "outputs": 20}], "title": "Maximum Score of a Good Subarray", "entry_fn_name": "maximumScore"}
{"question_id": "1791", "schema": {"name": "findCenter", "params": [{"name": "edges", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"edges": [[1, 2], [2, 3], [4, 2]]}, "outputs": 2}, {"idx": 1, "inputs": {"edges": [[1, 2], [5, 1], [1, 3], [1, 4]]}, "outputs": 1}], "title": "Find Center of Star Graph", "entry_fn_name": "findCenter"}
{"question_id": "1790", "schema": {"name": "areAlmostEqual", "params": [{"name": "s1", "type": "string"}, {"type": "string", "name": "s2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "bank", "s2": "kanb"}, "outputs": true}, {"idx": 1, "inputs": {"s1": "attack", "s2": "defend"}, "outputs": false}, {"idx": 2, "inputs": {"s1": "kelb", "s2": "kelb"}, "outputs": true}], "title": "Check if One String Swap Can Make Strings Equal", "entry_fn_name": "areAlmostEqual"}
{"question_id": "1787", "schema": {"name": "minChanges", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 0, 3, 0], "k": 1}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [3, 4, 5, 2, 1, 7, 3, 4, 7], "k": 3}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [1, 2, 4, 1, 2, 5, 1, 2, 6], "k": 3}, "outputs": 3}], "title": "Make the XOR of All Segments Equal to Zero", "entry_fn_name": "minChanges"}
{"question_id": "1786", "schema": {"name": "countRestrictedPaths", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "edges": [[1, 2, 3], [1, 3, 3], [2, 3, 1], [1, 4, 2], [5, 2, 2], [3, 5, 1], [5, 4, 10]]}, "outputs": 3}, {"idx": 1, "inputs": {"n": 7, "edges": [[1, 3, 1], [4, 1, 2], [7, 3, 4], [2, 5, 3], [5, 6, 1], [6, 7, 2], [7, 5, 3], [2, 6, 4]]}, "outputs": 1}], "title": "Number of Restricted Paths From First to Last Node", "entry_fn_name": "countRestrictedPaths"}
{"question_id": "1785", "schema": {"name": "minElements", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "limit"}, {"type": "integer", "name": "goal"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, -1, 1], "limit": 3, "goal": -4}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, -10, 9, 1], "limit": 100, "goal": 0}, "outputs": 1}], "title": "Minimum Elements to Add to Form a Given Sum", "entry_fn_name": "minElements"}
{"question_id": "1784", "schema": {"name": "checkOnesSegment", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1001"}, "outputs": false}, {"idx": 1, "inputs": {"s": "110"}, "outputs": true}], "title": "Check if Binary String Has at Most One Segment of Ones", "entry_fn_name": "checkOnesSegment"}
{"question_id": "1803", "schema": {"name": "countPairs", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "low"}, {"type": "integer", "name": "high"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 4, 2, 7], "low": 2, "high": 6}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [9, 8, 4, 2, 1], "low": 5, "high": 14}, "outputs": 8}], "title": "Count Pairs With XOR in a Range", "entry_fn_name": "countPairs"}
{"question_id": "1799", "schema": {"name": "maxScore", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [3, 4, 6, 8]}, "outputs": 11}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 5, 6]}, "outputs": 14}], "title": "Maximize Score After N Operations", "entry_fn_name": "maxScore"}
{"question_id": "1796", "schema": {"name": "secondHighest", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "dfa12321afd"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "abc1111"}, "outputs": -1}], "title": "Second Largest Digit in a String", "entry_fn_name": "secondHighest"}
{"question_id": "1776", "schema": {"name": "getCollisionTimes", "params": [{"name": "cars", "type": "integer[][]"}], "return": {"type": "double[]"}}, "test_cases": [{"idx": 0, "inputs": {"cars": [[1, 2], [2, 1], [4, 3], [7, 2]]}, "outputs": [1.0, -1.0, 3.0, -1.0]}, {"idx": 1, "inputs": {"cars": [[3, 4], [5, 4], [6, 3], [9, 1]]}, "outputs": [2.0, 1.0, 1.5, -1.0]}], "title": "Car Fleet II", "entry_fn_name": "getCollisionTimes"}
{"question_id": "1775", "schema": {"name": "minOperations", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 3, 4, 5, 6], "nums2": [1, 1, 2, 2, 2, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"nums1": [1, 1, 1, 1, 1, 1, 1], "nums2": [6]}, "outputs": -1}, {"idx": 2, "inputs": {"nums1": [6, 6], "nums2": [1]}, "outputs": 3}], "title": "Equal Sum Arrays With Minimum Number of Operations", "entry_fn_name": "minOperations"}
{"question_id": "1774", "schema": {"name": "closestCost", "params": [{"name": "baseCosts", "type": "integer[]"}, {"type": "integer[]", "name": "toppingCosts"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"baseCosts": [1, 7], "toppingCosts": [3, 4], "target": 10}, "outputs": 10}, {"idx": 1, "inputs": {"baseCosts": [2, 3], "toppingCosts": [4, 5, 100], "target": 18}, "outputs": 17}, {"idx": 2, "inputs": {"baseCosts": [3, 10], "toppingCosts": [2, 5], "target": 9}, "outputs": 8}], "title": "Closest Dessert Cost", "entry_fn_name": "closestCost"}
{"question_id": "1773", "schema": {"name": "countMatches", "params": [{"name": "items", "type": "list<list<string>>"}, {"type": "string", "name": "ruleKey"}, {"type": "string", "name": "ruleValue"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"items": [["phone", "blue", "pixel"], ["computer", "silver", "lenovo"], ["phone", "gold", "iphone"]], "ruleKey": "color", "ruleValue": "silver"}, "outputs": 1}, {"idx": 1, "inputs": {"items": [["phone", "blue", "pixel"], ["computer", "silver", "phone"], ["phone", "gold", "iphone"]], "ruleKey": "type", "ruleValue": "phone"}, "outputs": 2}], "title": "Count Items Matching a Rule", "entry_fn_name": "countMatches"}
{"question_id": "1771", "schema": {"name": "longestPalindrome", "params": [{"name": "word1", "type": "string"}, {"type": "string", "name": "word2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "cacb", "word2": "cbba"}, "outputs": 5}, {"idx": 1, "inputs": {"word1": "ab", "word2": "ab"}, "outputs": 3}, {"idx": 2, "inputs": {"word1": "aa", "word2": "bb"}, "outputs": 0}], "title": "Maximize Palindrome Length From Subsequences", "entry_fn_name": "longestPalindrome"}
{"question_id": "1770", "schema": {"name": "maximumScore", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[]", "name": "multipliers"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3], "multipliers": [3, 2, 1]}, "outputs": 14}, {"idx": 1, "inputs": {"nums": [-5, -3, -3, -2, 7, 1], "multipliers": [-10, -5, 3, 4, 6]}, "outputs": 102}], "title": "Maximum Score from Performing Multiplication Operations", "entry_fn_name": "maximumScore"}
{"question_id": "1769", "schema": {"name": "minOperations", "params": [{"name": "boxes", "type": "string"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"boxes": "110"}, "outputs": [1, 1, 3]}, {"idx": 1, "inputs": {"boxes": "001011"}, "outputs": [11, 8, 5, 4, 3, 4]}], "title": "Minimum Number of Operations to Move All Balls to Each Box", "entry_fn_name": "minOperations"}
{"question_id": "1768", "schema": {"name": "mergeAlternately", "params": [{"name": "word1", "type": "string"}, {"type": "string", "name": "word2"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "abc", "word2": "pqr"}, "outputs": "apbqcr"}, {"idx": 1, "inputs": {"word1": "ab", "word2": "pqrs"}, "outputs": "apbqrs"}, {"idx": 2, "inputs": {"word1": "abcd", "word2": "pq"}, "outputs": "apbqcd"}], "title": "Merge Strings Alternately", "entry_fn_name": "mergeAlternately"}
{"question_id": "1782", "schema": {"name": "countPairs", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer[]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "edges": [[1, 2], [2, 4], [1, 3], [2, 3], [2, 1]], "queries": [2, 3]}, "outputs": [6, 5]}, {"idx": 1, "inputs": {"n": 5, "edges": [[1, 5], [1, 5], [3, 4], [2, 5], [1, 3], [5, 1], [2, 3], [2, 5]], "queries": [1, 2, 3, 4, 5]}, "outputs": [10, 10, 9, 8, 6]}], "title": "Count Pairs Of Nodes", "entry_fn_name": "countPairs"}
{"question_id": "1781", "schema": {"name": "beautySum", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aabcb"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "aabcbaa"}, "outputs": 17}], "title": "Sum of Beauty of All Substrings", "entry_fn_name": "beautySum"}
{"question_id": "1780", "schema": {"name": "checkPowersOfThree", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 12}, "outputs": true}, {"idx": 1, "inputs": {"n": 91}, "outputs": true}, {"idx": 2, "inputs": {"n": 21}, "outputs": false}], "title": "Check if Number is a Sum of Powers of Three", "entry_fn_name": "checkPowersOfThree"}
{"question_id": "1779", "schema": {"name": "nearestValidPoint", "params": [{"name": "x", "type": "integer"}, {"type": "integer", "name": "y"}, {"type": "integer[][]", "name": "points"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"x": 3, "y": 4, "points": [[1, 2], [3, 1], [2, 4], [2, 3], [4, 4]]}, "outputs": 2}, {"idx": 1, "inputs": {"x": 3, "y": 4, "points": [[3, 4]]}, "outputs": 0}, {"idx": 2, "inputs": {"x": 3, "y": 4, "points": [[2, 3]]}, "outputs": -1}], "title": "Find Nearest Point That Has the Same X or Y Coordinate", "entry_fn_name": "nearestValidPoint"}
{"question_id": "1761", "schema": {"name": "minTrioDegree", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "edges": [[1, 2], [1, 3], [3, 2], [4, 1], [5, 2], [3, 6]]}, "outputs": 3}, {"idx": 1, "inputs": {"n": 7, "edges": [[1, 3], [4, 1], [4, 3], [2, 5], [5, 6], [6, 7], [7, 5], [2, 6]]}, "outputs": 0}], "title": "Minimum Degree of a Connected Trio in a Graph", "entry_fn_name": "minTrioDegree"}
{"question_id": "1760", "schema": {"name": "minimumSize", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "maxOperations"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [9], "maxOperations": 2}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [2, 4, 8, 2], "maxOperations": 4}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [7, 17], "maxOperations": 2}, "outputs": 7}], "title": "Minimum Limit of Balls in a Bag", "entry_fn_name": "minimumSize"}
{"question_id": "1759", "schema": {"name": "countHomogenous", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abbcccaa"}, "outputs": 13}, {"idx": 1, "inputs": {"s": "xy"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "zzzzz"}, "outputs": 15}], "title": "Count Number of Homogenous Substrings", "entry_fn_name": "countHomogenous"}
{"question_id": "1758", "schema": {"name": "minOperations", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "0100"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "10"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "1111"}, "outputs": 2}], "title": "Minimum Changes To Make Alternating Binary String", "entry_fn_name": "minOperations"}
{"question_id": "1755", "schema": {"name": "minAbsDifference", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "goal"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, -7, 3, 5], "goal": 6}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [7, -9, 15, -2], "goal": -5}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [1, 2, 3], "goal": -7}, "outputs": 7}], "title": "Closest Subsequence Sum", "entry_fn_name": "minAbsDifference"}
{"question_id": "1754", "schema": {"name": "largestMerge", "params": [{"name": "word1", "type": "string"}, {"type": "string", "name": "word2"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "cabaa", "word2": "bcaaa"}, "outputs": "cbcabaaaaa"}, {"idx": 1, "inputs": {"word1": "abcabc", "word2": "abdcaba"}, "outputs": "abdcabcabcaba"}], "title": "Largest Merge Of Two Strings", "entry_fn_name": "largestMerge"}
{"question_id": "1753", "schema": {"name": "maximumScore", "params": [{"name": "a", "type": "integer"}, {"type": "integer", "name": "b"}, {"type": "integer", "name": "c"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": 2, "b": 4, "c": 6}, "outputs": 6}, {"idx": 1, "inputs": {"a": 4, "b": 4, "c": 6}, "outputs": 7}, {"idx": 2, "inputs": {"a": 1, "b": 8, "c": 8}, "outputs": 8}], "title": "Maximum Score From Removing Stones", "entry_fn_name": "maximumScore"}
{"question_id": "1752", "schema": {"name": "check", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 4, 5, 1, 2]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [2, 1, 3, 4]}, "outputs": false}, {"idx": 2, "inputs": {"nums": [1, 2, 3]}, "outputs": true}], "title": "Check if Array Is Sorted and Rotated", "entry_fn_name": "check"}
{"question_id": "1765", "schema": {"name": "highestPeak", "params": [{"name": "isWater", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"isWater": [[0, 1], [0, 0]]}, "outputs": [[1, 0], [2, 1]]}, {"idx": 1, "inputs": {"isWater": [[0, 0, 1], [1, 0, 0], [0, 0, 0]]}, "outputs": [[1, 1, 0], [0, 1, 1], [1, 2, 2]]}], "title": "Map of Highest Peak", "entry_fn_name": "highestPeak"}
{"question_id": "1766", "schema": {"name": "getCoprimes", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 3, 2], "edges": [[0, 1], [1, 2], [1, 3]]}, "outputs": [-1, 0, 0, 1]}, {"idx": 1, "inputs": {"nums": [5, 6, 10, 2, 3, 6, 15], "edges": [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]]}, "outputs": [-1, 0, -1, 0, 0, 0, -1]}], "title": "Tree of Coprimes", "entry_fn_name": "getCoprimes"}
{"question_id": "1764", "schema": {"name": "canChoose", "params": [{"name": "groups", "type": "integer[][]"}, {"type": "integer[]", "name": "nums"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"groups": [[1, -1, -1], [3, -2, 0]], "nums": [1, -1, 0, 1, -1, -1, 3, -2, 0]}, "outputs": true}, {"idx": 1, "inputs": {"groups": [[10, -2], [1, 2, 3, 4]], "nums": [1, 2, 3, 4, 10, -2]}, "outputs": false}, {"idx": 2, "inputs": {"groups": [[1, 2, 3], [3, 4]], "nums": [7, 7, 1, 2, 3, 4, 7, 7]}, "outputs": false}], "title": "Form Array by Concatenating Subarrays of Another Array", "entry_fn_name": "canChoose"}
{"question_id": "1763", "schema": {"name": "longestNiceSubstring", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "YazaAay"}, "outputs": "aAa"}, {"idx": 1, "inputs": {"s": "Bb"}, "outputs": "Bb"}, {"idx": 2, "inputs": {"s": "c"}, "outputs": ""}], "title": "Longest Nice Substring", "entry_fn_name": "longestNiceSubstring"}
{"question_id": "1744", "schema": {"name": "canEat", "params": [{"name": "candiesCount", "type": "integer[]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "boolean[]"}}, "test_cases": [{"idx": 0, "inputs": {"candiesCount": [7, 4, 5, 3, 8], "queries": [[0, 2, 2], [4, 2, 4], [2, 13, 1000000000]]}, "outputs": [true, false, true]}, {"idx": 1, "inputs": {"candiesCount": [5, 2, 6, 4, 1], "queries": [[3, 1, 2], [4, 10, 3], [3, 10, 100], [4, 100, 30], [1, 3, 1]]}, "outputs": [false, true, true, false, false]}], "title": "Can You Eat Your Favorite Candy on Your Favorite Day?", "entry_fn_name": "canEat"}
{"question_id": "1745", "schema": {"name": "checkPartitioning", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcbdd"}, "outputs": true}, {"idx": 1, "inputs": {"s": "bcbddxy"}, "outputs": false}], "title": "Palindrome Partitioning IV", "entry_fn_name": "checkPartitioning"}
{"question_id": "1743", "schema": {"name": "restoreArray", "params": [{"name": "adjacentPairs", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"adjacentPairs": [[2, 1], [3, 4], [3, 2]]}, "outputs": [1, 2, 3, 4]}, {"idx": 1, "inputs": {"adjacentPairs": [[4, -2], [1, 4], [-3, 1]]}, "outputs": [-2, 4, 1, -3]}, {"idx": 2, "inputs": {"adjacentPairs": [[100000, -100000]]}, "outputs": [100000, -100000]}], "title": "Restore the Array From Adjacent Pairs", "entry_fn_name": "restoreArray"}
{"question_id": "1739", "schema": {"name": "minimumBoxes", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 3}, {"idx": 1, "inputs": {"n": 4}, "outputs": 3}, {"idx": 2, "inputs": {"n": 10}, "outputs": 6}], "title": "Building Boxes", "entry_fn_name": "minimumBoxes"}
{"question_id": "1738", "schema": {"name": "kthLargestValue", "params": [{"name": "matrix", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[5, 2], [1, 6]], "k": 1}, "outputs": 7}, {"idx": 1, "inputs": {"matrix": [[5, 2], [1, 6]], "k": 2}, "outputs": 5}, {"idx": 2, "inputs": {"matrix": [[5, 2], [1, 6]], "k": 3}, "outputs": 4}], "title": "Find Kth Largest XOR Coordinate Value", "entry_fn_name": "kthLargestValue"}
{"question_id": "1737", "schema": {"name": "minCharacters", "params": [{"name": "a", "type": "string"}, {"type": "string", "name": "b"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": "aba", "b": "caa"}, "outputs": 2}, {"idx": 1, "inputs": {"a": "dabadd", "b": "cda"}, "outputs": 3}], "title": "Change Minimum Characters to Satisfy One of Three Conditions", "entry_fn_name": "minCharacters"}
{"question_id": "1736", "schema": {"name": "maximumTime", "params": [{"name": "time", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"time": "2?:?0"}, "outputs": "23:50"}, {"idx": 1, "inputs": {"time": "0?:3?"}, "outputs": "09:39"}, {"idx": 2, "inputs": {"time": "1?:22"}, "outputs": "19:22"}], "title": "Latest Time by Replacing Hidden Digits", "entry_fn_name": "maximumTime"}
{"question_id": "1751", "schema": {"name": "maxValue", "params": [{"name": "events", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"events": [[1, 2, 4], [3, 4, 3], [2, 3, 1]], "k": 2}, "outputs": 7}, {"idx": 1, "inputs": {"events": [[1, 2, 4], [3, 4, 3], [2, 3, 10]], "k": 2}, "outputs": 10}, {"idx": 2, "inputs": {"events": [[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]], "k": 3}, "outputs": 9}], "title": "Maximum Number of Events That Can Be Attended II", "entry_fn_name": "maxValue"}
{"question_id": "1750", "schema": {"name": "minimumLength", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ca"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "cabaabac"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "aabccabba"}, "outputs": 3}], "title": "Minimum Length of String After Deleting Similar Ends", "entry_fn_name": "minimumLength"}
{"question_id": "1749", "schema": {"name": "maxAbsoluteSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, -3, 2, 3, -4]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [2, -5, 1, -4, 3, -2]}, "outputs": 8}], "title": "Maximum Absolute Sum of Any Subarray", "entry_fn_name": "maxAbsoluteSum"}
{"question_id": "1748", "schema": {"name": "sumOfUnique", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 2]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [1, 1, 1, 1, 1]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 5]}, "outputs": 15}], "title": "Sum of Unique Elements", "entry_fn_name": "sumOfUnique"}
{"question_id": "1727", "schema": {"name": "largestSubmatrix", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[0, 0, 1], [1, 1, 1], [1, 0, 1]]}, "outputs": 4}, {"idx": 1, "inputs": {"matrix": [[1, 0, 1, 0, 1]]}, "outputs": 3}, {"idx": 2, "inputs": {"matrix": [[1, 1, 0], [1, 0, 1]]}, "outputs": 2}], "title": "Largest Submatrix With Rearrangements", "entry_fn_name": "largestSubmatrix"}
{"question_id": "1742", "schema": {"name": "countBalls", "params": [{"name": "lowLimit", "type": "integer"}, {"type": "integer", "name": "highLimit"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"lowLimit": 1, "highLimit": 10}, "outputs": 2}, {"idx": 1, "inputs": {"lowLimit": 5, "highLimit": 15}, "outputs": 2}, {"idx": 2, "inputs": {"lowLimit": 19, "highLimit": 28}, "outputs": 2}], "title": "Maximum Number of Balls in a Box", "entry_fn_name": "countBalls"}
{"question_id": "1725", "schema": {"name": "countGoodRectangles", "params": [{"name": "rectangles", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rectangles": [[5, 8], [3, 9], [5, 12], [16, 5]]}, "outputs": 3}, {"idx": 1, "inputs": {"rectangles": [[2, 3], [3, 7], [4, 3], [3, 7]]}, "outputs": 3}], "title": "Number Of Rectangles That Can Form The Largest Square", "entry_fn_name": "countGoodRectangles"}
{"question_id": "1722", "schema": {"name": "minimumHammingDistance", "params": [{"name": "source", "type": "integer[]"}, {"type": "integer[]", "name": "target"}, {"type": "integer[][]", "name": "allowedSwaps"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"source": [1, 2, 3, 4], "target": [2, 1, 4, 5], "allowedSwaps": [[0, 1], [2, 3]]}, "outputs": 1}, {"idx": 1, "inputs": {"source": [1, 2, 3, 4], "target": [1, 3, 2, 4], "allowedSwaps": []}, "outputs": 2}, {"idx": 2, "inputs": {"source": [5, 1, 2, 4, 3], "target": [1, 5, 4, 2, 3], "allowedSwaps": [[0, 4], [4, 2], [1, 3], [1, 4]]}, "outputs": 0}], "title": "Minimize Hamming Distance After Swap Operations", "entry_fn_name": "minimumHammingDistance"}
{"question_id": "1720", "schema": {"name": "decode", "params": [{"name": "encoded", "type": "integer[]"}, {"type": "integer", "name": "first"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"encoded": [1, 2, 3], "first": 1}, "outputs": [1, 0, 2, 1]}, {"idx": 1, "inputs": {"encoded": [6, 2, 7, 3], "first": 4}, "outputs": [4, 2, 0, 7, 4]}], "title": "Decode XORed Array", "entry_fn_name": "decode"}
{"question_id": "1735", "schema": {"name": "waysToFillArray", "params": [{"name": "queries", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"queries": [[2, 6], [5, 1], [73, 660]]}, "outputs": [4, 1, 50734910]}, {"idx": 1, "inputs": {"queries": [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]}, "outputs": [1, 2, 3, 10, 5]}], "title": "Count Ways to Make Array With Product", "entry_fn_name": "waysToFillArray"}
{"question_id": "1734", "schema": {"name": "decode", "params": [{"name": "encoded", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"encoded": [3, 1]}, "outputs": [1, 2, 3]}, {"idx": 1, "inputs": {"encoded": [6, 5, 4, 6]}, "outputs": [2, 4, 1, 5, 3]}], "title": "Decode XORed Permutation", "entry_fn_name": "decode"}
{"question_id": "1733", "schema": {"name": "minimumTeachings", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "languages"}, {"type": "integer[][]", "name": "friendships"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "languages": [[1], [2], [1, 2]], "friendships": [[1, 2], [1, 3], [2, 3]]}, "outputs": 1}, {"idx": 1, "inputs": {"n": 3, "languages": [[2], [1, 3], [1, 2], [3]], "friendships": [[1, 4], [1, 2], [3, 4], [2, 3]]}, "outputs": 2}], "title": "Minimum Number of People to Teach", "entry_fn_name": "minimumTeachings"}
{"question_id": "1732", "schema": {"name": "largestAltitude", "params": [{"name": "gain", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"gain": [-5, 1, 5, 0, -7]}, "outputs": 1}, {"idx": 1, "inputs": {"gain": [-4, -3, -2, -1, 4, 3, 2]}, "outputs": 0}], "title": "Find the Highest Altitude", "entry_fn_name": "largestAltitude"}
{"question_id": "1712", "schema": {"name": "waysToSplit", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 2, 2, 2, 5, 0]}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [3, 2, 1]}, "outputs": 0}], "title": "Ways to Split Array Into Three Subarrays", "entry_fn_name": "waysToSplit"}
{"question_id": "1711", "schema": {"name": "countPairs", "params": [{"name": "deliciousness", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"deliciousness": [1, 3, 5, 7, 9]}, "outputs": 4}, {"idx": 1, "inputs": {"deliciousness": [1, 1, 1, 3, 3, 3, 7]}, "outputs": 15}], "title": "Count Good Meals", "entry_fn_name": "countPairs"}
{"question_id": "1710", "schema": {"name": "maximumUnits", "params": [{"name": "boxTypes", "type": "integer[][]"}, {"type": "integer", "name": "truckSize"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"boxTypes": [[1, 3], [2, 2], [3, 1]], "truckSize": 4}, "outputs": 8}, {"idx": 1, "inputs": {"boxTypes": [[5, 10], [2, 5], [4, 7], [3, 9]], "truckSize": 10}, "outputs": 91}], "title": "Maximum Units on a Truck", "entry_fn_name": "maximumUnits"}
{"question_id": "1707", "schema": {"name": "maximizeXor", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 2, 3, 4], "queries": [[3, 1], [1, 3], [5, 6]]}, "outputs": [3, 3, 7]}, {"idx": 1, "inputs": {"nums": [5, 2, 4, 6, 6, 3], "queries": [[12, 4], [8, 1], [6, 3]]}, "outputs": [15, -1, 5]}], "title": "Maximum XOR With an Element From Array", "entry_fn_name": "maximizeXor"}
{"question_id": "1723", "schema": {"name": "minimumTimeRequired", "params": [{"name": "jobs", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"jobs": [3, 2, 3], "k": 3}, "outputs": 3}, {"idx": 1, "inputs": {"jobs": [1, 2, 4, 7, 8], "k": 2}, "outputs": 11}], "title": "Find Minimum Time to Finish All Jobs", "entry_fn_name": "minimumTimeRequired"}
{"question_id": "1705", "schema": {"name": "eatenApples", "params": [{"name": "apples", "type": "integer[]"}, {"type": "integer[]", "name": "days"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"apples": [1, 2, 3, 5, 2], "days": [3, 2, 1, 4, 2]}, "outputs": 7}, {"idx": 1, "inputs": {"apples": [3, 0, 0, 0, 0, 2], "days": [3, 0, 0, 0, 0, 2]}, "outputs": 5}], "title": "Maximum Number of Eaten Apples", "entry_fn_name": "eatenApples"}
{"question_id": "1704", "schema": {"name": "halvesAreAlike", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "book"}, "outputs": true}, {"idx": 1, "inputs": {"s": "textbook"}, "outputs": false}], "title": "Determine if String Halves Are Alike", "entry_fn_name": "halvesAreAlike"}
{"question_id": "1719", "schema": {"name": "checkWays", "params": [{"name": "pairs", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"pairs": [[1, 2], [2, 3]]}, "outputs": 1}, {"idx": 1, "inputs": {"pairs": [[1, 2], [2, 3], [1, 3]]}, "outputs": 2}, {"idx": 2, "inputs": {"pairs": [[1, 2], [2, 3], [2, 4], [1, 5]]}, "outputs": 0}], "title": "Number Of Ways To Reconstruct A Tree", "entry_fn_name": "checkWays"}
{"question_id": "1718", "schema": {"name": "constructDistancedSequence", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": [3, 1, 2, 3, 2]}, {"idx": 1, "inputs": {"n": 5}, "outputs": [5, 3, 1, 4, 3, 5, 2, 4, 2]}], "title": "Construct the Lexicographically Largest Valid Sequence", "entry_fn_name": "constructDistancedSequence"}
{"question_id": "1717", "schema": {"name": "maximumGain", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "x"}, {"type": "integer", "name": "y"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "cdbcbbaaabab", "x": 4, "y": 5}, "outputs": 19}, {"idx": 1, "inputs": {"s": "aabbaaxybbaabb", "x": 5, "y": 4}, "outputs": 20}], "title": "Maximum Score From Removing Substrings", "entry_fn_name": "maximumGain"}
{"question_id": "1716", "schema": {"name": "totalMoney", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": 10}, {"idx": 1, "inputs": {"n": 10}, "outputs": 37}, {"idx": 2, "inputs": {"n": 20}, "outputs": 96}], "title": "Calculate Money in Leetcode Bank", "entry_fn_name": "totalMoney"}
{"question_id": "1697", "schema": {"name": "distanceLimitedPathsExist", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edgeList"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "boolean[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "edgeList": [[0, 1, 2], [1, 2, 4], [2, 0, 8], [1, 0, 16]], "queries": [[0, 1, 2], [0, 2, 5]]}, "outputs": [false, true]}, {"idx": 1, "inputs": {"n": 5, "edgeList": [[0, 1, 10], [1, 2, 5], [2, 3, 9], [3, 4, 13]], "queries": [[0, 4, 14], [1, 4, 13]]}, "outputs": [true, false]}], "title": "Checking Existence of Edge Length Limited Paths", "entry_fn_name": "distanceLimitedPathsExist"}
{"question_id": "1695", "schema": {"name": "maximumUniqueSubarray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 2, 4, 5, 6]}, "outputs": 17}, {"idx": 1, "inputs": {"nums": [5, 2, 1, 2, 5, 2, 1, 2, 5]}, "outputs": 8}], "title": "Maximum Erasure Value", "entry_fn_name": "maximumUniqueSubarray"}
{"question_id": "1694", "schema": {"name": "reformatNumber", "params": [{"name": "number", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"number": "1-23-45 6"}, "outputs": "123-456"}, {"idx": 1, "inputs": {"number": "123 4-567"}, "outputs": "123-45-67"}, {"idx": 2, "inputs": {"number": "123 4-5678"}, "outputs": "123-456-78"}], "title": "Reformat Phone Number", "entry_fn_name": "reformatNumber"}
{"question_id": "1690", "schema": {"name": "stoneGameVII", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [5, 3, 1, 4, 2]}, "outputs": 6}, {"idx": 1, "inputs": {"stones": [7, 90, 5, 1, 100, 10, 10, 2]}, "outputs": 122}], "title": "Stone Game VII", "entry_fn_name": "stoneGameVII"}
{"question_id": "1689", "schema": {"name": "minPartitions", "params": [{"name": "n", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": "32"}, "outputs": 3}, {"idx": 1, "inputs": {"n": "82734"}, "outputs": 8}, {"idx": 2, "inputs": {"n": "27346209830709182346"}, "outputs": 9}], "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers", "entry_fn_name": "minPartitions"}
{"question_id": "1688", "schema": {"name": "numberOfMatches", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7}, "outputs": 6}, {"idx": 1, "inputs": {"n": 14}, "outputs": 13}], "title": "Count of Matches in Tournament", "entry_fn_name": "numberOfMatches"}
{"question_id": "1703", "schema": {"name": "minMoves", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 0, 0, 1, 0, 1], "k": 2}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 0, 0, 0, 0, 0, 1, 1], "k": 3}, "outputs": 5}, {"idx": 2, "inputs": {"nums": [1, 1, 0, 1], "k": 2}, "outputs": 0}], "title": "Minimum Adjacent Swaps for K Consecutive Ones", "entry_fn_name": "minMoves"}
{"question_id": "1702", "schema": {"name": "maximumBinaryString", "params": [{"name": "binary", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"binary": "000110"}, "outputs": "111011"}, {"idx": 1, "inputs": {"binary": "01"}, "outputs": "01"}], "title": "Maximum Binary String After Change", "entry_fn_name": "maximumBinaryString"}
{"question_id": "1701", "schema": {"name": "averageWaitingTime", "params": [{"name": "customers", "type": "integer[][]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"customers": [[1, 2], [2, 5], [4, 3]]}, "outputs": 5.0}, {"idx": 1, "inputs": {"customers": [[5, 2], [5, 4], [10, 3], [20, 1]]}, "outputs": 3.25}], "title": "Average Waiting Time", "entry_fn_name": "averageWaitingTime"}
{"question_id": "1700", "schema": {"name": "countStudents", "params": [{"name": "students", "type": "integer[]"}, {"type": "integer[]", "name": "sandwiches"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"students": [1, 1, 0, 0], "sandwiches": [0, 1, 0, 1]}, "outputs": 0}, {"idx": 1, "inputs": {"students": [1, 1, 1, 0, 0, 1], "sandwiches": [1, 0, 0, 0, 1, 1]}, "outputs": 3}], "title": "Number of Students Unable to Eat Lunch", "entry_fn_name": "countStudents"}
{"question_id": "1680", "schema": {"name": "concatenatedBinary", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 1}, {"idx": 1, "inputs": {"n": 3}, "outputs": 27}, {"idx": 2, "inputs": {"n": 12}, "outputs": 505379714}], "title": "Concatenation of Consecutive Binary Numbers", "entry_fn_name": "concatenatedBinary"}
{"question_id": "1681", "schema": {"name": "minimumIncompatibility", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 1, 4], "k": 2}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [6, 3, 8, 1, 3, 1, 2, 2], "k": 4}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [5, 3, 3, 6, 3, 3], "k": 3}, "outputs": -1}], "title": "Minimum Incompatibility", "entry_fn_name": "minimumIncompatibility"}
{"question_id": "1679", "schema": {"name": "maxOperations", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4], "k": 5}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [3, 1, 3, 4, 3], "k": 6}, "outputs": 1}], "title": "Max Number of K-Sum Pairs", "entry_fn_name": "maxOperations"}
{"question_id": "1678", "schema": {"name": "interpret", "params": [{"name": "command", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"command": "G()(al)"}, "outputs": "Goal"}, {"idx": 1, "inputs": {"command": "G()()()()(al)"}, "outputs": "Gooooal"}, {"idx": 2, "inputs": {"command": "(al)G(al)()()G"}, "outputs": "alGalooG"}], "title": "Goal Parser Interpretation", "entry_fn_name": "interpret"}
{"question_id": "1675", "schema": {"name": "minimumDeviation", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [4, 1, 5, 20, 3]}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [2, 10, 8]}, "outputs": 3}], "title": "Minimize Deviation in Array", "entry_fn_name": "minimumDeviation"}
{"question_id": "1674", "schema": {"name": "minMoves", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "limit"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 4, 3], "limit": 4}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 2, 2, 1], "limit": 2}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [1, 2, 1, 2], "limit": 2}, "outputs": 0}], "title": "Minimum Moves to Make Array Complementary", "entry_fn_name": "minMoves"}
{"question_id": "1673", "schema": {"name": "mostCompetitive", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 5, 2, 6], "k": 2}, "outputs": [2, 6]}, {"idx": 1, "inputs": {"nums": [2, 4, 3, 3, 5, 4, 9, 6], "k": 4}, "outputs": [2, 3, 3, 4]}], "title": "Find the Most Competitive Subsequence", "entry_fn_name": "mostCompetitive"}
{"question_id": "1672", "schema": {"name": "maximumWealth", "params": [{"name": "accounts", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"accounts": [[1, 2, 3], [3, 2, 1]]}, "outputs": 6}, {"idx": 1, "inputs": {"accounts": [[1, 5], [7, 3], [3, 5]]}, "outputs": 10}, {"idx": 2, "inputs": {"accounts": [[2, 8, 7], [7, 1, 3], [1, 9, 5]]}, "outputs": 17}], "title": "Richest Customer Wealth", "entry_fn_name": "maximumWealth"}
{"question_id": "1687", "schema": {"name": "boxDelivering", "params": [{"name": "boxes", "type": "integer[][]"}, {"type": "integer", "name": "portsCount"}, {"type": "integer", "name": "maxBoxes"}, {"type": "integer", "name": "maxWeight"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"boxes": [[1, 1], [2, 1], [1, 1]], "portsCount": 2, "maxBoxes": 3, "maxWeight": 3}, "outputs": 4}, {"idx": 1, "inputs": {"boxes": [[1, 2], [3, 3], [3, 1], [3, 1], [2, 4]], "portsCount": 3, "maxBoxes": 3, "maxWeight": 6}, "outputs": 6}, {"idx": 2, "inputs": {"boxes": [[1, 4], [1, 2], [2, 1], [2, 1], [3, 2], [3, 4]], "portsCount": 3, "maxBoxes": 6, "maxWeight": 7}, "outputs": 6}], "title": "Delivering Boxes from Storage to Ports", "entry_fn_name": "boxDelivering"}
{"question_id": "1686", "schema": {"name": "stoneGameVI", "params": [{"name": "aliceValues", "type": "integer[]"}, {"type": "integer[]", "name": "bobValues"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"aliceValues": [1, 3], "bobValues": [2, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"aliceValues": [1, 2], "bobValues": [3, 1]}, "outputs": 0}, {"idx": 2, "inputs": {"aliceValues": [2, 4, 3], "bobValues": [1, 6, 7]}, "outputs": -1}], "title": "Stone Game VI", "entry_fn_name": "stoneGameVI"}
{"question_id": "1685", "schema": {"name": "getSumAbsoluteDifferences", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 5]}, "outputs": [4, 3, 5]}, {"idx": 1, "inputs": {"nums": [1, 4, 6, 8, 10]}, "outputs": [24, 15, 13, 15, 21]}], "title": "Sum of Absolute Differences in a Sorted Array", "entry_fn_name": "getSumAbsoluteDifferences"}
{"question_id": "1684", "schema": {"name": "countConsistentStrings", "params": [{"name": "allowed", "type": "string"}, {"type": "string[]", "name": "words"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"allowed": "ab", "words": ["ad", "bd", "aaab", "baa", "badab"]}, "outputs": 2}, {"idx": 1, "inputs": {"allowed": "abc", "words": ["a", "b", "c", "ab", "ac", "bc", "abc"]}, "outputs": 7}, {"idx": 2, "inputs": {"allowed": "cad", "words": ["cc", "acd", "b", "ba", "bac", "bad", "ac", "d"]}, "outputs": 4}], "title": "Count the Number of Consistent Strings", "entry_fn_name": "countConsistentStrings"}
{"question_id": "1665", "schema": {"name": "minimumEffort", "params": [{"name": "tasks", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tasks": [[1, 2], [2, 4], [4, 8]]}, "outputs": 8}, {"idx": 1, "inputs": {"tasks": [[1, 3], [2, 4], [10, 11], [10, 12], [8, 9]]}, "outputs": 32}, {"idx": 2, "inputs": {"tasks": [[1, 7], [2, 8], [3, 9], [4, 10], [5, 11], [6, 12]]}, "outputs": 27}], "title": "Minimum Initial Energy to Finish Tasks", "entry_fn_name": "minimumEffort"}
{"question_id": "1664", "schema": {"name": "waysToMakeFair", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 6, 4]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 1, 1]}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [1, 2, 3]}, "outputs": 0}], "title": "Ways to Make a Fair Array", "entry_fn_name": "waysToMakeFair"}
{"question_id": "1663", "schema": {"name": "getSmallestString", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 27}, "outputs": "aay"}, {"idx": 1, "inputs": {"n": 5, "k": 73}, "outputs": "aaszz"}], "title": "Smallest String With A Given Numeric Value", "entry_fn_name": "getSmallestString"}
{"question_id": "1662", "schema": {"name": "arrayStringsAreEqual", "params": [{"name": "word1", "type": "string[]"}, {"type": "string[]", "name": "word2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"word1": ["ab", "c"], "word2": ["a", "bc"]}, "outputs": true}, {"idx": 1, "inputs": {"word1": ["a", "cb"], "word2": ["ab", "c"]}, "outputs": false}, {"idx": 2, "inputs": {"word2": ["abcddefg"]}, "outputs": true}], "title": "Check If Two String Arrays are Equivalent", "entry_fn_name": "arrayStringsAreEqual"}
{"question_id": "1659", "schema": {"name": "getMaxGridHappiness", "params": [{"name": "m", "type": "integer"}, {"type": "integer", "name": "n"}, {"type": "integer", "name": "introvertsCount"}, {"type": "integer", "name": "extrovertsCount"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 2, "n": 3, "introvertsCount": 1, "extrovertsCount": 2}, "outputs": 240}, {"idx": 1, "inputs": {"m": 3, "n": 1, "introvertsCount": 2, "extrovertsCount": 1}, "outputs": 260}, {"idx": 2, "inputs": {"m": 2, "n": 2, "introvertsCount": 4, "extrovertsCount": 0}, "outputs": 240}], "title": "Maximize Grid Happiness", "entry_fn_name": "getMaxGridHappiness"}
{"question_id": "1657", "schema": {"name": "closeStrings", "params": [{"name": "word1", "type": "string"}, {"type": "string", "name": "word2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "abc", "word2": "bca"}, "outputs": true}, {"idx": 1, "inputs": {"word1": "a", "word2": "aa"}, "outputs": false}, {"idx": 2, "inputs": {"word1": "cabbba", "word2": "abbccc"}, "outputs": true}], "title": "Determine if Two Strings Are Close", "entry_fn_name": "closeStrings"}
{"question_id": "1658", "schema": {"name": "minOperations", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "x"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 4, 2, 3], "x": 5}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [5, 6, 7, 8, 9], "x": 4}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [3, 2, 20, 1, 1, 3], "x": 10}, "outputs": 5}], "title": "Minimum Operations to Reduce X to Zero", "entry_fn_name": "minOperations"}
{"question_id": "1649", "schema": {"name": "createSortedArray", "params": [{"name": "instructions", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"instructions": [1, 5, 6, 2]}, "outputs": 1}, {"idx": 1, "inputs": {"instructions": [1, 2, 3, 6, 5, 4]}, "outputs": 3}, {"idx": 2, "inputs": {"instructions": [1, 3, 3, 3, 2, 4, 2, 1, 2]}, "outputs": 4}], "title": "Create Sorted Array through Instructions", "entry_fn_name": "createSortedArray"}
{"question_id": "1648", "schema": {"name": "maxProfit", "params": [{"name": "inventory", "type": "integer[]"}, {"type": "integer", "name": "orders"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"inventory": [2, 5], "orders": 4}, "outputs": 14}, {"idx": 1, "inputs": {"inventory": [3, 5], "orders": 6}, "outputs": 19}], "title": "Sell Diminishing-Valued Colored Balls", "entry_fn_name": "maxProfit"}
{"question_id": "1647", "schema": {"name": "minDeletions", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aab"}, "outputs": 0}, {"idx": 1, "inputs": {"s": "aaabbbcc"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "ceabaacb"}, "outputs": 2}], "title": "Minimum Deletions to Make Character Frequencies Unique", "entry_fn_name": "minDeletions"}
{"question_id": "1646", "schema": {"name": "getMaximumGenerated", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7}, "outputs": 3}, {"idx": 1, "inputs": {"n": 2}, "outputs": 1}, {"idx": 2, "inputs": {"n": 3}, "outputs": 2}], "title": "Get Maximum in Generated Array", "entry_fn_name": "getMaximumGenerated"}
{"question_id": "1671", "schema": {"name": "minimumMountainRemovals", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 1]}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [2, 1, 1, 5, 6, 2, 3, 1]}, "outputs": 3}], "title": "Minimum Number of Removals to Make Mountain Array", "entry_fn_name": "minimumMountainRemovals"}
{"question_id": "1669", "schema": {"name": "mergeInBetween", "params": [{"name": "list1", "type": "ListNode"}, {"type": "integer", "name": "a"}, {"type": "integer", "name": "b"}, {"type": "ListNode", "name": "list2"}], "return": {"type": "ListNode"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"list1": [0, 1, 2, 3, 4, 5], "a": 3, "b": 4, "list2": [1000000, 1000001, 1000002]}, "outputs": [0, 1, 2, 1000000, 1000001, 1000002, 5]}, {"idx": 1, "inputs": {"list1": [0, 1, 2, 3, 4, 5, 6], "a": 2, "b": 5, "list2": [1000000, 1000001, 1000002, 1000003, 1000004]}, "outputs": [0, 1, 1000000, 1000001, 1000002, 1000003, 1000004, 6]}], "title": "Merge In Between Linked Lists", "entry_fn_name": "mergeInBetween"}
{"question_id": "1668", "schema": {"name": "maxRepeating", "params": [{"name": "sequence", "type": "string"}, {"type": "string", "name": "word"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"sequence": "ababc", "word": "ab"}, "outputs": 2}, {"idx": 1, "inputs": {"sequence": "ababc", "word": "ba"}, "outputs": 1}, {"idx": 2, "inputs": {"sequence": "ababc", "word": "ac"}, "outputs": 0}], "title": "Maximum Repeating Substring", "entry_fn_name": "maxRepeating"}
{"question_id": "1642", "schema": {"name": "furthestBuilding", "params": [{"name": "heights", "type": "integer[]"}, {"type": "integer", "name": "bricks"}, {"type": "integer", "name": "ladders"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"heights": [4, 2, 7, 6, 9, 14, 12], "bricks": 5, "ladders": 1}, "outputs": 4}, {"idx": 1, "inputs": {"heights": [4, 12, 2, 7, 3, 18, 20, 3, 19], "bricks": 10, "ladders": 2}, "outputs": 7}, {"idx": 2, "inputs": {"heights": [14, 3, 19, 3], "bricks": 17, "ladders": 0}, "outputs": 3}], "title": "Furthest Building You Can Reach", "entry_fn_name": "furthestBuilding"}
{"question_id": "1641", "schema": {"name": "countVowelStrings", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 5}, {"idx": 1, "inputs": {"n": 2}, "outputs": 15}, {"idx": 2, "inputs": {"n": 33}, "outputs": 66045}], "title": "Count Sorted Vowel Strings", "entry_fn_name": "countVowelStrings"}
{"question_id": "1640", "schema": {"name": "canFormArray", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer[][]", "name": "pieces"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [15, 88], "pieces": [[88], [15]]}, "outputs": true}, {"idx": 1, "inputs": {"arr": [49, 18, 16], "pieces": [[16, 18, 49]]}, "outputs": false}, {"idx": 2, "inputs": {"arr": [91, 4, 64, 78], "pieces": [[78], [4, 64], [91]]}, "outputs": true}], "title": "Check Array Formation Through Concatenation", "entry_fn_name": "canFormArray"}
{"question_id": "1655", "schema": {"name": "canDistribute", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[]", "name": "quantity"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4], "quantity": [2]}, "outputs": false}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 3], "quantity": [2]}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 1, 2, 2], "quantity": [2, 2]}, "outputs": true}], "title": "Distribute Repeating Integers", "entry_fn_name": "canDistribute"}
{"question_id": "1654", "schema": {"name": "minimumJumps", "params": [{"name": "forbidden", "type": "integer[]"}, {"type": "integer", "name": "a"}, {"type": "integer", "name": "b"}, {"type": "integer", "name": "x"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"forbidden": [14, 4, 18, 1, 15], "a": 3, "b": 15, "x": 9}, "outputs": 3}, {"idx": 1, "inputs": {"forbidden": [8, 3, 16, 6, 12, 20], "a": 15, "b": 13, "x": 11}, "outputs": -1}, {"idx": 2, "inputs": {"forbidden": [1, 6, 2, 14, 5, 17, 4], "a": 16, "b": 9, "x": 7}, "outputs": 2}], "title": "Minimum Jumps to Reach Home", "entry_fn_name": "minimumJumps"}
{"question_id": "1653", "schema": {"name": "minimumDeletions", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aababbab"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "bbaaaaabb"}, "outputs": 2}], "title": "Minimum Deletions to Make String Balanced", "entry_fn_name": "minimumDeletions"}
{"question_id": "1652", "schema": {"name": "decrypt", "params": [{"name": "code", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"code": [5, 7, 1, 4], "k": 3}, "outputs": [12, 10, 16, 13]}, {"idx": 1, "inputs": {"code": [1, 2, 3, 4], "k": 0}, "outputs": [0, 0, 0, 0]}, {"idx": 2, "inputs": {"code": [2, 4, 9, 3], "k": -2}, "outputs": [12, 5, 6, 13]}], "title": "Defuse the Bomb", "entry_fn_name": "decrypt"}
{"question_id": "1631", "schema": {"name": "minimumEffortPath", "params": [{"name": "heights", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"heights": [[1, 2, 2], [3, 8, 2], [5, 3, 5]]}, "outputs": 2}, {"idx": 1, "inputs": {"heights": [[1, 2, 3], [3, 8, 4], [5, 3, 5]]}, "outputs": 1}, {"idx": 2, "inputs": {"heights": [[1, 2, 1, 1, 1], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1], [1, 1, 1, 2, 1]]}, "outputs": 0}], "title": "Path With Minimum Effort", "entry_fn_name": "minimumEffortPath"}
{"question_id": "1629", "schema": {"name": "slowestKey", "params": [{"type": "integer[]", "name": "releaseTimes"}, {"type": "string", "name": "keysPressed"}], "return": {"type": "character"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"releaseTimes": [9, 29, 49, 50], "keysPressed": "cbcd"}, "outputs": "c"}, {"idx": 1, "inputs": {"releaseTimes": [12, 23, 36, 46, 62], "keysPressed": "spuda"}, "outputs": "a"}], "title": "Slowest Key", "entry_fn_name": "slowestKey"}
{"question_id": "1626", "schema": {"name": "bestTeamScore", "params": [{"name": "scores", "type": "integer[]"}, {"type": "integer[]", "name": "ages"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"scores": [1, 3, 5, 10, 15], "ages": [1, 2, 3, 4, 5]}, "outputs": 34}, {"idx": 1, "inputs": {"scores": [4, 5, 6, 5], "ages": [2, 1, 2, 1]}, "outputs": 16}, {"idx": 2, "inputs": {"scores": [1, 2, 3, 5], "ages": [8, 9, 10, 1]}, "outputs": 6}], "title": "Best Team With No Conflicts", "entry_fn_name": "bestTeamScore"}
{"question_id": "1625", "schema": {"name": "findLexSmallestString", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "a"}, {"type": "integer", "name": "b"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "5525", "a": 9, "b": 2}, "outputs": "2050"}, {"idx": 1, "inputs": {"s": "74", "a": 5, "b": 1}, "outputs": "24"}, {"idx": 2, "inputs": {"s": "0011", "a": 4, "b": 2}, "outputs": "0011"}], "title": "Lexicographically Smallest String After Applying Operations", "entry_fn_name": "findLexSmallestString"}
{"question_id": "1624", "schema": {"name": "maxLengthBetweenEqualCharacters", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aa"}, "outputs": 0}, {"idx": 1, "inputs": {"s": "abca"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "cbzxy"}, "outputs": -1}], "title": "Largest Substring Between Two Equal Characters", "entry_fn_name": "maxLengthBetweenEqualCharacters"}
{"question_id": "1639", "schema": {"name": "numWays", "params": [{"name": "words", "type": "string[]"}, {"type": "string", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["acca", "bbbb", "caca"], "target": "aba"}, "outputs": 6}, {"idx": 1, "inputs": {"words": ["abba", "baab"], "target": "bab"}, "outputs": 4}], "title": "Number of Ways to Form a Target String Given a Dictionary", "entry_fn_name": "numWays"}
{"question_id": "1638", "schema": {"name": "countSubstrings", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "t"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aba", "t": "baba"}, "outputs": 6}, {"idx": 1, "inputs": {"s": "ab", "t": "bb"}, "outputs": 3}], "title": "Count Substrings That Differ by One Character", "entry_fn_name": "countSubstrings"}
{"question_id": "1637", "schema": {"name": "maxWidthOfVerticalArea", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[8, 7], [9, 9], [7, 4], [9, 7]]}, "outputs": 1}, {"idx": 1, "inputs": {"points": [[3, 1], [9, 0], [1, 0], [1, 4], [5, 3], [8, 8]]}, "outputs": 3}], "title": "Widest Vertical Area Between Two Points Containing No Points", "entry_fn_name": "maxWidthOfVerticalArea"}
{"question_id": "1636", "schema": {"name": "frequencySort", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 2, 2, 2, 3]}, "outputs": [3, 1, 1, 2, 2, 2]}, {"idx": 1, "inputs": {"nums": [2, 3, 1, 3, 2]}, "outputs": [1, 3, 3, 2, 2]}, {"idx": 2, "inputs": {"nums": [-1, 1, -6, 4, 5, -6, 1, 4, 1]}, "outputs": [5, -1, 4, 4, -6, -6, 1, 1, 1]}], "title": "Sort Array by Increasing Frequency", "entry_fn_name": "frequencySort"}
{"question_id": "1617", "schema": {"name": "countSubgraphsForEachDiameter", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "edges": [[1, 2], [2, 3], [2, 4]]}, "outputs": [3, 4, 0]}, {"idx": 1, "inputs": {"n": 2, "edges": [[1, 2]]}, "outputs": [1]}, {"idx": 2, "inputs": {"n": 3, "edges": [[1, 2], [2, 3]]}, "outputs": [2, 1]}], "title": "Count Subtrees With Max Distance Between Cities", "entry_fn_name": "countSubgraphsForEachDiameter"}
{"question_id": "1616", "schema": {"name": "checkPalindromeFormation", "params": [{"name": "a", "type": "string"}, {"type": "string", "name": "b"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"a": "x", "b": "y"}, "outputs": true}, {"idx": 1, "inputs": {"a": "xbdef", "b": "xecab"}, "outputs": false}, {"idx": 2, "inputs": {"a": "ulacfd", "b": "jizalu"}, "outputs": true}], "title": "Split Two Strings to Make Palindrome", "entry_fn_name": "checkPalindromeFormation"}
{"question_id": "1615", "schema": {"name": "maximalNetworkRank", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "roads"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "roads": [[0, 1], [0, 3], [1, 2], [1, 3]]}, "outputs": 4}, {"idx": 1, "inputs": {"n": 5, "roads": [[0, 1], [0, 3], [1, 2], [1, 3], [2, 3], [2, 4]]}, "outputs": 5}, {"idx": 2, "inputs": {"n": 8, "roads": [[0, 1], [1, 2], [2, 3], [2, 4], [5, 6], [5, 7]]}, "outputs": 5}], "title": "Maximal Network Rank", "entry_fn_name": "maximalNetworkRank"}
{"question_id": "1614", "schema": {"name": "maxDepth", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(1+(2*3)+(()/4))+1"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "(1)+((2))+((()))"}, "outputs": 3}], "title": "Maximum Nesting Depth of the Parentheses", "entry_fn_name": "maxDepth"}
{"question_id": "1610", "schema": {"name": "visiblePoints", "params": [{"name": "points", "type": "list<list<integer>>"}, {"type": "integer", "name": "angle"}, {"type": "list<integer>", "name": "location"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[2, 1], [2, 2], [3, 3]], "angle": 90, "location": [1, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"points": [[2, 1], [2, 2], [3, 4], [1, 1]], "angle": 90, "location": [1, 1]}, "outputs": 4}, {"idx": 2, "inputs": {"points": [[1, 0], [2, 1]], "angle": 13, "location": [1, 1]}, "outputs": 1}], "title": "Maximum Number of Visible Points", "entry_fn_name": "visiblePoints"}
{"question_id": "1611", "schema": {"name": "minimumOneBitOperations", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 2}, {"idx": 1, "inputs": {"n": 6}, "outputs": 4}], "title": "Minimum One Bit Operations to Make Integers Zero", "entry_fn_name": "minimumOneBitOperations"}
{"question_id": "1609", "schema": {"name": "isEvenOddTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 10, 4, 3, null, 7, 9, 12, 8, 6, null, null, 2]}, "outputs": true}, {"idx": 1, "inputs": {"root": [5, 4, 2, 3, 3, 7]}, "outputs": false}, {"idx": 2, "inputs": {"root": [5, 9, 1, 3, 5, 7]}, "outputs": false}], "title": "Even Odd Tree", "entry_fn_name": "isEvenOddTree"}
{"question_id": "1608", "schema": {"name": "specialArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 5]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [0, 0]}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [0, 4, 3, 0, 4]}, "outputs": 3}], "title": "Special Array With X Elements Greater Than or Equal X", "entry_fn_name": "specialArray"}
{"question_id": "1728", "schema": {"name": "canMouseWin", "params": [{"name": "grid", "type": "string[]"}, {"type": "integer", "name": "catJump"}, {"type": "integer", "name": "mouseJump"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"grid": ["####F", "#C...", "M...."], "catJump": 1, "mouseJump": 2}, "outputs": true}, {"idx": 1, "inputs": {"grid": ["M.C...F"], "catJump": 1, "mouseJump": 4}, "outputs": true}, {"idx": 2, "inputs": {"grid": ["M.C...F"], "catJump": 1, "mouseJump": 3}, "outputs": false}], "title": "Cat and Mouse II", "entry_fn_name": "canMouseWin"}
{"question_id": "1620", "schema": {"name": "bestCoordinate", "params": [{"name": "towers", "type": "integer[][]"}, {"type": "integer", "name": "radius"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"towers": [[1, 2, 5], [2, 1, 7], [3, 1, 9]], "radius": 2}, "outputs": [2, 1]}, {"idx": 1, "inputs": {"towers": [[23, 11, 21]], "radius": 9}, "outputs": [23, 11]}, {"idx": 2, "inputs": {"towers": [[1, 2, 13], [2, 1, 7], [0, 1, 9]], "radius": 2}, "outputs": [1, 2]}], "title": "Coordinate With Maximum Network Quality", "entry_fn_name": "bestCoordinate"}
{"question_id": "1621", "schema": {"name": "numberOfSets", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "k": 2}, "outputs": 5}, {"idx": 1, "inputs": {"n": 3, "k": 1}, "outputs": 3}, {"idx": 2, "inputs": {"n": 30, "k": 7}, "outputs": 796297179}], "title": "Number of Sets of K Non-Overlapping Line Segments", "entry_fn_name": "numberOfSets"}
{"question_id": "1601", "schema": {"name": "maximumRequests", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "requests"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "requests": [[0, 1], [1, 0], [0, 1], [1, 2], [2, 0], [3, 4]]}, "outputs": 5}, {"idx": 1, "inputs": {"n": 3, "requests": [[0, 0], [1, 2], [2, 1]]}, "outputs": 3}, {"idx": 2, "inputs": {"n": 4, "requests": [[0, 3], [3, 1], [1, 2], [2, 0]]}, "outputs": 4}], "title": "Maximum Number of Achievable Transfer Requests", "entry_fn_name": "maximumRequests"}
{"question_id": "1599", "schema": {"name": "minOperationsMaxProfit", "params": [{"name": "customers", "type": "integer[]"}, {"type": "integer", "name": "boardingCost"}, {"type": "integer", "name": "runningCost"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"customers": [8, 3], "boardingCost": 5, "runningCost": 6}, "outputs": 3}, {"idx": 1, "inputs": {"customers": [10, 9, 6], "boardingCost": 6, "runningCost": 4}, "outputs": 7}, {"idx": 2, "inputs": {"customers": [3, 4, 0, 5, 1], "boardingCost": 1, "runningCost": 92}, "outputs": -1}], "title": "Maximum Profit of Operating a Centennial Wheel", "entry_fn_name": "minOperationsMaxProfit"}
{"question_id": "1598", "schema": {"name": "minOperations", "params": [{"name": "logs", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"logs": ["d1/", "d2/", "../", "d21/", "./"]}, "outputs": 2}, {"idx": 1, "inputs": {"logs": ["d1/", "d2/", "./", "d3/", "../", "d31/"]}, "outputs": 3}, {"idx": 2, "inputs": {"logs": ["d1/", "../", "../", "../"]}, "outputs": 0}], "title": "Crawler Log Folder", "entry_fn_name": "minOperations"}
{"question_id": "1595", "schema": {"name": "connectTwoGroups", "params": [{"name": "cost", "type": "list<list<integer>>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"cost": [[15, 96], [36, 2]]}, "outputs": 17}, {"idx": 1, "inputs": {"cost": [[1, 3, 5], [4, 1, 1], [1, 5, 3]]}, "outputs": 4}, {"idx": 2, "inputs": {"cost": [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]}, "outputs": 10}], "title": "Minimum Cost to Connect Two Groups of Points", "entry_fn_name": "connectTwoGroups"}
{"question_id": "1594", "schema": {"name": "maxProductPath", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[-1, -2, -3], [-2, -3, -3], [-3, -3, -2]]}, "outputs": -1}, {"idx": 1, "inputs": {"grid": [[1, -2, 1], [1, -2, 1], [3, -4, 1]]}, "outputs": 8}, {"idx": 2, "inputs": {"grid": [[1, 3], [0, -4]]}, "outputs": 0}], "title": "Maximum Non Negative Product in a Matrix", "entry_fn_name": "maxProductPath"}
{"question_id": "1593", "schema": {"name": "maxUniqueSplit", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ababccc"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "aba"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "aa"}, "outputs": 1}], "title": "Split a String Into the Max Number of Unique Substrings", "entry_fn_name": "maxUniqueSplit"}
{"question_id": "1592", "schema": {"name": "reorderSpaces", "params": [{"name": "text", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"text": "  this   is  a sentence "}, "outputs": "this   is   a   sentence"}, {"idx": 1, "inputs": {"text": " practice   makes   perfect"}, "outputs": "practice   makes   perfect "}], "title": "Rearrange Spaces Between Words", "entry_fn_name": "reorderSpaces"}
{"question_id": "1605", "schema": {"name": "restoreMatrix", "params": [{"name": "rowSum", "type": "integer[]"}, {"type": "integer[]", "name": "colSum"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"rowSum": [3, 8], "colSum": [4, 7]}, "outputs": [[3, 0], [1, 7]]}, {"idx": 1, "inputs": {"rowSum": [5, 7, 10], "colSum": [8, 6, 8]}, "outputs": [[0, 5, 0], [6, 1, 0], [2, 0, 8]]}], "title": "Find Valid Matrix Given Row and Column Sums", "entry_fn_name": "restoreMatrix"}
{"question_id": "1606", "schema": {"name": "busiestServers", "params": [{"name": "k", "type": "integer"}, {"type": "integer[]", "name": "arrival"}, {"type": "integer[]", "name": "load"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"k": 3, "arrival": [1, 2, 3, 4, 5], "load": [5, 2, 3, 3, 3]}, "outputs": [1]}, {"idx": 1, "inputs": {"k": 3, "arrival": [1, 2, 3, 4], "load": [1, 2, 1, 2]}, "outputs": [0]}, {"idx": 2, "inputs": {"k": 3, "arrival": [1, 2, 3], "load": [10, 12, 11]}, "outputs": [0, 1, 2]}], "title": "Find Servers That Handled Most Number of Requests", "entry_fn_name": "busiestServers"}
{"question_id": "1604", "schema": {"name": "alertNames", "params": [{"name": "keyName", "type": "string[]"}, {"type": "string[]", "name": "keyTime"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"keyName": ["daniel", "daniel", "daniel", "luis", "luis", "luis", "luis"], "keyTime": ["10:00", "10:40", "11:00", "09:00", "11:00", "13:00", "15:00"]}, "outputs": ["daniel"]}, {"idx": 1, "inputs": {"keyName": ["alice", "alice", "alice", "bob", "bob", "bob", "bob"], "keyTime": ["12:01", "12:00", "18:00", "21:00", "21:20", "21:30", "23:00"]}, "outputs": ["bob"]}], "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period", "entry_fn_name": "alertNames"}
{"question_id": "1585", "schema": {"name": "isTransformable", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "t"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "84532", "t": "34852"}, "outputs": true}, {"idx": 1, "inputs": {"s": "34521", "t": "23415"}, "outputs": true}, {"idx": 2, "inputs": {"s": "12345", "t": "12435"}, "outputs": false}], "title": "Check If String Is Transformable With Substring Sort Operations", "entry_fn_name": "isTransformable"}
{"question_id": "1584", "schema": {"name": "minCostConnectPoints", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[0, 0], [2, 2], [3, 10], [5, 2], [7, 0]]}, "outputs": 20}, {"idx": 1, "inputs": {"points": [[3, 12], [-2, 5], [-4, 1]]}, "outputs": 18}], "title": "Min Cost to Connect All Points", "entry_fn_name": "minCostConnectPoints"}
{"question_id": "1583", "schema": {"name": "unhappyFriends", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "preferences"}, {"type": "integer[][]", "name": "pairs"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "preferences": [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], "pairs": [[0, 1], [2, 3]]}, "outputs": 2}, {"idx": 1, "inputs": {"n": 2, "preferences": [[1], [0]], "pairs": [[1, 0]]}, "outputs": 0}, {"idx": 2, "inputs": {"n": 4, "preferences": [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], "pairs": [[1, 3], [0, 2]]}, "outputs": 4}], "title": "Count Unhappy Friends", "entry_fn_name": "unhappyFriends"}
{"question_id": "1582", "schema": {"name": "numSpecial", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 0, 0], [0, 0, 1], [1, 0, 0]]}, "outputs": 1}, {"idx": 1, "inputs": {"mat": [[1, 0, 0], [0, 1, 0], [0, 0, 1]]}, "outputs": 3}], "title": "Special Positions in a Binary Matrix", "entry_fn_name": "numSpecial"}
{"question_id": "1578", "schema": {"name": "minCost", "params": [{"name": "colors", "type": "string"}, {"type": "integer[]", "name": "neededTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"colors": "abaac", "neededTime": [1, 2, 3, 4, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"colors": "abc", "neededTime": [1, 2, 3]}, "outputs": 0}, {"idx": 2, "inputs": {"colors": "aabaa", "neededTime": [1, 2, 3, 4, 1]}, "outputs": 2}], "title": "Minimum Time to Make Rope Colorful", "entry_fn_name": "minCost"}
{"question_id": "1577", "schema": {"name": "numTriplets", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [7, 4], "nums2": [5, 2, 8, 9]}, "outputs": 1}, {"idx": 1, "inputs": {"nums1": [1, 1], "nums2": [1, 1, 1]}, "outputs": 9}, {"idx": 2, "inputs": {"nums1": [7, 7, 8, 3], "nums2": [1, 2, 9, 7]}, "outputs": 2}], "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers", "entry_fn_name": "numTriplets"}
{"question_id": "1576", "schema": {"name": "modifyString", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"s": "?zs"}, "outputs": "azs"}, {"idx": 1, "inputs": {"s": "ubv?w"}, "outputs": "ubvaw"}], "title": "Replace All ?'s to Avoid Consecutive Repeating Characters", "entry_fn_name": "modifyString"}
{"question_id": "1591", "schema": {"name": "isPrintable", "params": [{"name": "targetGrid", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"targetGrid": [[1, 1, 1, 1], [1, 2, 2, 1], [1, 2, 2, 1], [1, 1, 1, 1]]}, "outputs": true}, {"idx": 1, "inputs": {"targetGrid": [[1, 1, 1, 1], [1, 1, 3, 3], [1, 1, 3, 4], [5, 5, 1, 4]]}, "outputs": true}, {"idx": 2, "inputs": {"targetGrid": [[1, 2, 1], [2, 1, 2], [1, 2, 1]]}, "outputs": false}], "title": "Strange Printer II", "entry_fn_name": "isPrintable"}
{"question_id": "1589", "schema": {"name": "maxSumRangeQuery", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[][]", "name": "requests"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5], "requests": [[1, 3], [0, 1]]}, "outputs": 19}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 5, 6], "requests": [[0, 1]]}, "outputs": 11}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 5, 10], "requests": [[0, 2], [1, 3], [1, 1]]}, "outputs": 47}], "title": "Maximum Sum Obtained of Any Permutation", "entry_fn_name": "maxSumRangeQuery"}
{"question_id": "1590", "schema": {"name": "minSubarray", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "p"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 4, 2], "p": 6}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [6, 3, 5, 2], "p": 9}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [1, 2, 3], "p": 3}, "outputs": 0}], "title": "Make Sum Divisible by P", "entry_fn_name": "minSubarray"}
{"question_id": "1569", "schema": {"name": "numOfWays", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [3, 4, 5, 1, 2]}, "outputs": 5}, {"idx": 2, "inputs": {"nums": [1, 2, 3]}, "outputs": 0}], "title": "Number of Ways to Reorder Array to Get Same BST", "entry_fn_name": "numOfWays"}
{"question_id": "1568", "schema": {"name": "minDays", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[1, 1]]}, "outputs": 2}], "title": "Minimum Number of Days to Disconnect Island", "entry_fn_name": "minDays"}
{"question_id": "1567", "schema": {"name": "getMaxLen", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, -2, -3, 4]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [0, 1, -2, -3, -4]}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [-1, -2, -3, 0, 1]}, "outputs": 2}], "title": "Maximum Length of Subarray With Positive Product", "entry_fn_name": "getMaxLen"}
{"question_id": "1566", "schema": {"name": "containsPattern", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "m"}, {"type": "integer", "name": "k"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 4, 4, 4, 4], "m": 1, "k": 3}, "outputs": true}, {"idx": 1, "inputs": {"arr": [1, 2, 1, 2, 1, 1, 1, 3], "m": 2, "k": 2}, "outputs": true}, {"idx": 2, "inputs": {"arr": [1, 2, 1, 2, 1, 3], "m": 2, "k": 3}, "outputs": false}], "title": "Detect Pattern of Length M Repeated K or More Times", "entry_fn_name": "containsPattern"}
{"question_id": "1563", "schema": {"name": "stoneGameV", "params": [{"name": "stoneValue", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stoneValue": [6, 2, 3, 4, 5, 5]}, "outputs": 18}, {"idx": 1, "inputs": {"stoneValue": [7, 7, 7, 7, 7, 7, 7]}, "outputs": 28}, {"idx": 2, "inputs": {"stoneValue": [4]}, "outputs": 0}], "title": "Stone Game V", "entry_fn_name": "stoneGameV"}
{"question_id": "1562", "schema": {"name": "findLatestStep", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "m"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 5, 1, 2, 4], "m": 1}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [3, 1, 5, 4, 2], "m": 2}, "outputs": -1}], "title": "Find Latest Group of Size M", "entry_fn_name": "findLatestStep"}
{"question_id": "1561", "schema": {"name": "maxCoins", "params": [{"name": "piles", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"piles": [2, 4, 1, 2, 7, 8]}, "outputs": 9}, {"idx": 1, "inputs": {"piles": [2, 4, 5]}, "outputs": 4}, {"idx": 2, "inputs": {"piles": [9, 8, 7, 6, 5, 1, 2, 3, 4]}, "outputs": 18}], "title": "Maximum Number of Coins You Can Get", "entry_fn_name": "maxCoins"}
{"question_id": "1560", "schema": {"name": "mostVisited", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "rounds"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "rounds": [1, 3, 1, 2]}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"n": 2, "rounds": [2, 1, 2, 1, 2, 1, 2, 1, 2]}, "outputs": [2]}, {"idx": 2, "inputs": {"n": 7, "rounds": [1, 3, 5, 7]}, "outputs": [1, 2, 3, 4, 5, 6, 7]}], "title": "Most Visited Sector in  a Circular Track", "entry_fn_name": "mostVisited"}
{"question_id": "1575", "schema": {"name": "countRoutes", "params": [{"name": "locations", "type": "integer[]"}, {"type": "integer", "name": "start"}, {"type": "integer", "name": "finish"}, {"type": "integer", "name": "fuel"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"locations": [2, 3, 6, 8, 4], "start": 1, "finish": 3, "fuel": 5}, "outputs": 4}, {"idx": 1, "inputs": {"locations": [4, 3, 1], "start": 1, "finish": 0, "fuel": 6}, "outputs": 5}, {"idx": 2, "inputs": {"locations": [5, 2, 1], "start": 0, "finish": 2, "fuel": 3}, "outputs": 0}], "title": "Count All Possible Routes", "entry_fn_name": "countRoutes"}
{"question_id": "1574", "schema": {"name": "findLengthOfShortestSubarray", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 10, 4, 2, 3, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"arr": [5, 4, 3, 2, 1]}, "outputs": 4}, {"idx": 2, "inputs": {"arr": [1, 2, 3]}, "outputs": 0}], "title": "Shortest Subarray to be Removed to Make Array Sorted", "entry_fn_name": "findLengthOfShortestSubarray"}
{"question_id": "1573", "schema": {"name": "numWays", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "10101"}, "outputs": 4}, {"idx": 1, "inputs": {"s": "1001"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "0000"}, "outputs": 3}], "title": "Number of Ways to Split a String", "entry_fn_name": "numWays"}
{"question_id": "1572", "schema": {"name": "diagonalSum", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": 25}, {"idx": 1, "inputs": {"mat": [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]}, "outputs": 8}, {"idx": 2, "inputs": {"mat": [[5]]}, "outputs": 5}], "title": "Matrix Diagonal Sum", "entry_fn_name": "diagonalSum"}
{"question_id": "1553", "schema": {"name": "minDays", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10}, "outputs": 4}, {"idx": 1, "inputs": {"n": 6}, "outputs": 3}], "title": "Minimum Number of Days to Eat N Oranges", "entry_fn_name": "minDays"}
{"question_id": "1552", "schema": {"name": "maxDistance", "params": [{"name": "position", "type": "integer[]"}, {"type": "integer", "name": "m"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"position": [1, 2, 3, 4, 7], "m": 3}, "outputs": 3}, {"idx": 1, "inputs": {"position": [5, 4, 3, 2, 1, 1000000000], "m": 2}, "outputs": 999999999}], "title": "Magnetic Force Between Two Balls", "entry_fn_name": "maxDistance"}
{"question_id": "1551", "schema": {"name": "minOperations", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 2}, {"idx": 1, "inputs": {"n": 6}, "outputs": 9}], "title": "Minimum Operations to Make Array Equal", "entry_fn_name": "minOperations"}
{"question_id": "1547", "schema": {"name": "minCost", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "cuts"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7, "cuts": [1, 3, 4, 5]}, "outputs": 16}, {"idx": 1, "inputs": {"n": 9, "cuts": [5, 6, 1, 4, 2]}, "outputs": 22}], "title": "Minimum Cost to Cut a Stick", "entry_fn_name": "minCost"}
{"question_id": "1542", "schema": {"name": "longestAwesome", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "3242415"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "12345678"}, "outputs": 1}, {"idx": 2, "inputs": {"s": "213123"}, "outputs": 6}], "title": "Find Longest Awesome Substring", "entry_fn_name": "longestAwesome"}
{"question_id": "1545", "schema": {"name": "findKthBit", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "character"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 1}, "outputs": "0"}, {"idx": 1, "inputs": {"n": 4, "k": 11}, "outputs": "1"}], "title": "Find Kth Bit in Nth Binary String", "entry_fn_name": "findKthBit"}
{"question_id": "1544", "schema": {"name": "makeGood", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leEeetcode"}, "outputs": "leetcode"}, {"idx": 1, "inputs": {"s": "abBAcC"}, "outputs": ""}, {"idx": 2, "inputs": {"s": "s"}, "outputs": "s"}], "title": "Make The String Great", "entry_fn_name": "makeGood"}
{"question_id": "1559", "schema": {"name": "containsCycle", "params": [{"name": "grid", "type": "character[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [["a", "a", "a", "a"], ["a", "b", "b", "a"], ["a", "b", "b", "a"], ["a", "a", "a", "a"]]}, "outputs": true}, {"idx": 1, "inputs": {"grid": [["c", "c", "c", "a"], ["c", "d", "c", "c"], ["c", "c", "e", "c"], ["f", "c", "c", "c"]]}, "outputs": true}, {"idx": 2, "inputs": {"grid": [["a", "b", "b"], ["b", "z", "b"], ["b", "b", "a"]]}, "outputs": false}], "title": "Detect Cycles in 2D Grid", "entry_fn_name": "containsCycle"}
{"question_id": "1558", "schema": {"name": "minOperations", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 5]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [2, 2]}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [4, 2, 5]}, "outputs": 6}], "title": "Minimum Numbers of Function Calls to Make Target Array", "entry_fn_name": "minOperations"}
{"question_id": "1556", "schema": {"name": "thousandSeparator", "params": [{"name": "n", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 987}, "outputs": "987"}, {"idx": 1, "inputs": {"n": 1234}, "outputs": "1.234"}], "title": "Thousand Separator", "entry_fn_name": "thousandSeparator"}
{"question_id": "1537", "schema": {"name": "maxSum", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [2, 4, 5, 8, 10], "nums2": [4, 6, 8, 9]}, "outputs": 30}, {"idx": 1, "inputs": {"nums1": [1, 3, 5, 7, 9], "nums2": [3, 5, 100]}, "outputs": 109}, {"idx": 2, "inputs": {"nums1": [1, 2, 3, 4, 5], "nums2": [6, 7, 8, 9, 10]}, "outputs": 40}], "title": "Get the Maximum Score", "entry_fn_name": "maxSum"}
{"question_id": "1536", "schema": {"name": "minSwaps", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 0, 1], [1, 1, 0], [1, 0, 0]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0]]}, "outputs": -1}, {"idx": 2, "inputs": {"grid": [[1, 0, 0], [1, 1, 0], [1, 1, 1]]}, "outputs": 0}], "title": "Minimum Swaps to Arrange a Binary Grid", "entry_fn_name": "minSwaps"}
{"question_id": "1535", "schema": {"name": "getWinner", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 1, 3, 5, 4, 6, 7], "k": 2}, "outputs": 5}, {"idx": 1, "inputs": {"arr": [3, 2, 1], "k": 10}, "outputs": 3}], "title": "Find the Winner of an Array Game", "entry_fn_name": "getWinner"}
{"question_id": "1534", "schema": {"name": "countGoodTriplets", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "a"}, {"type": "integer", "name": "b"}, {"type": "integer", "name": "c"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 0, 1, 1, 9, 7], "a": 7, "b": 2, "c": 3}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [1, 1, 2, 2, 3], "a": 0, "b": 0, "c": 1}, "outputs": 0}], "title": "Count Good Triplets", "entry_fn_name": "countGoodTriplets"}
{"question_id": "1530", "schema": {"name": "countPairs", "params": [{"name": "root", "type": "TreeNode"}, {"type": "integer", "name": "distance"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, null, 4], "distance": 3}, "outputs": 1}, {"idx": 1, "inputs": {"root": [1, 2, 3, 4, 5, 6, 7], "distance": 3}, "outputs": 2}, {"idx": 2, "inputs": {"root": [7, 1, 4, 6, null, 5, 3, null, null, null, null, null, 2], "distance": 3}, "outputs": 1}], "title": "Number of Good Leaf Nodes Pairs", "entry_fn_name": "countPairs"}
{"question_id": "1529", "schema": {"name": "minFlips", "params": [{"name": "target", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": "10111"}, "outputs": 3}, {"idx": 1, "inputs": {"target": "101"}, "outputs": 3}, {"idx": 2, "inputs": {"target": "00000"}, "outputs": 0}], "title": "Minimum Suffix Flips", "entry_fn_name": "minFlips"}
{"question_id": "1546", "schema": {"name": "maxNonOverlapping", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1, 1, 1], "target": 2}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [-1, 3, 5, 1, 4, 2, -9], "target": 6}, "outputs": 2}], "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target", "entry_fn_name": "maxNonOverlapping"}
{"question_id": "1541", "schema": {"name": "minInsertions", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(()))"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "())"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "))())("}, "outputs": 3}], "title": "Minimum Insertions to Balance a Parentheses String", "entry_fn_name": "minInsertions"}
{"question_id": "1539", "schema": {"name": "findKthPositive", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 3, 4, 7, 11], "k": 5}, "outputs": 9}, {"idx": 1, "inputs": {"arr": [1, 2, 3, 4], "k": 2}, "outputs": 6}], "title": "Kth Missing Positive Number", "entry_fn_name": "findKthPositive"}
{"question_id": "1521", "schema": {"name": "closestToTarget", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [9, 12, 3, 7, 15], "target": 5}, "outputs": 2}, {"idx": 1, "inputs": {"arr": [1000000, 1000000, 1000000], "target": 1}, "outputs": 999999}, {"idx": 2, "inputs": {"arr": [1, 2, 4, 8, 16], "target": 0}, "outputs": 0}], "title": "Find a Value of a Mysterious Function Closest to Target", "entry_fn_name": "closestToTarget"}
{"question_id": "1519", "schema": {"name": "countSubTrees", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "string", "name": "labels"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7, "edges": [[0, 1], [0, 2], [1, 4], [1, 5], [2, 3], [2, 6]], "labels": "abaedcd"}, "outputs": [2, 1, 1, 1, 1, 1, 1]}, {"idx": 1, "inputs": {"n": 4, "edges": [[0, 1], [1, 2], [0, 3]], "labels": "bbbb"}, "outputs": [4, 2, 1, 1]}, {"idx": 2, "inputs": {"n": 5, "edges": [[0, 1], [0, 2], [1, 3], [0, 4]], "labels": "aabab"}, "outputs": [3, 2, 1, 1, 1]}], "title": "Number of Nodes in the Sub-Tree With the Same Label", "entry_fn_name": "countSubTrees"}
{"question_id": "1518", "schema": {"name": "numWaterBottles", "params": [{"name": "numBottles", "type": "integer"}, {"type": "integer", "name": "numExchange"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"numBottles": 9, "numExchange": 3}, "outputs": 13}, {"idx": 1, "inputs": {"numBottles": 15, "numExchange": 4}, "outputs": 19}], "title": "Water Bottles", "entry_fn_name": "numWaterBottles"}
{"question_id": "1515", "schema": {"name": "getMinDistSum", "params": [{"name": "positions", "type": "integer[][]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"positions": [[0, 1], [1, 0], [1, 2], [2, 1]]}, "outputs": 4.0}, {"idx": 1, "inputs": {"positions": [[1, 1], [3, 3]]}, "outputs": 2.82843}], "title": "Best Position for a Service Centre", "entry_fn_name": "getMinDistSum"}
{"question_id": "1513", "schema": {"name": "numSub", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "0110111"}, "outputs": 9}, {"idx": 1, "inputs": {"s": "101"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "111111"}, "outputs": 21}], "title": "Number of Substrings With Only 1s", "entry_fn_name": "numSub"}
{"question_id": "1512", "schema": {"name": "numIdenticalPairs", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1, 1, 3]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [1, 1, 1, 1]}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [1, 2, 3]}, "outputs": 0}], "title": "Number of Good Pairs", "entry_fn_name": "numIdenticalPairs"}
{"question_id": "1526", "schema": {"name": "minNumberOperations", "params": [{"name": "target", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": [1, 2, 3, 2, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"target": [3, 1, 1, 2]}, "outputs": 4}, {"idx": 2, "inputs": {"target": [3, 1, 5, 4, 2]}, "outputs": 7}], "title": "Minimum Number of Increments on Subarrays to Form a Target Array", "entry_fn_name": "minNumberOperations"}
{"question_id": "1525", "schema": {"name": "numSplits", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aacaba"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "abcd"}, "outputs": 1}], "title": "Number of Good Ways to Split a String", "entry_fn_name": "numSplits"}
{"question_id": "1524", "schema": {"name": "numOfSubarrays", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 3, 5]}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [2, 4, 6]}, "outputs": 0}, {"idx": 2, "inputs": {"arr": [1, 2, 3, 4, 5, 6, 7]}, "outputs": 16}], "title": "Number of Sub-arrays With Odd Sum", "entry_fn_name": "numOfSubarrays"}
{"question_id": "1505", "schema": {"name": "minInteger", "params": [{"name": "num", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": "4321", "k": 4}, "outputs": "1342"}, {"idx": 1, "inputs": {"num": "100", "k": 1}, "outputs": "010"}, {"idx": 2, "inputs": {"num": "36789", "k": 1000}, "outputs": "36789"}], "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits", "entry_fn_name": "minInteger"}
{"question_id": "1504", "schema": {"name": "numSubmat", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 0, 1], [1, 1, 0], [1, 1, 0]]}, "outputs": 13}, {"idx": 1, "inputs": {"mat": [[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0]]}, "outputs": 24}], "title": "Count Submatrices With All Ones", "entry_fn_name": "numSubmat"}
{"question_id": "1503", "schema": {"name": "getLastMoment", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "left"}, {"type": "integer[]", "name": "right"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "left": [4, 3], "right": [0, 1]}, "outputs": 4}, {"idx": 1, "inputs": {"n": 7, "left": [], "right": [0, 1, 2, 3, 4, 5, 6, 7]}, "outputs": 7}, {"idx": 2, "inputs": {"n": 7, "left": [0, 1, 2, 3, 4, 5, 6, 7], "right": []}, "outputs": 7}], "title": "Last Moment Before All Ants Fall Out of a Plank", "entry_fn_name": "getLastMoment"}
{"question_id": "1502", "schema": {"name": "canMakeArithmeticProgression", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 5, 1]}, "outputs": true}, {"idx": 1, "inputs": {"arr": [1, 2, 4]}, "outputs": false}], "title": "Can Make Arithmetic Progression From Sequence", "entry_fn_name": "canMakeArithmeticProgression"}
{"question_id": "1499", "schema": {"name": "findMaxValueOfEquation", "params": [{"name": "points", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 3], [2, 0], [5, 10], [6, -10]], "k": 1}, "outputs": 4}, {"idx": 1, "inputs": {"points": [[0, 0], [3, 0], [9, 2]], "k": 3}, "outputs": 3}], "title": "Max Value of Equation", "entry_fn_name": "findMaxValueOfEquation"}
{"question_id": "1498", "schema": {"name": "numSubseq", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 5, 6, 7], "target": 9}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [3, 3, 6, 8], "target": 10}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [2, 3, 3, 4, 6, 7], "target": 12}, "outputs": 61}], "title": "Number of Subsequences That Satisfy the Given Sum Condition", "entry_fn_name": "numSubseq"}
{"question_id": "1497", "schema": {"name": "canArrange", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 4, 5, 10, 6, 7, 8, 9], "k": 5}, "outputs": true}, {"idx": 1, "inputs": {"arr": [1, 2, 3, 4, 5, 6], "k": 7}, "outputs": true}, {"idx": 2, "inputs": {"arr": [1, 2, 3, 4, 5, 6], "k": 10}, "outputs": false}], "title": "Check If Array Pairs Are Divisible by k", "entry_fn_name": "canArrange"}
{"question_id": "1496", "schema": {"name": "isPathCrossing", "params": [{"name": "path", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"path": "NES"}, "outputs": false}, {"idx": 1, "inputs": {"path": "NESWW"}, "outputs": true}], "title": "Path Crossing", "entry_fn_name": "isPathCrossing"}
{"question_id": "1510", "schema": {"name": "winnerSquareGame", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": true}, {"idx": 1, "inputs": {"n": 2}, "outputs": false}, {"idx": 2, "inputs": {"n": 4}, "outputs": true}], "title": "Stone Game IV", "entry_fn_name": "winnerSquareGame"}
{"question_id": "1509", "schema": {"name": "minDifference", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 3, 2, 4]}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [1, 5, 0, 10, 14]}, "outputs": 1}], "title": "Minimum Difference Between Largest and Smallest Value in Three Moves", "entry_fn_name": "minDifference"}
{"question_id": "1508", "schema": {"name": "rangeSum", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "n"}, {"type": "integer", "name": "left"}, {"type": "integer", "name": "right"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4], "n": 4, "left": 1, "right": 5}, "outputs": 13}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4], "n": 4, "left": 3, "right": 4}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4], "n": 4, "left": 1, "right": 10}, "outputs": 50}], "title": "Range Sum of Sorted Subarray Sums", "entry_fn_name": "rangeSum"}
{"question_id": "1489", "schema": {"name": "findCriticalAndPseudoCriticalEdges", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "edges": [[0, 1, 1], [1, 2, 1], [2, 3, 2], [0, 3, 2], [0, 4, 3], [3, 4, 3], [1, 4, 6]]}, "outputs": [[0, 1], [2, 3, 4, 5]]}, {"idx": 1, "inputs": {"n": 4, "edges": [[0, 1, 1], [1, 2, 1], [2, 3, 1], [0, 3, 1]]}, "outputs": [[], [0, 1, 2, 3]]}], "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "entry_fn_name": "findCriticalAndPseudoCriticalEdges"}
{"question_id": "1488", "schema": {"name": "avoidFlood", "params": [{"name": "rains", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"rains": [1, 2, 3, 4]}, "outputs": [-1, -1, -1, -1]}, {"idx": 1, "inputs": {"rains": [1, 2, 0, 0, 2, 1]}, "outputs": [-1, -1, 2, 1, -1, -1]}, {"idx": 2, "inputs": {"rains": [1, 2, 0, 1, 2]}, "outputs": []}], "title": "Avoid Flood in The City", "entry_fn_name": "avoidFlood"}
{"question_id": "1487", "schema": {"name": "getFolderNames", "params": [{"name": "names", "type": "string[]"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"names": ["pes", "fifa", "gta", "pes(2019)"]}, "outputs": ["pes", "fifa", "gta", "pes(2019)"]}, {"idx": 1, "inputs": {"names": ["gta", "gta(1)", "gta", "avalon"]}, "outputs": ["gta", "gta(1)", "gta(2)", "avalon"]}, {"idx": 2, "inputs": {"names": ["onepiece", "onepiece(1)", "onepiece(2)", "onepiece(3)", "onepiece"]}, "outputs": ["onepiece", "onepiece(1)", "onepiece(2)", "onepiece(3)", "onepiece(4)"]}], "title": "Making File Names Unique", "entry_fn_name": "getFolderNames"}
{"question_id": "1486", "schema": {"name": "xorOperation", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "start"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "start": 0}, "outputs": 8}, {"idx": 1, "inputs": {"n": 4, "start": 3}, "outputs": 8}], "title": "XOR Operation in an Array", "entry_fn_name": "xorOperation"}
{"question_id": "1482", "schema": {"name": "minDays", "params": [{"name": "bloomDay", "type": "integer[]"}, {"type": "integer", "name": "m"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"bloomDay": [1, 10, 3, 10, 2], "m": 3, "k": 1}, "outputs": 3}, {"idx": 1, "inputs": {"bloomDay": [1, 10, 3, 10, 2], "m": 3, "k": 2}, "outputs": -1}, {"idx": 2, "inputs": {"bloomDay": [7, 7, 7, 7, 12, 7, 7], "m": 2, "k": 3}, "outputs": 12}], "title": "Minimum Number of Days to Make m Bouquets", "entry_fn_name": "minDays"}
{"question_id": "1481", "schema": {"name": "findLeastNumOfUniqueInts", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [5, 5, 4], "k": 1}, "outputs": 1}, {"idx": 1, "inputs": {"arr": [4, 3, 1, 1, 3, 3, 2], "k": 3}, "outputs": 2}], "title": "Least Number of Unique Integers after K Removals", "entry_fn_name": "findLeastNumOfUniqueInts"}
{"question_id": "1480", "schema": {"name": "runningSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": [1, 3, 6, 10]}, {"idx": 1, "inputs": {"nums": [1, 1, 1, 1, 1]}, "outputs": [1, 2, 3, 4, 5]}, {"idx": 2, "inputs": {"nums": [3, 1, 2, 10, 1]}, "outputs": [3, 4, 6, 16, 17]}], "title": "Running Sum of 1d Array", "entry_fn_name": "runningSum"}
{"question_id": "1494", "schema": {"name": "minNumberOfSemesters", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "relations"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "dependencies": [[2, 1], [3, 1], [1, 4]], "k": 2}, "outputs": 3}, {"idx": 1, "inputs": {"n": 5, "dependencies": [[2, 1], [3, 1], [4, 1], [1, 5]], "k": 2}, "outputs": 4}, {"idx": 2, "inputs": {"n": 11, "dependencies": [], "k": 2}, "outputs": 6}], "title": "Parallel Courses II", "entry_fn_name": "minNumberOfSemesters"}
{"question_id": "1493", "schema": {"name": "longestSubarray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 0, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [0, 1, 1, 1, 0, 1, 1, 0, 1]}, "outputs": 5}, {"idx": 2, "inputs": {"nums": [1, 1, 1]}, "outputs": 2}], "title": "Longest Subarray of 1's After Deleting One Element", "entry_fn_name": "longestSubarray"}
{"question_id": "1492", "schema": {"name": "kthFactor", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 12, "k": 3}, "outputs": 3}, {"idx": 1, "inputs": {"n": 7, "k": 2}, "outputs": 7}, {"idx": 2, "inputs": {"n": 4, "k": 4}, "outputs": -1}], "title": "The kth Factor of n", "entry_fn_name": "kthFactor"}
{"question_id": "1491", "schema": {"name": "average", "params": [{"name": "salary", "type": "integer[]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"salary": [4000, 3000, 1000, 2000]}, "outputs": 2500.0}, {"idx": 1, "inputs": {"salary": [1000, 2000, 3000]}, "outputs": 2000.0}], "title": "Average Salary Excluding the Minimum and Maximum Salary", "entry_fn_name": "average"}
{"question_id": "1473", "schema": {"name": "minCost", "params": [{"name": "houses", "type": "integer[]"}, {"type": "integer[][]", "name": "cost"}, {"type": "integer", "name": "m"}, {"type": "integer", "name": "n"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"houses": [0, 0, 0, 0, 0], "cost": [[1, 10], [10, 1], [10, 1], [1, 10], [5, 1]], "m": 5, "n": 2, "target": 3}, "outputs": 9}, {"idx": 1, "inputs": {"houses": [0, 2, 1, 2, 0], "cost": [[1, 10], [10, 1], [10, 1], [1, 10], [5, 1]], "m": 5, "n": 2, "target": 3}, "outputs": 11}, {"idx": 2, "inputs": {"houses": [3, 1, 2, 3], "cost": [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], "m": 4, "n": 3, "target": 3}, "outputs": -1}], "title": "Paint House III", "entry_fn_name": "minCost"}
{"question_id": "1471", "schema": {"name": "getStrongest", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 4, 5], "k": 2}, "outputs": [5, 1]}, {"idx": 1, "inputs": {"arr": [1, 1, 3, 5, 5], "k": 2}, "outputs": [5, 5]}, {"idx": 2, "inputs": {"arr": [6, 7, 11, 7, 6, 8], "k": 5}, "outputs": [11, 8, 6, 6, 7]}], "title": "The k Strongest Values in an Array", "entry_fn_name": "getStrongest"}
{"question_id": "1470", "schema": {"name": "shuffle", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "n"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 5, 1, 3, 4, 7], "n": 3}, "outputs": [2, 3, 5, 4, 1, 7]}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 4, 3, 2, 1], "n": 4}, "outputs": [1, 4, 2, 3, 3, 2, 4, 1]}, {"idx": 2, "inputs": {"nums": [1, 1, 2, 2], "n": 2}, "outputs": [1, 2, 1, 2]}], "title": "Shuffle the Array", "entry_fn_name": "shuffle"}
{"question_id": "1467", "schema": {"name": "getProbability", "params": [{"name": "balls", "type": "integer[]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"balls": [1, 1]}, "outputs": 1.0}, {"idx": 1, "inputs": {"balls": [2, 1, 1]}, "outputs": 0.66667}, {"idx": 2, "inputs": {"balls": [1, 2, 1, 2]}, "outputs": 0.6}], "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls", "entry_fn_name": "getProbability"}
{"question_id": "1466", "schema": {"name": "minReorder", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "connections"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "connections": [[0, 1], [1, 3], [2, 3], [4, 0], [4, 5]]}, "outputs": 3}, {"idx": 1, "inputs": {"n": 5, "connections": [[1, 0], [1, 2], [3, 2], [3, 4]]}, "outputs": 2}, {"idx": 2, "inputs": {"n": 3, "connections": [[1, 0], [2, 0]]}, "outputs": 0}], "title": "Reorder Routes to Make All Paths Lead to the City Zero", "entry_fn_name": "minReorder"}
{"question_id": "1465", "schema": {"name": "maxArea", "params": [{"name": "h", "type": "integer"}, {"type": "integer", "name": "w"}, {"type": "integer[]", "name": "horizontalCuts"}, {"type": "integer[]", "name": "verticalCuts"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"h": 5, "w": 4, "horizontalCuts": [1, 2, 4], "verticalCuts": [1, 3]}, "outputs": 4}, {"idx": 1, "inputs": {"h": 5, "w": 4, "horizontalCuts": [3, 1], "verticalCuts": [1]}, "outputs": 6}, {"idx": 2, "inputs": {"h": 5, "w": 4, "horizontalCuts": [3], "verticalCuts": [3]}, "outputs": 9}], "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts", "entry_fn_name": "maxArea"}
{"question_id": "1464", "schema": {"name": "maxProduct", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 4, 5, 2]}, "outputs": 12}, {"idx": 1, "inputs": {"nums": [1, 5, 4, 5]}, "outputs": 16}, {"idx": 2, "inputs": {"nums": [3, 7]}, "outputs": 12}], "title": "Maximum Product of Two Elements in an Array", "entry_fn_name": "maxProduct"}
{"question_id": "1477", "schema": {"name": "minSumOfLengths", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 2, 2, 4, 3], "target": 3}, "outputs": 2}, {"idx": 1, "inputs": {"arr": [7, 3, 4, 7], "target": 7}, "outputs": 2}, {"idx": 2, "inputs": {"arr": [4, 3, 2, 6, 2, 3, 4], "target": 6}, "outputs": -1}], "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum", "entry_fn_name": "minSumOfLengths"}
{"question_id": "1478", "schema": {"name": "minDistance", "params": [{"name": "houses", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"houses": [1, 4, 8, 10, 20], "k": 3}, "outputs": 5}, {"idx": 1, "inputs": {"houses": [2, 3, 5, 12, 18], "k": 2}, "outputs": 9}], "title": "Allocate Mailboxes", "entry_fn_name": "minDistance"}
{"question_id": "1475", "schema": {"name": "finalPrices", "params": [{"name": "prices", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [8, 4, 6, 2, 3]}, "outputs": [4, 2, 4, 2, 3]}, {"idx": 1, "inputs": {"prices": [1, 2, 3, 4, 5]}, "outputs": [1, 2, 3, 4, 5]}, {"idx": 2, "inputs": {"prices": [10, 1, 1, 6]}, "outputs": [9, 0, 1, 6]}], "title": "Final Prices With a Special Discount in a Shop", "entry_fn_name": "finalPrices"}
{"question_id": "1458", "schema": {"name": "maxDotProduct", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums1": [2, 1, -2, 5], "nums2": [3, 0, -6]}, "outputs": 18}, {"idx": 1, "inputs": {"nums1": [3, -2], "nums2": [2, -6, 7]}, "outputs": 21}, {"idx": 2, "inputs": {"nums1": [-1, -1], "nums2": [1, 1]}, "outputs": -1}], "title": "Max Dot Product of Two Subsequences", "entry_fn_name": "maxDotProduct"}
{"question_id": "1457", "schema": {"name": "pseudoPalindromicPaths ", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [2, 3, 1, 3, 1, null, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"root": [2, 1, 1, 1, 3, null, null, null, null, null, 1]}, "outputs": 1}, {"idx": 2, "inputs": {"root": [9]}, "outputs": 1}], "title": "Pseudo-Palindromic Paths in a Binary Tree", "entry_fn_name": "pseudoPalindromicPaths "}
{"question_id": "1456", "schema": {"name": "maxVowels", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abciiidef", "k": 3}, "outputs": 3}, {"idx": 1, "inputs": {"s": "aeiou", "k": 2}, "outputs": 2}, {"idx": 2, "inputs": {"s": "leetcode", "k": 3}, "outputs": 2}], "title": "Maximum Number of Vowels in a Substring of Given Length", "entry_fn_name": "maxVowels"}
{"question_id": "1455", "schema": {"name": "isPrefixOfWord", "params": [{"name": "sentence", "type": "string"}, {"type": "string", "name": "searchWord"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"sentence": "i love eating burger", "searchWord": "burg"}, "outputs": 4}, {"idx": 1, "inputs": {"sentence": "this problem is an easy problem", "searchWord": "pro"}, "outputs": 2}, {"idx": 2, "inputs": {"sentence": "i am tired", "searchWord": "you"}, "outputs": -1}], "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence", "entry_fn_name": "isPrefixOfWord"}
{"question_id": "1453", "schema": {"name": "numPoints", "params": [{"name": "darts", "type": "integer[][]"}, {"type": "integer", "name": "r"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"darts": [[-2, 0], [2, 0], [0, 2], [0, -2]], "r": 2}, "outputs": 4}, {"idx": 1, "inputs": {"darts": [[-3, 0], [3, 0], [2, 6], [5, 4], [0, 9], [7, 8]], "r": 5}, "outputs": 5}], "title": "Maximum Number of Darts Inside of a Circular Dartboard", "entry_fn_name": "numPoints"}
{"question_id": "1452", "schema": {"name": "peopleIndexes", "params": [{"type": "list<list<string>>", "name": "favoriteCompanies"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"favoriteCompanies": [["leetcode", "google", "facebook"], ["google", "microsoft"], ["google", "facebook"], ["google"], ["amazon"]]}, "outputs": [0, 1, 4]}, {"idx": 1, "inputs": {"favoriteCompanies": [["leetcode", "google", "facebook"], ["leetcode", "amazon"], ["facebook", "google"]]}, "outputs": [0, 1]}, {"idx": 2, "inputs": {"favoriteCompanies": [["leetcode"], ["google"], ["facebook"], ["amazon"]]}, "outputs": [0, 1, 2, 3]}], "title": "People Whose List of Favorite Companies Is Not a Subset of Another List", "entry_fn_name": "peopleIndexes"}
{"question_id": "1451", "schema": {"name": "arrangeWords", "params": [{"name": "text", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"text": "Leetcode is cool"}, "outputs": "Is cool leetcode"}, {"idx": 1, "inputs": {"text": "Keep calm and code on"}, "outputs": "On and keep calm code"}, {"idx": 2, "inputs": {"text": "To be or not to be"}, "outputs": "To be or to be not"}], "title": "Rearrange Words in a Sentence", "entry_fn_name": "arrangeWords"}
{"question_id": "1450", "schema": {"name": "busyStudent", "params": [{"name": "startTime", "type": "integer[]"}, {"type": "integer[]", "name": "endTime"}, {"type": "integer", "name": "queryTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"startTime": [1, 2, 3], "endTime": [3, 2, 7], "queryTime": 4}, "outputs": 1}, {"idx": 1, "inputs": {"startTime": [4], "endTime": [4], "queryTime": 4}, "outputs": 1}], "title": "Number of Students Doing Homework at a Given Time", "entry_fn_name": "busyStudent"}
{"question_id": "1463", "schema": {"name": "cherryPickup", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[3, 1, 1], [2, 5, 1], [1, 5, 5], [2, 1, 1]]}, "outputs": 24}, {"idx": 1, "inputs": {"grid": [[1, 0, 0, 0, 0, 0, 1], [2, 0, 0, 0, 0, 3, 0], [2, 0, 9, 0, 0, 0, 0], [0, 3, 0, 5, 4, 0, 0], [1, 0, 2, 3, 0, 0, 6]]}, "outputs": 28}], "title": "Cherry Pickup II", "entry_fn_name": "cherryPickup"}
{"question_id": "1462", "schema": {"name": "checkIfPrerequisite", "params": [{"name": "numCourses", "type": "integer"}, {"type": "integer[][]", "name": "prerequisites"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "list<boolean>"}}, "test_cases": [{"idx": 0, "inputs": {"numCourses": 2, "prerequisites": [[1, 0]], "queries": [[0, 1], [1, 0]]}, "outputs": [false, true]}, {"idx": 1, "inputs": {"numCourses": 2, "prerequisites": [], "queries": [[1, 0], [0, 1]]}, "outputs": [false, false]}, {"idx": 2, "inputs": {"numCourses": 3, "prerequisites": [[1, 2], [1, 0], [2, 0]], "queries": [[1, 0], [1, 2]]}, "outputs": [true, true]}], "title": "Course Schedule IV", "entry_fn_name": "checkIfPrerequisite"}
{"question_id": "1461", "schema": {"name": "hasAllCodes", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "00110110", "k": 2}, "outputs": true}, {"idx": 1, "inputs": {"s": "0110", "k": 1}, "outputs": true}, {"idx": 2, "inputs": {"s": "0110", "k": 2}, "outputs": false}], "title": "Check If a String Contains All Binary Codes of Size K", "entry_fn_name": "hasAllCodes"}
{"question_id": "1460", "schema": {"name": "canBeEqual", "params": [{"name": "target", "type": "integer[]"}, {"type": "integer[]", "name": "arr"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"target": [1, 2, 3, 4], "arr": [2, 4, 1, 3]}, "outputs": true}, {"idx": 1, "inputs": {"target": [7], "arr": [7]}, "outputs": true}, {"idx": 2, "inputs": {"target": [3, 7, 9], "arr": [3, 7, 11]}, "outputs": false}], "title": "Make Two Arrays Equal by Reversing Sub-arrays", "entry_fn_name": "canBeEqual"}
{"question_id": "1444", "schema": {"name": "ways", "params": [{"name": "pizza", "type": "string[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"pizza": ["A..", "AAA", "..."], "k": 3}, "outputs": 3}, {"idx": 1, "inputs": {"pizza": ["A..", "AA.", "..."], "k": 3}, "outputs": 1}, {"idx": 2, "inputs": {"pizza": ["A..", "A..", "..."], "k": 1}, "outputs": 1}], "title": "Number of Ways of Cutting a Pizza", "entry_fn_name": "ways"}
{"question_id": "1443", "schema": {"name": "minTime", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "list<boolean>", "name": "hasApple"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7, "edges": [[0, 1], [0, 2], [1, 4], [1, 5], [2, 3], [2, 6]], "hasApple": [false, false, true, false, true, true, false]}, "outputs": 8}, {"idx": 1, "inputs": {"n": 7, "edges": [[0, 1], [0, 2], [1, 4], [1, 5], [2, 3], [2, 6]], "hasApple": [false, false, true, false, false, true, false]}, "outputs": 6}, {"idx": 2, "inputs": {"n": 7, "edges": [[0, 1], [0, 2], [1, 4], [1, 5], [2, 3], [2, 6]], "hasApple": [false, false, false, false, false, false, false]}, "outputs": 0}], "title": "Minimum Time to Collect All Apples in a Tree", "entry_fn_name": "minTime"}
{"question_id": "1442", "schema": {"name": "countTriplets", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 3, 1, 6, 7]}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [1, 1, 1, 1, 1]}, "outputs": 10}], "title": "Count Triplets That Can Form Two Arrays of Equal XOR", "entry_fn_name": "countTriplets"}
{"question_id": "1441", "schema": {"name": "buildArray", "params": [{"name": "target", "type": "integer[]"}, {"type": "integer", "name": "n"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"target": [1, 3], "n": 3}, "outputs": ["Push", "Push", "Pop", "Push"]}, {"idx": 1, "inputs": {"target": [1, 2, 3], "n": 3}, "outputs": ["Push", "Push", "Push"]}, {"idx": 2, "inputs": {"target": [1, 2], "n": 4}, "outputs": ["Push", "Push"]}], "title": "Build an Array With Stack Operations", "entry_fn_name": "buildArray"}
{"question_id": "1439", "schema": {"name": "kthSmallest", "params": [{"name": "mat", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 3, 11], [2, 4, 6]], "k": 5}, "outputs": 7}, {"idx": 1, "inputs": {"mat": [[1, 3, 11], [2, 4, 6]], "k": 9}, "outputs": 17}, {"idx": 2, "inputs": {"mat": [[1, 10, 10], [1, 4, 5], [2, 3, 6]], "k": 7}, "outputs": 9}], "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows", "entry_fn_name": "kthSmallest"}
{"question_id": "1438", "schema": {"name": "longestSubarray", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "limit"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [8, 2, 4, 7], "limit": 4}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [10, 1, 2, 4, 7, 2], "limit": 5}, "outputs": 4}, {"idx": 2, "inputs": {"nums": [4, 2, 2, 2, 4, 4, 2, 2], "limit": 0}, "outputs": 3}], "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit", "entry_fn_name": "longestSubarray"}
{"question_id": "1437", "schema": {"name": "kLengthApart", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 0, 0, 0, 1, 0, 0, 1], "k": 2}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 0, 0, 1, 0, 1], "k": 2}, "outputs": false}], "title": "Check If All 1's Are at Least Length K Places Away", "entry_fn_name": "kLengthApart"}
{"question_id": "1436", "schema": {"name": "destCity", "params": [{"name": "paths", "type": "list<list<string>>"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"paths": [["London", "New York"], ["New York", "Lima"], ["Lima", "Sao Paulo"]]}, "outputs": "Sao Paulo"}, {"idx": 1, "inputs": {"paths": [["B", "C"], ["D", "B"], ["C", "A"]]}, "outputs": "A"}, {"idx": 2, "inputs": {"paths": [["A", "Z"]]}, "outputs": "Z"}], "title": "Destination City", "entry_fn_name": "destCity"}
{"question_id": "1449", "schema": {"name": "largestNumber", "params": [{"name": "cost", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"cost": [4, 3, 2, 5, 6, 7, 2, 5, 5], "target": 9}, "outputs": "7772"}, {"idx": 1, "inputs": {"cost": [7, 6, 5, 5, 5, 6, 8, 7, 8], "target": 12}, "outputs": "85"}, {"idx": 2, "inputs": {"cost": [2, 4, 6, 2, 4, 6, 4, 4, 4], "target": 5}, "outputs": "0"}], "title": "Form Largest Integer With Digits That Add up to Target", "entry_fn_name": "largestNumber"}
{"question_id": "1448", "schema": {"name": "goodNodes", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 1, 4, 3, null, 1, 5]}, "outputs": 4}, {"idx": 1, "inputs": {"root": [3, 3, null, 4, 2]}, "outputs": 3}, {"idx": 2, "inputs": {"root": [1]}, "outputs": 1}], "title": "Count Good Nodes in Binary Tree", "entry_fn_name": "goodNodes"}
{"question_id": "1447", "schema": {"name": "simplifiedFractions", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": ["1/2"]}, {"idx": 1, "inputs": {"n": 3}, "outputs": ["1/2", "1/3", "2/3"]}, {"idx": 2, "inputs": {"n": 4}, "outputs": ["1/2", "1/3", "1/4", "2/3", "3/4"]}], "title": "Simplified Fractions", "entry_fn_name": "simplifiedFractions"}
{"question_id": "1446", "schema": {"name": "maxPower", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leetcode"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "abbcccddddeeeeedcba"}, "outputs": 5}], "title": "Consecutive Characters", "entry_fn_name": "maxPower"}
{"question_id": "1424", "schema": {"name": "findDiagonalOrder", "params": [{"name": "nums", "type": "list<list<integer>>"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": [1, 4, 2, 7, 5, 3, 8, 6, 9]}, {"idx": 1, "inputs": {"nums": [[1, 2, 3, 4, 5], [6, 7], [8], [9, 10, 11], [12, 13, 14, 15, 16]]}, "outputs": [1, 6, 2, 8, 7, 3, 9, 4, 12, 10, 5, 13, 11, 14, 15, 16]}], "title": "Diagonal Traverse II", "entry_fn_name": "findDiagonalOrder"}
{"question_id": "1423", "schema": {"name": "maxScore", "params": [{"name": "cardPoints", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"cardPoints": [1, 2, 3, 4, 5, 6, 1], "k": 3}, "outputs": 12}, {"idx": 1, "inputs": {"cardPoints": [2, 2, 2], "k": 2}, "outputs": 4}, {"idx": 2, "inputs": {"cardPoints": [9, 7, 7, 9, 7, 7, 9], "k": 7}, "outputs": 55}], "title": "Maximum Points You Can Obtain from Cards", "entry_fn_name": "maxScore"}
{"question_id": "1422", "schema": {"name": "maxScore", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "011101"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "00111"}, "outputs": 5}, {"idx": 2, "inputs": {"s": "1111"}, "outputs": 3}], "title": "Maximum Score After Splitting a String", "entry_fn_name": "maxScore"}
{"question_id": "1420", "schema": {"name": "numOfArrays", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "m"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "m": 3, "k": 1}, "outputs": 6}, {"idx": 1, "inputs": {"n": 5, "m": 2, "k": 3}, "outputs": 0}, {"idx": 2, "inputs": {"n": 9, "m": 1, "k": 1}, "outputs": 1}], "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons", "entry_fn_name": "numOfArrays"}
{"question_id": "1419", "schema": {"name": "minNumberOfFrogs", "params": [{"name": "croakOfFrogs", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"croakOfFrogs": "croakcroak"}, "outputs": 1}, {"idx": 1, "inputs": {"croakOfFrogs": "crcoakroak"}, "outputs": 2}, {"idx": 2, "inputs": {"croakOfFrogs": "croakcrook"}, "outputs": -1}], "title": "Minimum Number of Frogs Croaking", "entry_fn_name": "minNumberOfFrogs"}
{"question_id": "1418", "schema": {"name": "displayTable", "params": [{"name": "orders", "type": "list<list<string>>"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"orders": [["David", "3", "Ceviche"], ["Corina", "10", "Beef Burrito"], ["David", "3", "Fried Chicken"], ["Carla", "5", "Water"], ["Carla", "5", "Ceviche"], ["Rous", "3", "Ceviche"]]}, "outputs": [["Table", "Beef Burrito", "Ceviche", "Fried Chicken", "Water"], ["3", "0", "2", "1", "0"], ["5", "0", "1", "0", "1"], ["10", "1", "0", "0", "0"]]}, {"idx": 1, "inputs": {"orders": [["James", "12", "Fried Chicken"], ["Ratesh", "12", "Fried Chicken"], ["Amadeus", "12", "Fried Chicken"], ["Adam", "1", "Canadian Waffles"], ["Brianna", "1", "Canadian Waffles"]]}, "outputs": [["Table", "Canadian Waffles", "Fried Chicken"], ["1", "2", "0"], ["12", "0", "3"]]}, {"idx": 2, "inputs": {"orders": [["Laura", "2", "Bean Burrito"], ["Jhon", "2", "Beef Burrito"], ["Melissa", "2", "Soda"]]}, "outputs": [["Table", "Bean Burrito", "Beef Burrito", "Soda"], ["2", "1", "1", "1"]]}], "title": "Display Table of Food Orders in a Restaurant", "entry_fn_name": "displayTable"}
{"question_id": "1417", "schema": {"name": "reformat", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "a0b1c2"}, "outputs": "0a1b2c"}, {"idx": 1, "inputs": {"s": "leetcode"}, "outputs": ""}, {"idx": 2, "inputs": {"s": "1229857369"}, "outputs": ""}], "title": "Reformat The String", "entry_fn_name": "reformat"}
{"question_id": "1434", "schema": {"name": "numberWays", "params": [{"name": "hats", "type": "list<list<integer>>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"hats": [[3, 4], [4, 5], [5]]}, "outputs": 1}, {"idx": 1, "inputs": {"hats": [[3, 5, 1], [3, 5]]}, "outputs": 4}, {"idx": 2, "inputs": {"hats": [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]}, "outputs": 24}], "title": "Number of Ways to Wear Different Hats to Each Other", "entry_fn_name": "numberWays"}
{"question_id": "1433", "schema": {"name": "checkIfCanBreak", "params": [{"name": "s1", "type": "string"}, {"type": "string", "name": "s2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "abc", "s2": "xya"}, "outputs": true}, {"idx": 1, "inputs": {"s1": "abe", "s2": "acd"}, "outputs": false}, {"idx": 2, "inputs": {"s1": "leetcodee", "s2": "interview"}, "outputs": true}], "title": "Check If a String Can Break Another String", "entry_fn_name": "checkIfCanBreak"}
{"question_id": "1432", "schema": {"name": "maxDiff", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 555}, "outputs": 888}, {"idx": 1, "inputs": {"num": 9}, "outputs": 8}], "title": "Max Difference You Can Get From Changing an Integer", "entry_fn_name": "maxDiff"}
{"question_id": "1431", "schema": {"name": "kidsWithCandies", "params": [{"name": "candies", "type": "integer[]"}, {"type": "integer", "name": "extraCandies"}], "return": {"type": "list<boolean>"}, "manual": false, "languages": ["cpp", "java", "python", "c", "csharp", "javascript", "ruby", "swift", "golang", "python3", "scala", "kotlin", "rust", "php", "typescript"]}, "test_cases": [{"idx": 0, "inputs": {"candies": [2, 3, 5, 1, 3], "extraCandies": 3}, "outputs": [true, true, true, false, true]}, {"idx": 1, "inputs": {"candies": [4, 2, 1, 1, 2], "extraCandies": 1}, "outputs": [true, false, false, false, false]}, {"idx": 2, "inputs": {"candies": [12, 1, 12], "extraCandies": 10}, "outputs": [true, false, true]}], "title": "Kids With the Greatest Number of Candies", "entry_fn_name": "kidsWithCandies"}
{"question_id": "1411", "schema": {"name": "numOfWays", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 12}, {"idx": 1, "inputs": {"n": 5000}, "outputs": 30228214}], "title": "Number of Ways to Paint N \u00d7 3 Grid", "entry_fn_name": "numOfWays"}
{"question_id": "1410", "schema": {"name": "entityParser", "params": [{"name": "text", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"text": "&amp; is an HTML entity but &ambassador; is not."}, "outputs": "& is an HTML entity but &ambassador; is not."}, {"idx": 1, "inputs": {"text": "and I quote: &quot;...&quot;"}, "outputs": "and I quote: \"...\""}], "title": "HTML Entity Parser", "entry_fn_name": "entityParser"}
{"question_id": "1409", "schema": {"name": "processQueries", "params": [{"name": "queries", "type": "integer[]"}, {"type": "integer", "name": "m"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"queries": [3, 1, 2, 1], "m": 5}, "outputs": [2, 1, 2, 1]}, {"idx": 1, "inputs": {"queries": [4, 1, 2, 2], "m": 4}, "outputs": [3, 1, 2, 0]}, {"idx": 2, "inputs": {"queries": [7, 5, 5, 8, 3], "m": 8}, "outputs": [6, 5, 0, 7, 5]}], "title": "Queries on a Permutation With Key", "entry_fn_name": "processQueries"}
{"question_id": "1408", "schema": {"name": "stringMatching", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["mass", "as", "hero", "superhero"]}, "outputs": ["as", "hero"]}, {"idx": 1, "inputs": {"words": ["leetcode", "et", "code"]}, "outputs": ["et", "code"]}, {"idx": 2, "inputs": {"words": ["blue", "green", "bu"]}, "outputs": []}], "title": "String Matching in an Array", "entry_fn_name": "stringMatching"}
{"question_id": "1406", "schema": {"name": "stoneGameIII", "params": [{"name": "stoneValue", "type": "integer[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"values": [1, 2, 3, 7]}, "outputs": "Bob"}, {"idx": 1, "inputs": {"values": [1, 2, 3, -9]}, "outputs": "Alice"}, {"idx": 2, "inputs": {"values": [1, 2, 3, 6]}, "outputs": "Tie"}], "title": "Stone Game III", "entry_fn_name": "stoneGameIII"}
{"question_id": "1404", "schema": {"name": "numSteps", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1101"}, "outputs": 6}, {"idx": 1, "inputs": {"s": "10"}, "outputs": 1}, {"idx": 2, "inputs": {"s": "1"}, "outputs": 0}], "title": "Number of Steps to Reduce a Number in Binary Representation to One", "entry_fn_name": "numSteps"}
{"question_id": "1403", "schema": {"name": "minSubsequence", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 3, 10, 9, 8]}, "outputs": [10, 9]}, {"idx": 1, "inputs": {"nums": [4, 4, 7, 6, 7]}, "outputs": [7, 7, 6]}, {"idx": 2, "inputs": {"nums": [6]}, "outputs": [6]}], "title": "Minimum Subsequence in Non-Increasing Order", "entry_fn_name": "minSubsequence"}
{"question_id": "1416", "schema": {"name": "numberOfArrays", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1000", "k": 10000}, "outputs": 1}, {"idx": 1, "inputs": {"s": "1000", "k": 10}, "outputs": 0}, {"idx": 2, "inputs": {"s": "1317", "k": 2000}, "outputs": 8}], "title": "Restore The Array", "entry_fn_name": "numberOfArrays"}
{"question_id": "1415", "schema": {"name": "getHappyString", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "k": 3}, "outputs": "c"}, {"idx": 1, "inputs": {"n": 1, "k": 4}, "outputs": ""}, {"idx": 2, "inputs": {"n": 3, "k": 9}, "outputs": "cab"}], "title": "The k-th Lexicographical String of All Happy Strings of Length n", "entry_fn_name": "getHappyString"}
{"question_id": "1414", "schema": {"name": "findMinFibonacciNumbers", "params": [{"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"k": 7}, "outputs": 2}, {"idx": 1, "inputs": {"k": 10}, "outputs": 2}, {"idx": 2, "inputs": {"k": 19}, "outputs": 3}], "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K", "entry_fn_name": "findMinFibonacciNumbers"}
{"question_id": "1413", "schema": {"name": "minStartValue", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-3, 2, -3, 4, 2]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [1, 2]}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [1, -2, -3]}, "outputs": 5}], "title": "Minimum Value to Get Positive Step by Step Sum", "entry_fn_name": "minStartValue"}
{"question_id": "1397", "schema": {"name": "findGoodStrings", "params": [{"type": "integer", "name": "n"}, {"type": "string", "name": "s1"}, {"type": "string", "name": "s2"}, {"type": "string", "name": "evil"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "s1": "aa", "s2": "da", "evil": "b"}, "outputs": 51}, {"idx": 1, "inputs": {"n": 8, "s1": "leetcode", "s2": "leetgoes", "evil": "leet"}, "outputs": 0}, {"idx": 2, "inputs": {"n": 2, "s1": "gx", "s2": "gz", "evil": "x"}, "outputs": 2}], "title": "Find All Good Strings", "entry_fn_name": "findGoodStrings"}
{"question_id": "1395", "schema": {"name": "numTeams", "params": [{"name": "rating", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rating": [2, 5, 3, 4, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"rating": [2, 1, 3]}, "outputs": 0}, {"idx": 2, "inputs": {"rating": [1, 2, 3, 4]}, "outputs": 4}], "title": "Count Number of Teams", "entry_fn_name": "numTeams"}
{"question_id": "1394", "schema": {"name": "findLucky", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 2, 3, 4]}, "outputs": 2}, {"idx": 1, "inputs": {"arr": [1, 2, 2, 3, 3, 3]}, "outputs": 3}, {"idx": 2, "inputs": {"arr": [2, 2, 2, 3, 3]}, "outputs": -1}], "title": "Find Lucky Integer in an Array", "entry_fn_name": "findLucky"}
{"question_id": "1392", "schema": {"name": "longestPrefix", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "level"}, "outputs": "l"}, {"idx": 1, "inputs": {"s": "ababab"}, "outputs": "abab"}], "title": "Longest Happy Prefix", "entry_fn_name": "longestPrefix"}
{"question_id": "1391", "schema": {"name": "hasValidPath", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[2, 4, 3], [6, 5, 2]]}, "outputs": true}, {"idx": 1, "inputs": {"grid": [[1, 2, 1], [1, 2, 1]]}, "outputs": false}, {"idx": 2, "inputs": {"grid": [[1, 1, 2]]}, "outputs": false}], "title": "Check if There is a Valid Path in a Grid", "entry_fn_name": "hasValidPath"}
{"question_id": "1389", "schema": {"name": "createTargetArray", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer[]", "name": "index"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 2, 3, 4], "index": [0, 1, 2, 2, 1]}, "outputs": [0, 4, 1, 3, 2]}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 0], "index": [0, 1, 2, 3, 0]}, "outputs": [0, 1, 2, 3, 4]}, {"idx": 2, "inputs": {"nums": [1], "index": [0]}, "outputs": [1]}], "title": "Create Target Array in the Given Order", "entry_fn_name": "createTargetArray"}
{"question_id": "1402", "schema": {"name": "maxSatisfaction", "params": [{"name": "satisfaction", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"satisfaction": [-1, -8, 0, 5, -9]}, "outputs": 14}, {"idx": 1, "inputs": {"satisfaction": [4, 3, 2]}, "outputs": 20}, {"idx": 2, "inputs": {"satisfaction": [-1, -4, -5]}, "outputs": 0}], "title": "Reducing Dishes", "entry_fn_name": "maxSatisfaction"}
{"question_id": "1400", "schema": {"name": "canConstruct", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "annabelle", "k": 2}, "outputs": true}, {"idx": 1, "inputs": {"s": "leetcode", "k": 3}, "outputs": false}, {"idx": 2, "inputs": {"s": "True", "k": 4}, "outputs": true}], "title": "Construct K Palindrome Strings", "entry_fn_name": "canConstruct"}
{"question_id": "1401", "schema": {"name": "checkOverlap", "params": [{"name": "radius", "type": "integer"}, {"type": "integer", "name": "xCenter"}, {"type": "integer", "name": "yCenter"}, {"type": "integer", "name": "x1"}, {"type": "integer", "name": "y1"}, {"type": "integer", "name": "x2"}, {"type": "integer", "name": "y2"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"radius": 1, "xCenter": 0, "yCenter": 0, "x1": 1, "y1": -1, "x2": 3, "y2": 1}, "outputs": true}, {"idx": 1, "inputs": {"radius": 1, "xCenter": 1, "yCenter": 1, "x1": 1, "y1": -3, "x2": 2, "y2": -1}, "outputs": false}, {"idx": 2, "inputs": {"radius": 1, "xCenter": 0, "yCenter": 0, "x1": -1, "y1": 0, "x2": 0, "y2": 1}, "outputs": true}], "title": "Circle and Rectangle Overlapping", "entry_fn_name": "checkOverlap"}
{"question_id": "1399", "schema": {"name": "countLargestGroup", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 13}, "outputs": 4}, {"idx": 1, "inputs": {"n": 2}, "outputs": 2}], "title": "Count Largest Group", "entry_fn_name": "countLargestGroup"}
{"question_id": "1383", "schema": {"name": "maxPerformance", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "speed"}, {"type": "integer[]", "name": "efficiency"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "speed": [2, 10, 3, 1, 5, 8], "efficiency": [5, 4, 3, 9, 7, 2], "k": 2}, "outputs": 60}, {"idx": 1, "inputs": {"n": 6, "speed": [2, 10, 3, 1, 5, 8], "efficiency": [5, 4, 3, 9, 7, 2], "k": 3}, "outputs": 68}, {"idx": 2, "inputs": {"n": 6, "speed": [2, 10, 3, 1, 5, 8], "efficiency": [5, 4, 3, 9, 7, 2], "k": 4}, "outputs": 72}], "title": "Maximum Performance of a Team", "entry_fn_name": "maxPerformance"}
{"question_id": "1379", "schema": {"name": "getTargetCopy", "params": [{"name": "tree", "type": "TreeNode"}, {"type": "integer", "name": "target"}], "return": {"type": "TreeNode"}, "manual": true, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "typescript"]}, "test_cases": [{"idx": 0, "inputs": {"tree": [7, 4, 3, null, null, 6, 19], "target": 3}, "outputs": 3}, {"idx": 1, "inputs": {"tree": [7], "target": 7}, "outputs": 7}, {"idx": 2, "inputs": {"tree": [8, null, 6, null, 5, null, 4, null, 3, null, 2, null, 1], "target": 4}, "outputs": 4}], "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree", "entry_fn_name": "getTargetCopy"}
{"question_id": "1380", "schema": {"name": "luckyNumbers ", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[3, 7, 8], [9, 11, 13], [15, 16, 17]]}, "outputs": [15]}, {"idx": 1, "inputs": {"matrix": [[1, 10, 4, 2], [9, 3, 8, 7], [15, 16, 17, 12]]}, "outputs": [12]}, {"idx": 2, "inputs": {"matrix": [[7, 8], [1, 2]]}, "outputs": [7]}], "title": "Lucky Numbers in a Matrix", "entry_fn_name": "luckyNumbers "}
{"question_id": "1377", "schema": {"name": "frogPosition", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer", "name": "t"}, {"type": "integer", "name": "target"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7, "edges": [[1, 2], [1, 3], [1, 7], [2, 4], [2, 6], [3, 5]], "t": 2, "target": 4}, "outputs": 0.16666666666666666}, {"idx": 1, "inputs": {"n": 7, "edges": [[1, 2], [1, 3], [1, 7], [2, 4], [2, 6], [3, 5]], "t": 1, "target": 7}, "outputs": 0.3333333333333333}], "title": "Frog Position After T Seconds", "entry_fn_name": "frogPosition"}
{"question_id": "1376", "schema": {"name": "numOfMinutes", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "headID"}, {"type": "integer[]", "name": "manager"}, {"type": "integer[]", "name": "informTime"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "headID": 0, "manager": [-1], "informTime": [0]}, "outputs": 0}, {"idx": 1, "inputs": {"n": 6, "headID": 2, "manager": [2, 2, -1, 2, 2, 2], "informTime": [0, 0, 1, 0, 0, 0]}, "outputs": 1}], "title": "Time Needed to Inform All Employees", "entry_fn_name": "numOfMinutes"}
{"question_id": "1375", "schema": {"name": "numTimesAllBlue", "params": [{"name": "flips", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"flips": [3, 2, 4, 1, 5]}, "outputs": 2}, {"idx": 1, "inputs": {"flips": [4, 1, 2, 3]}, "outputs": 1}], "title": "Number of Times Binary String Is Prefix-Aligned", "entry_fn_name": "numTimesAllBlue"}
{"question_id": "1374", "schema": {"name": "generateTheString", "params": [{"name": "n", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": "pppz"}, {"idx": 1, "inputs": {"n": 2}, "outputs": "xy"}, {"idx": 2, "inputs": {"n": 7}, "outputs": "holasss"}], "title": "Generate a String With Characters That Have Odd Counts", "entry_fn_name": "generateTheString"}
{"question_id": "1388", "schema": {"name": "maxSizeSlices", "params": [{"name": "slices", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"slices": [1, 2, 3, 4, 5, 6]}, "outputs": 10}, {"idx": 1, "inputs": {"slices": [8, 9, 8, 6, 1, 1]}, "outputs": 16}], "title": "Pizza With 3n Slices", "entry_fn_name": "maxSizeSlices"}
{"question_id": "1387", "schema": {"name": "getKth", "params": [{"name": "lo", "type": "integer"}, {"type": "integer", "name": "hi"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"lo": 12, "hi": 15, "k": 2}, "outputs": 13}, {"idx": 1, "inputs": {"lo": 7, "hi": 11, "k": 4}, "outputs": 7}], "title": "Sort Integers by The Power Value", "entry_fn_name": "getKth"}
{"question_id": "1386", "schema": {"name": "maxNumberOfFamilies", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "reservedSeats"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "reservedSeats": [[1, 2], [1, 3], [1, 8], [2, 6], [3, 1], [3, 10]]}, "outputs": 4}, {"idx": 1, "inputs": {"n": 2, "reservedSeats": [[2, 1], [1, 8], [2, 6]]}, "outputs": 2}, {"idx": 2, "inputs": {"n": 4, "reservedSeats": [[4, 3], [1, 4], [4, 6], [1, 7]]}, "outputs": 4}], "title": "Cinema Seat Allocation", "entry_fn_name": "maxNumberOfFamilies"}
{"question_id": "1385", "schema": {"name": "findTheDistanceValue", "params": [{"name": "arr1", "type": "integer[]"}, {"type": "integer[]", "name": "arr2"}, {"type": "integer", "name": "d"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr1": [4, 5, 8], "arr2": [10, 9, 1, 8], "d": 2}, "outputs": 2}, {"idx": 1, "inputs": {"arr1": [1, 4, 2, 3], "arr2": [-4, -3, 6, 10, 20, 30], "d": 3}, "outputs": 2}, {"idx": 2, "inputs": {"arr1": [2, 1, 100, 3], "arr2": [-5, -2, 10, -3, 7], "d": 6}, "outputs": 1}], "title": "Find the Distance Value Between Two Arrays", "entry_fn_name": "findTheDistanceValue"}
{"question_id": "1368", "schema": {"name": "minCost", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 1, 1, 1], [2, 2, 2, 2], [1, 1, 1, 1], [2, 2, 2, 2]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[1, 1, 3], [3, 2, 2], [1, 1, 4]]}, "outputs": 0}, {"idx": 2, "inputs": {"grid": [[1, 2], [4, 3]]}, "outputs": 1}], "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "entry_fn_name": "minCost"}
{"question_id": "1367", "schema": {"name": "isSubPath", "params": [{"name": "head", "type": "ListNode"}, {"type": "TreeNode", "name": "root"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"head": [4, 2, 8], "root": [1, 4, 4, null, 2, 2, null, 1, null, 6, 8, null, null, null, null, 1, 3]}, "outputs": true}, {"idx": 1, "inputs": {"head": [1, 4, 2, 6], "root": [1, 4, 4, null, 2, 2, null, 1, null, 6, 8, null, null, null, null, 1, 3]}, "outputs": true}, {"idx": 2, "inputs": {"head": [1, 4, 2, 6, 8], "root": [1, 4, 4, null, 2, 2, null, 1, null, 6, 8, null, null, null, null, 1, 3]}, "outputs": false}], "title": "Linked List in Binary Tree", "entry_fn_name": "isSubPath"}
{"question_id": "1366", "schema": {"name": "rankTeams", "params": [{"name": "votes", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"votes": ["ABC", "ACB", "ABC", "ACB", "ACB"]}, "outputs": "ACB"}, {"idx": 1, "inputs": {"votes": ["WXYZ", "XYZW"]}, "outputs": "XWYZ"}, {"idx": 2, "inputs": {"votes": ["ZMNAGUEDSJYLBOPHRQICWFXTVK"]}, "outputs": "ZMNAGUEDSJYLBOPHRQICWFXTVK"}], "title": "Rank Teams by Votes", "entry_fn_name": "rankTeams"}
{"question_id": "1365", "schema": {"name": "smallerNumbersThanCurrent", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [8, 1, 2, 2, 3]}, "outputs": [4, 0, 1, 1, 3]}, {"idx": 1, "inputs": {"nums": [6, 5, 4, 8]}, "outputs": [2, 1, 0, 3]}, {"idx": 2, "inputs": {"nums": [7, 7, 7, 7]}, "outputs": [0, 0, 0, 0]}], "title": "How Many Numbers Are Smaller Than the Current Number", "entry_fn_name": "smallerNumbersThanCurrent"}
{"question_id": "1354", "schema": {"name": "isPossible", "params": [{"name": "target", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"target": [9, 3, 5]}, "outputs": true}, {"idx": 1, "inputs": {"target": [1, 1, 1, 2]}, "outputs": false}, {"idx": 2, "inputs": {"target": [8, 5]}, "outputs": true}], "title": "Construct Target Array With Multiple Sums", "entry_fn_name": "isPossible"}
{"question_id": "1353", "schema": {"name": "maxEvents", "params": [{"name": "events", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"events": [[1, 2], [2, 3], [3, 4]]}, "outputs": 3}, {"idx": 1, "inputs": {"events": [[1, 2], [2, 3], [3, 4], [1, 2]]}, "outputs": 4}], "title": "Maximum Number of Events That Can Be Attended", "entry_fn_name": "maxEvents"}
{"question_id": "1351", "schema": {"name": "countNegatives", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]]}, "outputs": 8}, {"idx": 1, "inputs": {"grid": [[3, 2], [1, 0]]}, "outputs": 0}], "title": "Count Negative Numbers in a Sorted Matrix", "entry_fn_name": "countNegatives"}
{"question_id": "1373", "schema": {"name": "maxSumBST", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 4, 3, 2, 4, 2, 5, null, null, null, null, null, null, 4, 6]}, "outputs": 20}, {"idx": 1, "inputs": {"root": [4, 3, null, 1, 2]}, "outputs": 2}, {"idx": 2, "inputs": {"root": [-4, -2, -5]}, "outputs": 0}], "title": "Maximum Sum BST in Binary Tree", "entry_fn_name": "maxSumBST"}
{"question_id": "1372", "schema": {"name": "longestZigZag", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 1, 1, 1, null, null, 1, 1, null, 1, null, null, null, 1, null, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"root": [1, 1, 1, null, 1, null, null, 1, 1, null, 1]}, "outputs": 4}, {"idx": 2, "inputs": {"root": [1]}, "outputs": 0}], "title": "Longest ZigZag Path in a Binary Tree", "entry_fn_name": "longestZigZag"}
{"question_id": "1371", "schema": {"name": "findTheLongestSubstring", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "eleetminicoworoep"}, "outputs": 13}, {"idx": 1, "inputs": {"s": "leetcodeisgreat"}, "outputs": 5}, {"idx": 2, "inputs": {"s": "bcbcbc"}, "outputs": 6}], "title": "Find the Longest Substring Containing Vowels in Even Counts", "entry_fn_name": "findTheLongestSubstring"}
{"question_id": "1370", "schema": {"name": "sortString", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aaaabbbbcccc"}, "outputs": "abccbaabccba"}, {"idx": 1, "inputs": {"s": "rat"}, "outputs": "art"}], "title": "Increasing Decreasing String", "entry_fn_name": "sortString"}
{"question_id": "1349", "schema": {"name": "maxStudents", "params": [{"name": "seats", "type": "character[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"seats": [["#", ".", "#", "#", ".", "#"], [".", "#", "#", "#", "#", "."], ["#", ".", "#", "#", ".", "#"]]}, "outputs": 4}, {"idx": 1, "inputs": {"seats": [[".", "#"], ["#", "#"], ["#", "."], ["#", "#"], [".", "#"]]}, "outputs": 3}, {"idx": 2, "inputs": {"seats": [["#", ".", ".", ".", "#"], [".", "#", ".", "#", "."], [".", ".", "#", ".", "."], [".", "#", ".", "#", "."], ["#", ".", ".", ".", "#"]]}, "outputs": 10}], "title": "Maximum Students Taking Exam", "entry_fn_name": "maxStudents"}
{"question_id": "1347", "schema": {"name": "minSteps", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "t"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "bab", "t": "aba"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "leetcode", "t": "practice"}, "outputs": 5}, {"idx": 2, "inputs": {"s": "anagram", "t": "mangaar"}, "outputs": 0}], "title": "Minimum Number of Steps to Make Two Strings Anagram", "entry_fn_name": "minSteps"}
{"question_id": "1346", "schema": {"name": "checkIfExist", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [10, 2, 5, 3]}, "outputs": true}, {"idx": 1, "inputs": {"arr": [7, 1, 14, 11]}, "outputs": true}, {"idx": 2, "inputs": {"arr": [3, 1, 7, 11]}, "outputs": false}], "title": "Check If N and Its Double Exist", "entry_fn_name": "checkIfExist"}
{"question_id": "1340", "schema": {"name": "maxJumps", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "d"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], "d": 2}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [3, 3, 3, 3, 3], "d": 3}, "outputs": 1}, {"idx": 2, "inputs": {"arr": [7, 6, 5, 4, 3, 2, 1], "d": 1}, "outputs": 7}], "title": "Jump Game V", "entry_fn_name": "maxJumps"}
{"question_id": "1339", "schema": {"name": "maxProduct", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5, 6]}, "outputs": 110}, {"idx": 1, "inputs": {"root": [1, null, 2, 3, 4, null, null, 5, 6]}, "outputs": 90}], "title": "Maximum Product of Splitted Binary Tree", "entry_fn_name": "maxProduct"}
{"question_id": "1338", "schema": {"name": "minSetSize", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 3, 3, 3, 5, 5, 5, 2, 2, 7]}, "outputs": 2}, {"idx": 1, "inputs": {"arr": [7, 7, 7, 7, 7, 7]}, "outputs": 1}], "title": "Reduce Array Size to The Half", "entry_fn_name": "minSetSize"}
{"question_id": "1337", "schema": {"name": "kWeakestRows", "params": [{"name": "mat", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 1, 0, 0, 0], [1, 1, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1]], "k": 3}, "outputs": [2, 0, 3]}, {"idx": 1, "inputs": {"mat": [[1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 0]], "k": 2}, "outputs": [0, 2]}], "title": "The K Weakest Rows in a Matrix", "entry_fn_name": "kWeakestRows"}
{"question_id": "1359", "schema": {"name": "countOrders", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 1}, {"idx": 1, "inputs": {"n": 2}, "outputs": 6}, {"idx": 2, "inputs": {"n": 3}, "outputs": 90}], "title": "Count All Valid Pickup and Delivery Options", "entry_fn_name": "countOrders"}
{"question_id": "1358", "schema": {"name": "numberOfSubstrings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcabc"}, "outputs": 10}, {"idx": 1, "inputs": {"s": "aaacb"}, "outputs": 3}, {"idx": 2, "inputs": {"s": "abc"}, "outputs": 1}], "title": "Number of Substrings Containing All Three Characters", "entry_fn_name": "numberOfSubstrings"}
{"question_id": "1356", "schema": {"name": "sortByBits", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [0, 1, 2, 3, 4, 5, 6, 7, 8]}, "outputs": [0, 1, 2, 4, 8, 3, 5, 6, 7]}, {"idx": 1, "inputs": {"arr": [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]}, "outputs": [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]}], "title": "Sort Integers by The Number of 1 Bits", "entry_fn_name": "sortByBits"}
{"question_id": "1335", "schema": {"name": "minDifficulty", "params": [{"name": "jobDifficulty", "type": "integer[]"}, {"type": "integer", "name": "d"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"jobDifficulty": [6, 5, 4, 3, 2, 1], "d": 2}, "outputs": 7}, {"idx": 1, "inputs": {"jobDifficulty": [9, 9, 9], "d": 4}, "outputs": -1}, {"idx": 2, "inputs": {"jobDifficulty": [1, 1, 1], "d": 3}, "outputs": 3}], "title": "Minimum Difficulty of a Job Schedule", "entry_fn_name": "minDifficulty"}
{"question_id": "1334", "schema": {"name": "findTheCity", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "integer", "name": "distanceThreshold"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "edges": [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]], "distanceThreshold": 4}, "outputs": 3}, {"idx": 1, "inputs": {"n": 5, "edges": [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]], "distanceThreshold": 2}, "outputs": 0}], "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "entry_fn_name": "findTheCity"}
{"question_id": "1333", "schema": {"name": "filterRestaurants", "params": [{"name": "restaurants", "type": "integer[][]"}, {"type": "integer", "name": "veganFriendly"}, {"type": "integer", "name": "maxPrice"}, {"type": "integer", "name": "maxDistance"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"restaurants": [[1, 4, 1, 40, 10], [2, 8, 0, 50, 5], [3, 8, 1, 30, 4], [4, 10, 0, 10, 3], [5, 1, 1, 15, 1]], "veganFriendly": 1, "maxPrice": 50, "maxDistance": 10}, "outputs": [3, 1, 5]}, {"idx": 1, "inputs": {"restaurants": [[1, 4, 1, 40, 10], [2, 8, 0, 50, 5], [3, 8, 1, 30, 4], [4, 10, 0, 10, 3], [5, 1, 1, 15, 1]], "veganFriendly": 0, "maxPrice": 50, "maxDistance": 10}, "outputs": [4, 3, 2, 1, 5]}, {"idx": 2, "inputs": {"restaurants": [[1, 4, 1, 40, 10], [2, 8, 0, 50, 5], [3, 8, 1, 30, 4], [4, 10, 0, 10, 3], [5, 1, 1, 15, 1]], "veganFriendly": 0, "maxPrice": 30, "maxDistance": 3}, "outputs": [4, 5]}], "title": "Filter Restaurants by Vegan-Friendly, Price and Distance", "entry_fn_name": "filterRestaurants"}
{"question_id": "1332", "schema": {"name": "removePalindromeSub", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ababa"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "abb"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "baabb"}, "outputs": 2}], "title": "Remove Palindromic Subsequences", "entry_fn_name": "removePalindromeSub"}
{"question_id": "1326", "schema": {"name": "minTaps", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "ranges"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "ranges": [3, 4, 1, 1, 0, 0]}, "outputs": 1}, {"idx": 1, "inputs": {"n": 3, "ranges": [0, 0, 0, 0]}, "outputs": -1}], "title": "Minimum Number of Taps to Open to Water a Garden", "entry_fn_name": "minTaps"}
{"question_id": "1325", "schema": {"name": "removeLeafNodes", "params": [{"name": "root", "type": "TreeNode"}, {"type": "integer", "name": "target"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 2, null, 2, 4], "target": 2}, "outputs": [1, null, 3, null, 4]}, {"idx": 1, "inputs": {"root": [1, 3, 3, 3, 2], "target": 3}, "outputs": [1, 3, null, null, 2]}, {"idx": 2, "inputs": {"root": [1, 2, null, 2, null, 2], "target": 2}, "outputs": [1]}], "title": "Delete Leaves With a Given Value", "entry_fn_name": "removeLeafNodes"}
{"question_id": "1324", "schema": {"name": "printVertically", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "HOW ARE YOU"}, "outputs": ["HAY", "ORO", "WEU"]}, {"idx": 1, "inputs": {"s": "TO BE OR NOT TO BE"}, "outputs": ["TBONTB", "OEROOE", "   T"]}, {"idx": 2, "inputs": {"s": "CONTEST IS COMING"}, "outputs": ["CIC", "OSO", "N M", "T I", "E N", "S G", "T"]}], "title": "Print Words Vertically", "entry_fn_name": "printVertically"}
{"question_id": "1323", "schema": {"name": "maximum69Number ", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 9669}, "outputs": 9969}, {"idx": 1, "inputs": {"num": 9996}, "outputs": 9999}, {"idx": 2, "inputs": {"num": 9999}, "outputs": 9999}], "title": "Maximum 69 Number", "entry_fn_name": "maximum69Number "}
{"question_id": "1345", "schema": {"name": "minJumps", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [100, -23, -23, 404, 100, 23, 23, 23, 3, 404]}, "outputs": 3}, {"idx": 1, "inputs": {"arr": [7]}, "outputs": 0}, {"idx": 2, "inputs": {"arr": [7, 6, 9, 6, 9, 6, 9, 7]}, "outputs": 1}], "title": "Jump Game IV", "entry_fn_name": "minJumps"}
{"question_id": "1344", "schema": {"name": "angleClock", "params": [{"name": "hour", "type": "integer"}, {"type": "integer", "name": "minutes"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"hour": 12, "minutes": 30}, "outputs": 165}, {"idx": 1, "inputs": {"hour": 3, "minutes": 30}, "outputs": 75}, {"idx": 2, "inputs": {"hour": 3, "minutes": 15}, "outputs": 7.5}], "title": "Angle Between Hands of a Clock", "entry_fn_name": "angleClock"}
{"question_id": "1343", "schema": {"name": "numOfSubarrays", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}, {"type": "integer", "name": "threshold"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 2, 2, 2, 5, 5, 5, 8], "k": 3, "threshold": 4}, "outputs": 3}, {"idx": 1, "inputs": {"arr": [11, 13, 17, 23, 29, 31, 7, 5, 2, 3], "k": 3, "threshold": 5}, "outputs": 6}], "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold", "entry_fn_name": "numOfSubarrays"}
{"question_id": "1342", "schema": {"name": "numberOfSteps", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 14}, "outputs": 6}, {"idx": 1, "inputs": {"num": 8}, "outputs": 4}, {"idx": 2, "inputs": {"num": 123}, "outputs": 12}], "title": "Number of Steps to Reduce a Number to Zero", "entry_fn_name": "numberOfSteps"}
{"question_id": "1320", "schema": {"name": "minimumDistance", "params": [{"name": "word", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word": "CAKE"}, "outputs": 3}, {"idx": 1, "inputs": {"word": "HAPPY"}, "outputs": 6}], "title": "Minimum Distance to Type a Word Using Two Fingers", "entry_fn_name": "minimumDistance"}
{"question_id": "1319", "schema": {"name": "makeConnected", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "connections"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "connections": [[0, 1], [0, 2], [1, 2]]}, "outputs": 1}, {"idx": 1, "inputs": {"n": 6, "connections": [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3]]}, "outputs": 2}, {"idx": 2, "inputs": {"n": 6, "connections": [[0, 1], [0, 2], [0, 3], [1, 2]]}, "outputs": -1}], "title": "Number of Operations to Make Network Connected", "entry_fn_name": "makeConnected"}
{"question_id": "1318", "schema": {"name": "minFlips", "params": [{"name": "a", "type": "integer"}, {"type": "integer", "name": "b"}, {"type": "integer", "name": "c"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": 2, "b": 6, "c": 5}, "outputs": 3}, {"idx": 1, "inputs": {"a": 4, "b": 2, "c": 7}, "outputs": 1}, {"idx": 2, "inputs": {"a": 1, "b": 2, "c": 3}, "outputs": 0}], "title": "Minimum Flips to Make a OR b Equal to c", "entry_fn_name": "minFlips"}
{"question_id": "1317", "schema": {"name": "getNoZeroIntegers", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": [1, 1]}, {"idx": 1, "inputs": {"n": 11}, "outputs": [2, 9]}], "title": "Convert Integer to the Sum of Two No-Zero Integers", "entry_fn_name": "getNoZeroIntegers"}
{"question_id": "1312", "schema": {"name": "minInsertions", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "zzazz"}, "outputs": 0}, {"idx": 1, "inputs": {"s": "mbadm"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "leetcode"}, "outputs": 5}], "title": "Minimum Insertion Steps to Make a String Palindrome", "entry_fn_name": "minInsertions"}
{"question_id": "1311", "schema": {"name": "watchedVideosByFriends", "params": [{"name": "watchedVideos", "type": "list<list<string>>"}, {"type": "integer[][]", "name": "friends"}, {"type": "integer", "name": "id"}, {"type": "integer", "name": "level"}], "return": {"type": "list<string>"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"watchedVideos": [["A", "B"], ["C"], ["B", "C"], ["D"]], "friends": [[1, 2], [0, 3], [0, 3], [1, 2]], "id": 0, "level": 1}, "outputs": ["B", "C"]}, {"idx": 1, "inputs": {"watchedVideos": [["A", "B"], ["C"], ["B", "C"], ["D"]], "friends": [[1, 2], [0, 3], [0, 3], [1, 2]], "id": 0, "level": 2}, "outputs": ["D"]}], "title": "Get Watched Videos by Your Friends", "entry_fn_name": "watchedVideosByFriends"}
{"question_id": "1310", "schema": {"name": "xorQueries", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 3, 4, 8], "queries": [[0, 1], [1, 2], [0, 3], [3, 3]]}, "outputs": [2, 7, 14, 8]}, {"idx": 1, "inputs": {"arr": [4, 8, 2, 10], "queries": [[2, 3], [1, 3], [0, 0], [0, 3]]}, "outputs": [8, 0, 4, 4]}], "title": "XOR Queries of a Subarray", "entry_fn_name": "xorQueries"}
{"question_id": "1309", "schema": {"name": "freqAlphabets", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "10#11#12"}, "outputs": "jkab"}, {"idx": 1, "inputs": {"s": "1326#"}, "outputs": "acz"}], "title": "Decrypt String from Alphabet to Integer Mapping", "entry_fn_name": "freqAlphabets"}
{"question_id": "2192", "schema": {"name": "getAncestors", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 8, "edgeList": [[0, 3], [0, 4], [1, 3], [2, 4], [2, 7], [3, 5], [3, 6], [3, 7], [4, 6]]}, "outputs": [[], [], [], [0, 1], [0, 2], [0, 1, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3]]}, {"idx": 1, "inputs": {"n": 5, "edgeList": [[0, 1], [0, 2], [0, 3], [0, 4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]}, "outputs": [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3]]}], "title": "All Ancestors of a Node in a Directed Acyclic Graph", "entry_fn_name": "getAncestors"}
{"question_id": "2269", "schema": {"name": "divisorSubstrings", "params": [{"name": "num", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 240, "k": 2}, "outputs": 2}, {"idx": 1, "inputs": {"num": 430043, "k": 2}, "outputs": 2}], "title": "Find the K-Beauty of a Number", "entry_fn_name": "divisorSubstrings"}
{"question_id": "1307", "schema": {"name": "isSolvable", "params": [{"name": "words", "type": "string[]"}, {"type": "string", "name": "result"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["SEND", "MORE"], "result": "MONEY"}, "outputs": true}, {"idx": 1, "inputs": {"words": ["SIX", "SEVEN", "SEVEN"], "result": "TWENTY"}, "outputs": true}, {"idx": 2, "inputs": {"words": ["LEET", "CODE"], "result": "POINT"}, "outputs": false}], "title": "Verbal Arithmetic Puzzle", "entry_fn_name": "isSolvable"}
{"question_id": "1306", "schema": {"name": "canReach", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "start"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [4, 2, 3, 0, 3, 1, 2], "start": 5}, "outputs": true}, {"idx": 1, "inputs": {"arr": [4, 2, 3, 0, 3, 1, 2], "start": 0}, "outputs": true}, {"idx": 2, "inputs": {"arr": [3, 0, 2, 1, 2], "start": 2}, "outputs": false}], "title": "Jump Game III", "entry_fn_name": "canReach"}
{"question_id": "1305", "schema": {"name": "getAllElements", "params": [{"name": "root1", "type": "TreeNode"}, {"type": "TreeNode", "name": "root2"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"root1": [2, 1, 4], "root2": [1, 0, 3]}, "outputs": [0, 1, 1, 2, 3, 4]}, {"idx": 1, "inputs": {"root1": [1, null, 8], "root2": [8, 1]}, "outputs": [1, 1, 8, 8]}], "title": "All Elements in Two Binary Search Trees", "entry_fn_name": "getAllElements"}
{"question_id": "1304", "schema": {"name": "sumZero", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": [-7, -1, 1, 3, 4]}, {"idx": 1, "inputs": {"n": 3}, "outputs": [-1, 0, 1]}, {"idx": 2, "inputs": {"n": 1}, "outputs": [0]}], "title": "Find N Unique Integers Sum up to Zero", "entry_fn_name": "sumZero"}
{"question_id": "1298", "schema": {"name": "maxCandies", "params": [{"name": "status", "type": "integer[]"}, {"type": "integer[]", "name": "candies"}, {"type": "integer[][]", "name": "keys"}, {"type": "integer[][]", "name": "containedBoxes"}, {"type": "integer[]", "name": "initialBoxes"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"status": [1, 0, 1, 0], "candies": [7, 5, 4, 100], "keys": [[], [], [1], []], "containedBoxes": [[1, 2], [3], [], []], "initialBoxes": [0]}, "outputs": 16}, {"idx": 1, "inputs": {"status": [1, 0, 0, 0, 0, 0], "candies": [1, 1, 1, 1, 1, 1], "keys": [[1, 2, 3, 4, 5], [], [], [], [], []], "containedBoxes": [[1, 2, 3, 4, 5], [], [], [], [], []], "initialBoxes": [0]}, "outputs": 6}], "title": "Maximum Candies You Can Get from Boxes", "entry_fn_name": "maxCandies"}
{"question_id": "1297", "schema": {"name": "maxFreq", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "maxLetters"}, {"type": "integer", "name": "minSize"}, {"type": "integer", "name": "maxSize"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aababcaab", "maxLetters": 2, "minSize": 3, "maxSize": 4}, "outputs": 2}, {"idx": 1, "inputs": {"s": "aaaa", "maxLetters": 1, "minSize": 3, "maxSize": 3}, "outputs": 2}], "title": "Maximum Number of Occurrences of a Substring", "entry_fn_name": "maxFreq"}
{"question_id": "1296", "schema": {"name": "isPossibleDivide", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 3, 4, 4, 5, 6], "k": 4}, "outputs": true}, {"idx": 1, "inputs": {"nums": [3, 2, 1, 2, 3, 4, 3, 4, 5, 9, 10, 11], "k": 3}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4], "k": 3}, "outputs": false}], "title": "Divide Array in Sets of K Consecutive Numbers", "entry_fn_name": "isPossibleDivide"}
{"question_id": "1295", "schema": {"name": "findNumbers", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [12, 345, 2, 6, 7896]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [555, 901, 482, 1771]}, "outputs": 1}], "title": "Find Numbers with Even Number of Digits", "entry_fn_name": "findNumbers"}
{"question_id": "2305", "schema": {"name": "distributeCookies", "params": [{"name": "cookies", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"cookies": [8, 15, 10, 20, 8], "k": 2}, "outputs": 31}, {"idx": 1, "inputs": {"cookies": [6, 1, 3, 2, 2, 4, 1, 2], "k": 3}, "outputs": 7}], "title": "Fair Distribution of Cookies", "entry_fn_name": "distributeCookies"}
{"question_id": "1293", "schema": {"name": "shortestPath", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 0, 0], [1, 1, 0], [0, 0, 0], [0, 1, 1], [0, 0, 0]], "k": 1}, "outputs": 6}, {"idx": 1, "inputs": {"grid": [[0, 1, 1], [1, 1, 1], [1, 0, 0]], "k": 1}, "outputs": -1}], "title": "Shortest Path in a Grid with Obstacles Elimination", "entry_fn_name": "shortestPath"}
{"question_id": "1292", "schema": {"name": "maxSideLength", "params": [{"name": "mat", "type": "integer[][]"}, {"type": "integer", "name": "threshold"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 1, 3, 2, 4, 3, 2], [1, 1, 3, 2, 4, 3, 2], [1, 1, 3, 2, 4, 3, 2]], "threshold": 4}, "outputs": 2}, {"idx": 1, "inputs": {"mat": [[2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2]], "threshold": 1}, "outputs": 0}], "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold", "entry_fn_name": "maxSideLength"}
{"question_id": "1290", "schema": {"name": "getDecimalValue", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 0, 1]}, "outputs": 5}, {"idx": 1, "inputs": {"head": [0]}, "outputs": 0}], "title": "Convert Binary Number in a Linked List to Integer", "entry_fn_name": "getDecimalValue"}
{"question_id": "1284", "schema": {"name": "minFlips", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[0, 0], [0, 1]]}, "outputs": 3}, {"idx": 1, "inputs": {"mat": [[0]]}, "outputs": 0}, {"idx": 2, "inputs": {"mat": [[1, 0, 0], [1, 0, 0]]}, "outputs": -1}], "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "entry_fn_name": "minFlips"}
{"question_id": "1283", "schema": {"name": "smallestDivisor", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "threshold"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 5, 9], "threshold": 6}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [44, 22, 33, 11, 1], "threshold": 5}, "outputs": 44}], "title": "Find the Smallest Divisor Given a Threshold", "entry_fn_name": "smallestDivisor"}
{"question_id": "1278", "schema": {"name": "palindromePartition", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abc", "k": 2}, "outputs": 1}, {"idx": 1, "inputs": {"s": "aabbc", "k": 3}, "outputs": 0}, {"idx": 2, "inputs": {"s": "leetcode", "k": 8}, "outputs": 0}], "title": "Palindrome Partitioning III", "entry_fn_name": "palindromePartition"}
{"question_id": "1277", "schema": {"name": "countSquares", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[0, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1]]}, "outputs": 15}, {"idx": 1, "inputs": {"matrix": [[1, 0, 1], [1, 1, 0], [1, 1, 0]]}, "outputs": 7}], "title": "Count Square Submatrices with All Ones", "entry_fn_name": "countSquares"}
{"question_id": "1276", "schema": {"name": "numOfBurgers", "params": [{"name": "tomatoSlices", "type": "integer"}, {"type": "integer", "name": "cheeseSlices"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"tomatoSlices": 16, "cheeseSlices": 7}, "outputs": [1, 6]}, {"idx": 1, "inputs": {"tomatoSlices": 17, "cheeseSlices": 4}, "outputs": []}, {"idx": 2, "inputs": {"tomatoSlices": 4, "cheeseSlices": 17}, "outputs": []}], "title": "Number of Burgers with No Waste of Ingredients", "entry_fn_name": "numOfBurgers"}
{"question_id": "1275", "schema": {"name": "tictactoe", "params": [{"name": "moves", "type": "integer[][]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"moves": [[0, 0], [2, 0], [1, 1], [2, 1], [2, 2]]}, "outputs": "A"}, {"idx": 1, "inputs": {"moves": [[0, 0], [1, 1], [0, 1], [0, 2], [1, 0], [2, 0]]}, "outputs": "B"}, {"idx": 2, "inputs": {"moves": [[0, 0], [1, 1], [2, 0], [1, 0], [1, 2], [2, 1], [0, 1], [0, 2], [2, 2]]}, "outputs": "Draw"}], "title": "Find Winner on a Tic Tac Toe Game", "entry_fn_name": "tictactoe"}
{"question_id": "1269", "schema": {"name": "numWays", "params": [{"name": "steps", "type": "integer"}, {"type": "integer", "name": "arrLen"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"steps": 3, "arrLen": 2}, "outputs": 4}, {"idx": 1, "inputs": {"steps": 2, "arrLen": 4}, "outputs": 2}, {"idx": 2, "inputs": {"steps": 4, "arrLen": 2}, "outputs": 8}], "title": "Number of Ways to Stay in the Same Place After Some Steps", "entry_fn_name": "numWays"}
{"question_id": "1268", "schema": {"name": "suggestedProducts", "params": [{"name": "products", "type": "string[]"}, {"type": "string", "name": "searchWord"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"products": ["mobile", "mouse", "moneypot", "monitor", "mousepad"], "searchWord": "mouse"}, "outputs": [["mobile", "moneypot", "monitor"], ["mobile", "moneypot", "monitor"], ["mouse", "mousepad"], ["mouse", "mousepad"], ["mouse", "mousepad"]]}, {"idx": 1, "inputs": {"products": ["havana"], "searchWord": "havana"}, "outputs": [["havana"], ["havana"], ["havana"], ["havana"], ["havana"], ["havana"]]}, {"idx": 2, "inputs": {"products": ["bags", "baggage", "banner", "box", "cloths"], "searchWord": "bags"}, "outputs": [["baggage", "bags", "banner"], ["baggage", "bags", "banner"], ["baggage", "bags"], ["bags"]]}], "title": "Search Suggestions System", "entry_fn_name": "suggestedProducts"}
{"question_id": "1266", "schema": {"name": "minTimeToVisitAllPoints", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 1], [3, 4], [-1, 0]]}, "outputs": 7}, {"idx": 1, "inputs": {"points": [[3, 2], [-2, 2]]}, "outputs": 5}], "title": "Minimum Time Visiting All Points", "entry_fn_name": "minTimeToVisitAllPoints"}
{"question_id": "2304", "schema": {"name": "minPathCost", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer[][]", "name": "moveCost"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[5, 3], [4, 0], [2, 1]], "moveCost": [[9, 8], [1, 5], [10, 12], [18, 6], [2, 4], [14, 3]]}, "outputs": 17}, {"idx": 1, "inputs": {"grid": [[5, 1, 2], [4, 0, 3]], "moveCost": [[12, 10, 15], [20, 23, 8], [21, 7, 1], [8, 1, 13], [9, 10, 25], [5, 3, 2]]}, "outputs": 6}], "title": "Minimum Path Cost in a Grid", "entry_fn_name": "minPathCost"}
{"question_id": "2218", "schema": {"name": "maxValueOfCoins", "params": [{"name": "piles", "type": "list<list<integer>>"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"piles": [[1, 100, 3], [7, 8, 9]], "k": 2}, "outputs": 101}, {"idx": 1, "inputs": {"piles": [[100], [100], [100], [100], [100], [100], [1, 1, 1, 1, 1, 1, 700]], "k": 7}, "outputs": 706}], "title": "Maximum Value of K Coins From Piles", "entry_fn_name": "maxValueOfCoins"}
{"question_id": "2215", "schema": {"name": "findDifference", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 3], "nums2": [2, 4, 6]}, "outputs": [[1, 3], [4, 6]]}, {"idx": 1, "inputs": {"nums1": [1, 2, 3, 3], "nums2": [1, 1, 2, 2]}, "outputs": [[3], []]}], "title": "Find the Difference of Two Arrays", "entry_fn_name": "findDifference"}
{"question_id": "1263", "schema": {"name": "minPushBox", "params": [{"name": "grid", "type": "character[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [["#", "#", "#", "#", "#", "#"], ["#", "T", "#", "#", "#", "#"], ["#", ".", ".", "B", ".", "#"], ["#", ".", "#", "#", ".", "#"], ["#", ".", ".", ".", "S", "#"], ["#", "#", "#", "#", "#", "#"]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [["#", "#", "#", "#", "#", "#"], ["#", "T", "#", "#", "#", "#"], ["#", ".", ".", "B", ".", "#"], ["#", "#", "#", "#", ".", "#"], ["#", ".", ".", ".", "S", "#"], ["#", "#", "#", "#", "#", "#"]]}, "outputs": -1}, {"idx": 2, "inputs": {"grid": [["#", "#", "#", "#", "#", "#"], ["#", "T", ".", ".", "#", "#"], ["#", ".", "#", "B", ".", "#"], ["#", ".", ".", ".", ".", "#"], ["#", ".", ".", ".", "S", "#"], ["#", "#", "#", "#", "#", "#"]]}, "outputs": 5}], "title": "Minimum Moves to Move a Box to Their Target Location", "entry_fn_name": "minPushBox"}
{"question_id": "1262", "schema": {"name": "maxSumDivThree", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 6, 5, 1, 8]}, "outputs": 18}, {"idx": 1, "inputs": {"nums": [4]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 4]}, "outputs": 12}], "title": "Greatest Sum Divisible by Three", "entry_fn_name": "maxSumDivThree"}
{"question_id": "1260", "schema": {"name": "shiftGrid", "params": [{"name": "grid", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"k": 1}, "outputs": [[9, 1, 2], [3, 4, 5], [6, 7, 8]]}, {"idx": 1, "inputs": {"k": 4}, "outputs": [[12, 0, 21, 13], [3, 8, 1, 9], [19, 7, 2, 5], [4, 6, 11, 10]]}, {"idx": 2, "inputs": {"k": 9}, "outputs": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}], "title": "Shift 2D Grid", "entry_fn_name": "shiftGrid"}
{"question_id": "2303", "schema": {"name": "calculateTax", "params": [{"name": "brackets", "type": "integer[][]"}, {"type": "integer", "name": "income"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"brackets": [[3, 50], [7, 10], [12, 25]], "income": 10}, "outputs": 2.65}, {"idx": 1, "inputs": {"brackets": [[1, 0], [4, 25], [5, 50]], "income": 2}, "outputs": 0.25}, {"idx": 2, "inputs": {"brackets": [[2, 50]], "income": 0}, "outputs": 0.0}], "title": "Calculate Amount Paid in Taxes", "entry_fn_name": "calculateTax"}
{"question_id": "1255", "schema": {"name": "maxScoreWords", "params": [{"name": "words", "type": "string[]"}, {"type": "character[]", "name": "letters"}, {"type": "integer[]", "name": "score"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["dog", "cat", "dad", "good"], "letters": ["a", "a", "c", "d", "d", "d", "g", "o", "o"], "score": [1, 0, 9, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, "outputs": 23}, {"idx": 1, "inputs": {"words": ["xxxz", "ax", "bx", "cx"], "letters": ["z", "a", "b", "c", "x", "x", "x"], "score": [4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10]}, "outputs": 27}, {"idx": 2, "inputs": {"words": ["leetcode"], "letters": ["l", "e", "t", "c", "o", "d"], "score": [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]}, "outputs": 0}], "title": "Maximum Score Words Formed by Letters", "entry_fn_name": "maxScoreWords"}
{"question_id": "1254", "schema": {"name": "closedIsland", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[0, 0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0]]}, "outputs": 1}, {"idx": 2, "inputs": {"grid": [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]]}, "outputs": 2}], "title": "Number of Closed Islands", "entry_fn_name": "closedIsland"}
{"question_id": "1253", "schema": {"name": "reconstructMatrix", "params": [{"name": "upper", "type": "integer"}, {"type": "integer", "name": "lower"}, {"type": "integer[]", "name": "colsum"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"upper": 2, "lower": 1, "colsum": [1, 1, 1]}, "outputs": [[1, 1, 0], [0, 0, 1]]}, {"idx": 1, "inputs": {"upper": 2, "lower": 3, "colsum": [2, 2, 1, 1]}, "outputs": []}, {"idx": 2, "inputs": {"upper": 5, "lower": 5, "colsum": [2, 1, 2, 0, 1, 0, 1, 2, 0, 1]}, "outputs": [[1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1]]}], "title": "Reconstruct a 2-Row Binary Matrix", "entry_fn_name": "reconstructMatrix"}
{"question_id": "1252", "schema": {"name": "oddCells", "params": [{"name": "m", "type": "integer"}, {"type": "integer", "name": "n"}, {"type": "integer[][]", "name": "indices"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 2, "n": 3, "indices": [[0, 1], [1, 1]]}, "outputs": 6}, {"idx": 1, "inputs": {"m": 2, "n": 2, "indices": [[1, 1], [0, 0]]}, "outputs": 0}], "title": "Cells with Odd Values in a Matrix", "entry_fn_name": "oddCells"}
{"question_id": "2312", "schema": {"name": "sellingWood", "params": [{"name": "m", "type": "integer"}, {"type": "integer", "name": "n"}, {"type": "integer[][]", "name": "prices"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"m": 3, "n": 5, "prices": [[1, 4, 2], [2, 2, 7], [2, 1, 3]]}, "outputs": 19}, {"idx": 1, "inputs": {"m": 4, "n": 6, "prices": [[3, 2, 10], [1, 4, 2], [4, 1, 3]]}, "outputs": 32}], "title": "Selling Pieces of Wood", "entry_fn_name": "sellingWood"}
{"question_id": "2217", "schema": {"name": "kthPalindrome", "params": [{"name": "queries", "type": "integer[]"}, {"type": "integer", "name": "intLength"}], "return": {"type": "long[]"}}, "test_cases": [{"idx": 0, "inputs": {"queries": [1, 2, 3, 4, 5, 90], "intLength": 3}, "outputs": [101, 111, 121, 131, 141, 999]}, {"idx": 1, "inputs": {"queries": [2, 4, 6], "intLength": 4}, "outputs": [1111, 1331, 1551]}], "title": "Find Palindrome With Fixed Length", "entry_fn_name": "kthPalindrome"}
{"question_id": "1250", "schema": {"name": "isGoodArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [12, 5, 7, 23]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [29, 6, 10]}, "outputs": true}, {"idx": 2, "inputs": {"nums": [3, 6]}, "outputs": false}], "title": "Check If It Is a Good Array", "entry_fn_name": "isGoodArray"}
{"question_id": "1249", "schema": {"name": "minRemoveToMakeValid", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "lee(t(c)o)de)"}, "outputs": "lee(t(c)o)de"}, {"idx": 1, "inputs": {"s": "a)b(c)d"}, "outputs": "ab(c)d"}, {"idx": 2, "inputs": {"s": "))(("}, "outputs": ""}], "title": "Minimum Remove to Make Valid Parentheses", "entry_fn_name": "minRemoveToMakeValid"}
{"question_id": "1248", "schema": {"name": "numberOfSubarrays", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 2, 1, 1], "k": 3}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 4, 6], "k": 1}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [2, 2, 2, 1, 2, 2, 1, 2, 2, 2], "k": 2}, "outputs": 16}], "title": "Count Number of Nice Subarrays", "entry_fn_name": "numberOfSubarrays"}
{"question_id": "1247", "schema": {"name": "minimumSwap", "params": [{"name": "s1", "type": "string"}, {"type": "string", "name": "s2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "xx", "s2": "yy"}, "outputs": 1}, {"idx": 1, "inputs": {"s1": "xy", "s2": "yx"}, "outputs": 2}, {"idx": 2, "inputs": {"s1": "xx", "s2": "xy"}, "outputs": -1}], "title": "Minimum Swaps to Make Strings Equal", "entry_fn_name": "minimumSwap"}
{"question_id": "1691", "schema": {"name": "maxHeight", "params": [{"name": "cuboids", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"cuboids": [[50, 45, 20], [95, 37, 53], [45, 23, 12]]}, "outputs": 190}, {"idx": 1, "inputs": {"cuboids": [[38, 25, 45], [76, 35, 3]]}, "outputs": 76}, {"idx": 2, "inputs": {"cuboids": [[7, 11, 17], [7, 17, 11], [11, 7, 17], [11, 17, 7], [17, 7, 11], [17, 11, 7]]}, "outputs": 102}], "title": "Maximum Height by Stacking Cuboids ", "entry_fn_name": "maxHeight"}
{"question_id": "1726", "schema": {"name": "tupleSameProduct", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 4, 6]}, "outputs": 8}, {"idx": 1, "inputs": {"nums": [1, 2, 4, 5, 10]}, "outputs": 16}], "title": "Tuple with Same Product", "entry_fn_name": "tupleSameProduct"}
{"question_id": "2309", "schema": {"name": "greatestLetter", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "lEeTcOd"}, "outputs": "E"}, {"idx": 1, "inputs": {"s": "arRAzFif"}, "outputs": "R"}, {"idx": 2, "inputs": {"s": "AbCdEfGhIjK"}, "outputs": ""}], "title": "Greatest English Letter in Upper and Lower Case", "entry_fn_name": "greatestLetter"}
{"question_id": "1227", "schema": {"name": "nthPersonGetsNthSeat", "params": [{"name": "n", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 1.0}, {"idx": 1, "inputs": {"n": 2}, "outputs": 0.5}], "title": "Airplane Seat Assignment Probability", "entry_fn_name": "nthPersonGetsNthSeat"}
{"question_id": "1240", "schema": {"name": "tilingRectangle", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "m"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "m": 3}, "outputs": 3}, {"idx": 1, "inputs": {"n": 5, "m": 8}, "outputs": 5}, {"idx": 2, "inputs": {"n": 11, "m": 13}, "outputs": 6}], "title": "Tiling a Rectangle with the Fewest Squares", "entry_fn_name": "tilingRectangle"}
{"question_id": "1239", "schema": {"name": "maxLength", "params": [{"name": "arr", "type": "list<string>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": ["un", "iq", "ue"]}, "outputs": 4}, {"idx": 1, "inputs": {"arr": ["cha", "r", "act", "ers"]}, "outputs": 6}, {"idx": 2, "inputs": {"arr": ["abcdefghijklmnopqrstuvwxyz"]}, "outputs": 26}], "title": "Maximum Length of a Concatenated String with Unique Characters", "entry_fn_name": "maxLength"}
{"question_id": "1238", "schema": {"name": "circularPermutation", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "start"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "start": 3}, "outputs": [3, 2, 0, 1]}, {"idx": 1, "inputs": {"n": 3, "start": 2}, "outputs": [2, 6, 7, 5, 4, 0, 1, 3]}], "title": "Circular Permutation in Binary Representation", "entry_fn_name": "circularPermutation"}
{"question_id": "1237", "schema": {"name": "findSolution", "params": [{"name": "function_id", "type": "integer"}, {"type": "integer", "name": "z"}], "return": {"type": "list<list<integer>>"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"function_id": 1, "z": 5}, "outputs": [[1, 4], [2, 3], [3, 2], [4, 1]]}, {"idx": 1, "inputs": {"function_id": 2, "z": 5}, "outputs": [[1, 5], [5, 1]]}], "title": "Find Positive Integer Solution for a Given Equation", "entry_fn_name": "findSolution"}
{"question_id": "2193", "schema": {"name": "minMovesToMakePalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aabb"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "letelt"}, "outputs": 2}], "title": "Minimum Number of Moves to Make Palindrome", "entry_fn_name": "minMovesToMakePalindrome"}
{"question_id": "2216", "schema": {"name": "minDeletion", "params": [{"type": "integer[]", "name": "nums"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 2, 3, 5]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 1, 2, 2, 3, 3]}, "outputs": 2}], "title": "Minimum Deletions to Make Array Beautiful", "entry_fn_name": "minDeletion"}
{"question_id": "2225", "schema": {"name": "findWinners", "params": [{"type": "integer[][]", "name": "matches"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"matches": [[1, 3], [2, 3], [3, 6], [5, 6], [5, 7], [4, 5], [4, 8], [4, 9], [10, 4], [10, 9]]}, "outputs": [[1, 2, 10], [4, 5, 7, 8]]}, {"idx": 1, "inputs": {"matches": [[2, 3], [1, 3], [5, 4], [6, 4]]}, "outputs": [[1, 2, 5, 6], []]}], "title": "Find Players With Zero or One Losses", "entry_fn_name": "findWinners"}
{"question_id": "2273", "schema": {"name": "removeAnagrams", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["abba", "baba", "bbaa", "cd", "cd"]}, "outputs": ["abba", "cd"]}, {"idx": 1, "inputs": {"words": ["a", "b", "c", "d", "e"]}, "outputs": ["a", "b", "c", "d", "e"]}], "title": "Find Resultant Array After Removing Anagrams", "entry_fn_name": "removeAnagrams"}
{"question_id": "1235", "schema": {"name": "jobScheduling", "params": [{"name": "startTime", "type": "integer[]"}, {"type": "integer[]", "name": "endTime"}, {"type": "integer[]", "name": "profit"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"startTime": [1, 2, 3, 3], "endTime": [3, 4, 5, 6], "profit": [50, 10, 40, 70]}, "outputs": 120}, {"idx": 1, "inputs": {"startTime": [1, 2, 3, 4, 6], "endTime": [3, 5, 10, 6, 9], "profit": [20, 20, 100, 70, 60]}, "outputs": 150}, {"idx": 2, "inputs": {"startTime": [1, 1, 1], "endTime": [2, 3, 4], "profit": [5, 6, 4]}, "outputs": 6}], "title": "Maximum Profit in Job Scheduling", "entry_fn_name": "jobScheduling"}
{"question_id": "1234", "schema": {"name": "balancedString", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "QWER"}, "outputs": 0}, {"idx": 1, "inputs": {"s": "QQWE"}, "outputs": 1}, {"idx": 2, "inputs": {"s": "QQQW"}, "outputs": 2}], "title": "Replace the Substring for Balanced String", "entry_fn_name": "balancedString"}
{"question_id": "1233", "schema": {"name": "removeSubfolders", "params": [{"name": "folder", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"folder": ["/a", "/a/b", "/c/d", "/c/d/e", "/c/f"]}, "outputs": ["/a", "/c/d", "/c/f"]}, {"idx": 1, "inputs": {"folder": ["/a", "/a/b/c", "/a/b/d"]}, "outputs": ["/a"]}, {"idx": 2, "inputs": {"folder": ["/a/b/c", "/a/b/ca", "/a/b/d"]}, "outputs": ["/a/b/c", "/a/b/ca", "/a/b/d"]}], "title": "Remove Sub-Folders from the Filesystem", "entry_fn_name": "removeSubfolders"}
{"question_id": "1232", "schema": {"name": "checkStraightLine", "params": [{"name": "coordinates", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"coordinates": [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]}, "outputs": true}, {"idx": 1, "inputs": {"coordinates": [[1, 1], [2, 2], [3, 4], [4, 5], [5, 6], [7, 7]]}, "outputs": false}], "title": "Check If It Is a Straight Line", "entry_fn_name": "checkStraightLine"}
{"question_id": "2321", "schema": {"name": "maximumsSplicedArray", "params": [{"name": "nums1", "type": "integer[]"}, {"type": "integer[]", "name": "nums2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [60, 60, 60], "nums2": [10, 90, 10]}, "outputs": 210}, {"idx": 1, "inputs": {"nums1": [20, 40, 20, 70, 30], "nums2": [50, 20, 50, 40, 20]}, "outputs": 220}, {"idx": 2, "inputs": {"nums1": [7, 11, 13], "nums2": [1, 1, 1]}, "outputs": 31}], "title": "Maximum Score Of Spliced Array", "entry_fn_name": "maximumsSplicedArray"}
{"question_id": "2202", "schema": {"name": "maximumTop", "params": [{"name": "nums", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 2, 2, 4, 0, 6], "k": 4}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [2], "k": 1}, "outputs": -1}], "title": "Maximize the Topmost Element After K Moves", "entry_fn_name": "maximumTop"}
{"question_id": "1224", "schema": {"name": "maxEqualFreq", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 2, 1, 1, 5, 3, 3, 5]}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5]}, "outputs": 13}], "title": "Maximum Equal Frequency", "entry_fn_name": "maxEqualFreq"}
{"question_id": "1223", "schema": {"name": "dieSimulator", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "rollMax"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "rollMax": [1, 1, 2, 2, 2, 3]}, "outputs": 34}, {"idx": 1, "inputs": {"n": 2, "rollMax": [1, 1, 1, 1, 1, 1]}, "outputs": 30}, {"idx": 2, "inputs": {"n": 3, "rollMax": [1, 1, 1, 2, 2, 3]}, "outputs": 181}], "title": "Dice Roll Simulation", "entry_fn_name": "dieSimulator"}
{"question_id": "1222", "schema": {"name": "queensAttacktheKing", "params": [{"name": "queens", "type": "integer[][]"}, {"type": "integer[]", "name": "king"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"queens": [[0, 1], [1, 0], [4, 0], [0, 4], [3, 3], [2, 4]], "king": [0, 0]}, "outputs": [[0, 1], [1, 0], [3, 3]]}, {"idx": 1, "inputs": {"queens": [[0, 0], [1, 1], [2, 2], [3, 4], [3, 5], [4, 4], [4, 5]], "king": [3, 3]}, "outputs": [[2, 2], [3, 4], [4, 4]]}, {"idx": 2, "inputs": {"queens": [[5, 6], [7, 7], [2, 1], [0, 7], [1, 6], [5, 1], [3, 7], [0, 3], [4, 0], [1, 2], [6, 3], [5, 0], [0, 4], [2, 2], [1, 1], [6, 4], [5, 4], [0, 0], [2, 6], [4, 5], [5, 2], [1, 4], [7, 5], [2, 3], [0, 5], [4, 2], [1, 0], [2, 7], [0, 1], [4, 6], [6, 1], [0, 6], [4, 3], [1, 7]], "king": [3, 4]}, "outputs": [[2, 3], [1, 4], [1, 6], [3, 7], [4, 3], [5, 4], [4, 5]]}], "title": "Queens That Can Attack the King", "entry_fn_name": "queensAttacktheKing"}
{"question_id": "1221", "schema": {"name": "balancedStringSplit", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "RLRRLLRLRL"}, "outputs": 4}, {"idx": 1, "inputs": {"s": "RLRRRLLRLL"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "LLLLRRRR"}, "outputs": 1}], "title": "Split a String in Balanced Strings", "entry_fn_name": "balancedStringSplit"}
{"question_id": "1960", "schema": {"name": "maxProduct", "params": [{"name": "s", "type": "string"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ababbb"}, "outputs": 9}, {"idx": 1, "inputs": {"s": "zaaaxbbby"}, "outputs": 9}], "title": "Maximum Product of the Length of Two Palindromic Substrings", "entry_fn_name": "maxProduct"}
{"question_id": "2226", "schema": {"name": "maximumCandies", "params": [{"type": "integer[]", "name": "candies"}, {"type": "long", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"candies": [5, 8, 6], "k": 3}, "outputs": 5}, {"idx": 1, "inputs": {"candies": [2, 5], "k": 11}, "outputs": 0}], "title": "Maximum Candies Allocated to K Children", "entry_fn_name": "maximumCandies"}
{"question_id": "2310", "schema": {"name": "minimumNumbers", "params": [{"name": "num", "type": "integer"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 58, "k": 9}, "outputs": 2}, {"idx": 1, "inputs": {"num": 37, "k": 2}, "outputs": -1}, {"idx": 2, "inputs": {"num": 0, "k": 7}, "outputs": 0}], "title": "Sum of Numbers With Units Digit K", "entry_fn_name": "minimumNumbers"}
{"question_id": "2191", "schema": {"name": "sortJumbled", "params": [{"type": "integer[]", "name": "mapping"}, {"type": "integer[]", "name": "nums"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"mapping": [8, 9, 4, 0, 2, 1, 3, 5, 7, 6], "nums": [991, 338, 38]}, "outputs": [338, 38, 991]}, {"idx": 1, "inputs": {"mapping": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "nums": [789, 456, 123]}, "outputs": [123, 456, 789]}], "title": "Sort the Jumbled Numbers", "entry_fn_name": "sortJumbled"}
{"question_id": "1220", "schema": {"name": "countVowelPermutation", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 5}, {"idx": 1, "inputs": {"n": 2}, "outputs": 10}, {"idx": 2, "inputs": {"n": 5}, "outputs": 68}], "title": "Count Vowels Permutation", "entry_fn_name": "countVowelPermutation"}
{"question_id": "1219", "schema": {"name": "getMaximumGold", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 6, 0], [5, 8, 7], [0, 9, 0]]}, "outputs": 24}, {"idx": 1, "inputs": {"grid": [[1, 0, 7], [2, 0, 6], [3, 4, 5], [0, 3, 0], [9, 0, 20]]}, "outputs": 28}], "title": "Path with Maximum Gold", "entry_fn_name": "getMaximumGold"}
{"question_id": "1218", "schema": {"name": "longestSubsequence", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "difference"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 4], "difference": 1}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [1, 3, 5, 7], "difference": 1}, "outputs": 1}, {"idx": 2, "inputs": {"arr": [1, 5, 7, 8, 5, 3, 4, 2, 1], "difference": -2}, "outputs": 4}], "title": "Longest Arithmetic Subsequence of Given Difference", "entry_fn_name": "longestSubsequence"}
{"question_id": "1217", "schema": {"name": "minCostToMoveChips", "params": [{"name": "position", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"position": [1, 2, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"position": [2, 2, 2, 3, 3]}, "outputs": 2}, {"idx": 2, "inputs": {"position": [1, 1000000000]}, "outputs": 1}], "title": "Minimum Cost to Move Chips to The Same Position", "entry_fn_name": "minCostToMoveChips"}
{"question_id": "1862", "schema": {"name": "sumOfFlooredPairs", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 5, 9]}, "outputs": 10}, {"idx": 1, "inputs": {"nums": [7, 7, 7, 7, 7, 7, 7]}, "outputs": 49}], "title": "Sum of Floored Pairs", "entry_fn_name": "sumOfFlooredPairs"}
{"question_id": "1514", "schema": {"name": "maxProbability", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "edges"}, {"type": "double[]", "name": "succProb"}, {"type": "integer", "name": "start"}, {"type": "integer", "name": "end"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "edges": [[0, 1], [1, 2], [0, 2]], "succProb": [0.5, 0.5, 0.2], "start": 0, "end": 2}, "outputs": 0.25}, {"idx": 1, "inputs": {"n": 3, "edges": [[0, 1], [1, 2], [0, 2]], "succProb": [0.5, 0.5, 0.3], "start": 0, "end": 2}, "outputs": 0.3}, {"idx": 2, "inputs": {"n": 3, "edges": [[0, 1]], "succProb": [0.5], "start": 0, "end": 2}, "outputs": 0.0}], "title": "Path with Maximum Probability", "entry_fn_name": "maxProbability"}
{"question_id": "1706", "schema": {"name": "findBall", "params": [{"type": "integer[][]", "name": "grid"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 1, 1, -1, -1], [1, 1, 1, -1, -1], [-1, -1, -1, 1, 1], [1, 1, 1, 1, -1], [-1, -1, -1, -1, -1]]}, "outputs": [1, -1, -1, -1, -1]}, {"idx": 1, "inputs": {"grid": [[-1]]}, "outputs": [-1]}, {"idx": 2, "inputs": {"grid": [[1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1]]}, "outputs": [0, 1, 2, 3, 4, -1]}], "title": "Where Will the Ball Fall", "entry_fn_name": "findBall"}
{"question_id": "1210", "schema": {"name": "minimumMoves", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0]]}, "outputs": 11}, {"idx": 1, "inputs": {"grid": [[0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0]]}, "outputs": 9}], "title": "Minimum Moves to Reach Target with Rotations", "entry_fn_name": "minimumMoves"}
{"question_id": "1208", "schema": {"name": "equalSubstring", "params": [{"name": "s", "type": "string"}, {"type": "string", "name": "t"}, {"type": "integer", "name": "maxCost"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcd", "t": "bcdf", "maxCost": 3}, "outputs": 3}, {"idx": 1, "inputs": {"s": "abcd", "t": "cdef", "maxCost": 3}, "outputs": 1}, {"idx": 2, "inputs": {"s": "abcd", "t": "acde", "maxCost": 0}, "outputs": 1}], "title": "Get Equal Substrings Within Budget", "entry_fn_name": "equalSubstring"}
{"question_id": "1209", "schema": {"name": "removeDuplicates", "params": [{"name": "s", "type": "string"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcd", "k": 2}, "outputs": "abcd"}, {"idx": 1, "inputs": {"s": "deeedbbcccbdaa", "k": 3}, "outputs": "aa"}, {"idx": 2, "inputs": {"s": "pbbcggttciiippooaais", "k": 2}, "outputs": "ps"}], "title": "Remove All Adjacent Duplicates in String II", "entry_fn_name": "removeDuplicates"}
{"question_id": "1207", "schema": {"name": "uniqueOccurrences", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 2, 1, 1, 3]}, "outputs": true}, {"idx": 1, "inputs": {"arr": [1, 2]}, "outputs": false}, {"idx": 2, "inputs": {"arr": [-3, 0, 1, -3, 1, 1, 1, -3, 10, 0]}, "outputs": true}], "title": "Unique Number of Occurrences", "entry_fn_name": "uniqueOccurrences"}
{"question_id": "1916", "schema": {"name": "waysToBuildRooms", "params": [{"name": "prevRoom", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"prevRoom": [-1, 0, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"prevRoom": [-1, 0, 0, 1, 2]}, "outputs": 6}], "title": "Count Ways to Build Rooms in an Ant Colony", "entry_fn_name": "waysToBuildRooms"}
{"question_id": "2201", "schema": {"name": "digArtifacts", "params": [{"type": "integer", "name": "n"}, {"type": "integer[][]", "name": "artifacts"}, {"type": "integer[][]", "name": "dig"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "artifacts": [[0, 0, 0, 0], [0, 1, 1, 1]], "dig": [[0, 0], [0, 1]]}, "outputs": 1}, {"idx": 1, "inputs": {"n": 2, "artifacts": [[0, 0, 0, 0], [0, 1, 1, 1]], "dig": [[0, 0], [0, 1], [1, 1]]}, "outputs": 2}], "title": "Count Artifacts That Can Be Extracted", "entry_fn_name": "digArtifacts"}
{"question_id": "1895", "schema": {"name": "largestMagicSquare", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[7, 1, 4, 5, 6], [2, 5, 1, 6, 4], [1, 5, 4, 3, 2], [1, 2, 7, 3, 4]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[5, 1, 3, 1], [9, 3, 3, 1], [1, 3, 3, 8]]}, "outputs": 2}], "title": "Largest Magic Square", "entry_fn_name": "largestMagicSquare"}
{"question_id": "2079", "schema": {"name": "wateringPlants", "params": [{"name": "plants", "type": "integer[]"}, {"type": "integer", "name": "capacity"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"plants": [2, 2, 3, 3], "capacity": 5}, "outputs": 14}, {"idx": 1, "inputs": {"plants": [1, 1, 1, 4, 2, 3], "capacity": 4}, "outputs": 30}, {"idx": 2, "inputs": {"plants": [7, 7, 7, 7, 7, 7, 7], "capacity": 8}, "outputs": 49}], "title": "Watering Plants", "entry_fn_name": "wateringPlants"}
{"question_id": "1203", "schema": {"name": "sortItems", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "m"}, {"type": "integer[]", "name": "group"}, {"type": "list<list<integer>>", "name": "beforeItems"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 8, "m": 2, "group": [-1, -1, 1, 0, 0, 1, 0, -1], "beforeItems": [[], [6], [5], [6], [3, 6], [], [], []]}, "outputs": [6, 3, 4, 1, 5, 2, 0, 7]}, {"idx": 1, "inputs": {"n": 8, "m": 2, "group": [-1, -1, 1, 0, 0, 1, 0, -1], "beforeItems": [[], [6], [5], [6], [3], [], [4], []]}, "outputs": []}], "title": "Sort Items by Groups Respecting Dependencies", "entry_fn_name": "sortItems"}
{"question_id": "1202", "schema": {"name": "smallestStringWithSwaps", "params": [{"name": "s", "type": "string"}, {"type": "list<list<integer>>", "name": "pairs"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "dcab", "pairs": [[0, 3], [1, 2]]}, "outputs": "bacd"}, {"idx": 1, "inputs": {"s": "dcab", "pairs": [[0, 3], [1, 2], [0, 2]]}, "outputs": "abcd"}, {"idx": 2, "inputs": {"s": "cba", "pairs": [[0, 1], [1, 2]]}, "outputs": "abc"}], "title": "Smallest String With Swaps", "entry_fn_name": "smallestStringWithSwaps"}
{"question_id": "1201", "schema": {"name": "nthUglyNumber", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "a"}, {"type": "integer", "name": "b"}, {"type": "integer", "name": "c"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "a": 2, "b": 3, "c": 5}, "outputs": 4}, {"idx": 1, "inputs": {"n": 4, "a": 2, "b": 3, "c": 4}, "outputs": 6}, {"idx": 2, "inputs": {"n": 5, "a": 2, "b": 11, "c": 13}, "outputs": 10}], "title": "Ugly Number III", "entry_fn_name": "nthUglyNumber"}
{"question_id": "1200", "schema": {"name": "minimumAbsDifference", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [4, 2, 1, 3]}, "outputs": [[1, 2], [2, 3], [3, 4]]}, {"idx": 1, "inputs": {"arr": [1, 3, 6, 10, 15]}, "outputs": [[1, 3]]}, {"idx": 2, "inputs": {"arr": [3, 8, -10, 23, 19, -4, -14, 27]}, "outputs": [[-14, -10], [19, 23], [23, 27]]}], "title": "Minimum Absolute Difference", "entry_fn_name": "minimumAbsDifference"}
{"question_id": "1944", "schema": {"name": "canSeePersonsCount", "params": [{"type": "integer[]", "name": "heights"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"heights": [10, 6, 8, 5, 11, 9]}, "outputs": [3, 1, 2, 1, 1, 0]}, {"idx": 1, "inputs": {"heights": [5, 1, 2, 3, 10]}, "outputs": [4, 1, 1, 1, 0]}], "title": "Number of Visible People in a Queue", "entry_fn_name": "canSeePersonsCount"}
{"question_id": "1405", "schema": {"name": "longestDiverseString", "params": [{"name": "a", "type": "integer"}, {"type": "integer", "name": "b"}, {"type": "integer", "name": "c"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"a": 1, "b": 1, "c": 7}, "outputs": "ccaccbcc"}, {"idx": 1, "inputs": {"a": 7, "b": 1, "c": 0}, "outputs": "aabaa"}], "title": "Longest Happy String", "entry_fn_name": "longestDiverseString"}
{"question_id": "2139", "schema": {"name": "minMoves", "params": [{"name": "target", "type": "integer"}, {"type": "integer", "name": "maxDoubles"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": 5, "maxDoubles": 0}, "outputs": 4}, {"idx": 1, "inputs": {"target": 19, "maxDoubles": 2}, "outputs": 7}, {"idx": 2, "inputs": {"target": 10, "maxDoubles": 4}, "outputs": 4}], "title": "Minimum Moves to Reach Target Score", "entry_fn_name": "minMoves"}
{"question_id": "1957", "schema": {"name": "makeFancyString", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leetcode"}, "outputs": "leetcode"}, {"idx": 1, "inputs": {"s": "aabaa"}, "outputs": "aabaa"}, {"idx": 2, "inputs": {"s": "aab"}, "outputs": "aab"}], "title": "Delete Characters to Make Fancy String", "entry_fn_name": "makeFancyString"}
{"question_id": "1192", "schema": {"name": "criticalConnections", "params": [{"name": "n", "type": "integer"}, {"type": "list<list<integer>>", "name": "connections"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "connections": [[0, 1], [1, 2], [2, 0], [1, 3]]}, "outputs": [[1, 3]]}, {"idx": 1, "inputs": {"n": 2, "connections": [[0, 1]]}, "outputs": [[0, 1]]}], "title": "Critical Connections in a Network", "entry_fn_name": "criticalConnections"}
{"question_id": "1191", "schema": {"name": "kConcatenationMaxSum", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2], "k": 3}, "outputs": 9}, {"idx": 1, "inputs": {"arr": [1, -2, 1], "k": 5}, "outputs": 2}, {"idx": 2, "inputs": {"arr": [-1, -2], "k": 7}, "outputs": 0}], "title": "K-Concatenation Maximum Sum", "entry_fn_name": "kConcatenationMaxSum"}
{"question_id": "1190", "schema": {"name": "reverseParentheses", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(abcd)"}, "outputs": "dcba"}, {"idx": 1, "inputs": {"s": "(u(love)i)"}, "outputs": "iloveu"}, {"idx": 2, "inputs": {"s": "(ed(et(oc))el)"}, "outputs": "leetcode"}], "title": "Reverse Substrings Between Each Pair of Parentheses", "entry_fn_name": "reverseParentheses"}
{"question_id": "1189", "schema": {"name": "maxNumberOfBalloons", "params": [{"name": "text", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"text": "nlaebolko"}, "outputs": 1}, {"idx": 1, "inputs": {"text": "loonbalxballpoon"}, "outputs": 2}, {"idx": 2, "inputs": {"text": "leetcode"}, "outputs": 0}], "title": "Maximum Number of Balloons", "entry_fn_name": "maxNumberOfBalloons"}
{"question_id": "1954", "schema": {"name": "minimumPerimeter", "params": [{"name": "neededApples", "type": "long"}], "return": {"type": "long"}}, "test_cases": [{"idx": 0, "inputs": {"neededApples": 1}, "outputs": 8}, {"idx": 1, "inputs": {"neededApples": 13}, "outputs": 16}, {"idx": 2, "inputs": {"neededApples": 1000000000}, "outputs": 5040}], "title": "Minimum Garden Perimeter to Collect Enough Apples", "entry_fn_name": "minimumPerimeter"}
{"question_id": "1187", "schema": {"name": "makeArrayIncreasing", "params": [{"name": "arr1", "type": "integer[]"}, {"type": "integer[]", "name": "arr2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr1": [1, 5, 3, 6, 7], "arr2": [1, 3, 2, 4]}, "outputs": 1}, {"idx": 1, "inputs": {"arr1": [1, 5, 3, 6, 7], "arr2": [4, 3, 1]}, "outputs": 2}, {"idx": 2, "inputs": {"arr1": [1, 5, 3, 6, 7], "arr2": [1, 6, 3, 3]}, "outputs": -1}], "title": "Make Array Strictly Increasing", "entry_fn_name": "makeArrayIncreasing"}
{"question_id": "1185", "schema": {"name": "dayOfTheWeek", "params": [{"name": "day", "type": "integer"}, {"type": "integer", "name": "month"}, {"type": "integer", "name": "year"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"day": 31, "month": 8, "year": 2019}, "outputs": "Saturday"}, {"idx": 1, "inputs": {"day": 18, "month": 7, "year": 1999}, "outputs": "Sunday"}, {"idx": 2, "inputs": {"day": 15, "month": 8, "year": 1993}, "outputs": "Sunday"}], "title": "Day of the Week", "entry_fn_name": "dayOfTheWeek"}
{"question_id": "1186", "schema": {"name": "maximumSum", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, -2, 0, 3]}, "outputs": 4}, {"idx": 1, "inputs": {"arr": [1, -2, -2, 3]}, "outputs": 3}, {"idx": 2, "inputs": {"arr": [-1, -1, -1, -1]}, "outputs": -1}], "title": "Maximum Subarray Sum with One Deletion", "entry_fn_name": "maximumSum"}
{"question_id": "1184", "schema": {"name": "distanceBetweenBusStops", "params": [{"name": "distance", "type": "integer[]"}, {"type": "integer", "name": "start"}, {"type": "integer", "name": "destination"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"distance": [1, 2, 3, 4], "start": 0, "destination": 1}, "outputs": 1}, {"idx": 1, "inputs": {"distance": [1, 2, 3, 4], "start": 0, "destination": 2}, "outputs": 3}, {"idx": 2, "inputs": {"distance": [1, 2, 3, 4], "start": 0, "destination": 3}, "outputs": 4}], "title": "Distance Between Bus Stops", "entry_fn_name": "distanceBetweenBusStops"}
{"question_id": "1390", "schema": {"name": "sumFourDivisors", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [21, 4, 7]}, "outputs": 32}, {"idx": 1, "inputs": {"nums": [21, 21]}, "outputs": 64}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 5]}, "outputs": 0}], "title": "Four Divisors", "entry_fn_name": "sumFourDivisors"}
{"question_id": "1507", "schema": {"name": "reformatDate", "params": [{"name": "date", "type": "string"}], "return": {"type": "string"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"date": "20th Oct 2052"}, "outputs": "2052-10-20"}, {"idx": 1, "inputs": {"date": "6th Jun 1933"}, "outputs": "1933-06-06"}, {"idx": 2, "inputs": {"date": "26th May 1960"}, "outputs": "1960-05-26"}], "title": "Reformat Date", "entry_fn_name": "reformatDate"}
{"question_id": "1178", "schema": {"name": "findNumOfValidWords", "params": [{"name": "words", "type": "string[]"}, {"type": "string[]", "name": "puzzles"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["aaaa", "asas", "able", "ability", "actt", "actor", "access"], "puzzles": ["aboveyz", "abrodyz", "abslute", "absoryz", "actresz", "gaswxyz"]}, "outputs": [1, 1, 3, 2, 4, 0]}, {"idx": 1, "inputs": {"words": ["apple", "pleas", "please"], "puzzles": ["aelwxyz", "aelpxyz", "aelpsxy", "saelpxy", "xaelpsy"]}, "outputs": [0, 1, 3, 2, 0]}], "title": "Number of Valid Words for Each Puzzle", "entry_fn_name": "findNumOfValidWords"}
{"question_id": "1177", "schema": {"name": "canMakePaliQueries", "params": [{"name": "s", "type": "string"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "list<boolean>"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"s": "abcda", "queries": [[3, 3, 0], [1, 2, 0], [0, 3, 1], [0, 3, 2], [0, 4, 1]]}, "outputs": [true, false, false, true, true]}, {"idx": 1, "inputs": {"s": "lyb", "queries": [[0, 1, 0], [2, 2, 1]]}, "outputs": [false, true]}], "title": "Can Make Palindrome from Substring", "entry_fn_name": "canMakePaliQueries"}
{"question_id": "1175", "schema": {"name": "numPrimeArrangements", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": 12}, {"idx": 1, "inputs": {"n": 100}, "outputs": 682289015}], "title": "Prime Arrangements", "entry_fn_name": "numPrimeArrangements"}
{"question_id": "1363", "schema": {"name": "largestMultipleOfThree", "params": [{"name": "digits", "type": "integer[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"digits": [8, 1, 9]}, "outputs": "981"}, {"idx": 1, "inputs": {"digits": [8, 6, 7, 1, 0]}, "outputs": "8760"}, {"idx": 2, "inputs": {"digits": [1]}, "outputs": ""}], "title": "Largest Multiple of Three", "entry_fn_name": "largestMultipleOfThree"}
{"question_id": "1362", "schema": {"name": "closestDivisors", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer[]"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"num": 8}, "outputs": [3, 3]}, {"idx": 1, "inputs": {"num": 123}, "outputs": [5, 25]}, {"idx": 2, "inputs": {"num": 999}, "outputs": [40, 25]}], "title": "Closest Divisors", "entry_fn_name": "closestDivisors"}
{"question_id": "1361", "schema": {"name": "validateBinaryTreeNodes", "params": [{"name": "n", "type": "integer"}, {"type": "integer[]", "name": "leftChild"}, {"type": "integer[]", "name": "rightChild"}], "return": {"type": "boolean"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "leftChild": [1, -1, 3, -1], "rightChild": [2, -1, -1, -1]}, "outputs": true}, {"idx": 1, "inputs": {"n": 4, "leftChild": [1, -1, 3, -1], "rightChild": [2, 3, -1, -1]}, "outputs": false}, {"idx": 2, "inputs": {"n": 2, "leftChild": [1, 0], "rightChild": [-1, -1]}, "outputs": false}], "title": "Validate Binary Tree Nodes", "entry_fn_name": "validateBinaryTreeNodes"}
{"question_id": "1360", "schema": {"name": "daysBetweenDates", "params": [{"name": "date1", "type": "string"}, {"type": "string", "name": "date2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"date1": "2019-06-29", "date2": "2019-06-30"}, "outputs": 1}, {"idx": 1, "inputs": {"date1": "2020-01-15", "date2": "2019-12-31"}, "outputs": 15}], "title": "Number of Days Between Two Dates", "entry_fn_name": "daysBetweenDates"}
{"question_id": "1170", "schema": {"name": "numSmallerByFrequency", "params": [{"name": "queries", "type": "string[]"}, {"type": "string[]", "name": "words"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"queries": ["cbd"], "words": ["zaaaz"]}, "outputs": [1]}, {"idx": 1, "inputs": {"queries": ["bbb", "cc"], "words": ["a", "aa", "aaa", "aaaa"]}, "outputs": [1, 2]}], "title": "Compare Strings by Frequency of the Smallest Character", "entry_fn_name": "numSmallerByFrequency"}
{"question_id": "1169", "schema": {"name": "invalidTransactions", "params": [{"name": "transactions", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"transactions": ["alice,20,800,mtv", "alice,50,100,beijing"]}, "outputs": ["alice,20,800,mtv", "alice,50,100,beijing"]}, {"idx": 1, "inputs": {"transactions": ["alice,20,800,mtv", "alice,50,1200,mtv"]}, "outputs": ["alice,50,1200,mtv"]}, {"idx": 2, "inputs": {"transactions": ["alice,20,800,mtv", "bob,50,1200,mtv"]}, "outputs": ["bob,50,1200,mtv"]}], "title": "Invalid Transactions", "entry_fn_name": "invalidTransactions"}
{"question_id": "1171", "schema": {"name": "removeZeroSumSublists", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, -3, 3, 1]}, "outputs": [3, 1]}, {"idx": 1, "inputs": {"head": [1, 2, 3, -3, 4]}, "outputs": [1, 2, 4]}, {"idx": 2, "inputs": {"head": [1, 2, 3, -3, -2]}, "outputs": [1]}], "title": "Remove Zero Sum Consecutive Nodes from Linked List", "entry_fn_name": "removeZeroSumSublists"}
{"question_id": "1935", "schema": {"name": "canBeTypedWords", "params": [{"name": "text", "type": "string"}, {"type": "string", "name": "brokenLetters"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"text": "hello world", "brokenLetters": "ad"}, "outputs": 1}, {"idx": 1, "inputs": {"text": "leet code", "brokenLetters": "lt"}, "outputs": 1}, {"idx": 2, "inputs": {"text": "leet code", "brokenLetters": "e"}, "outputs": 0}], "title": "Maximum Number of Words You Can Type", "entry_fn_name": "canBeTypedWords"}
{"question_id": "1155", "schema": {"name": "numRollsToTarget", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "k"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "k": 6, "target": 3}, "outputs": 1}, {"idx": 1, "inputs": {"n": 2, "k": 6, "target": 7}, "outputs": 6}, {"idx": 2, "inputs": {"n": 30, "k": 30, "target": 500}, "outputs": 222616187}], "title": "Number of Dice Rolls With Target Sum", "entry_fn_name": "numRollsToTarget"}
{"question_id": "1156", "schema": {"name": "maxRepOpt1", "params": [{"name": "text", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"text": "ababa"}, "outputs": 3}, {"idx": 1, "inputs": {"text": "aaabaaa"}, "outputs": 6}, {"idx": 2, "inputs": {"text": "aaaaa"}, "outputs": 5}], "title": "Swap For Longest Repeated Character Substring", "entry_fn_name": "maxRepOpt1"}
{"question_id": "1154", "schema": {"name": "dayOfYear", "params": [{"name": "date", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"date": "2019-01-09"}, "outputs": 9}, {"idx": 1, "inputs": {"date": "2019-02-10"}, "outputs": 41}], "title": "Day of the Year", "entry_fn_name": "dayOfYear"}
{"question_id": "1632", "schema": {"name": "matrixRankTransform", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 2], [3, 4]]}, "outputs": [[1, 2], [2, 3]]}, {"idx": 1, "inputs": {"matrix": [[7, 7], [7, 7]]}, "outputs": [[1, 1], [1, 1]]}, {"idx": 2, "inputs": {"matrix": [[20, -21, 14], [-19, 4, 19], [22, -47, 24], [-19, 4, 19]]}, "outputs": [[4, 2, 3], [1, 3, 4], [5, 1, 6], [1, 3, 4]]}], "title": "Rank Transform of a Matrix", "entry_fn_name": "matrixRankTransform"}
{"question_id": "1331", "schema": {"name": "arrayRankTransform", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [40, 10, 20, 30]}, "outputs": [4, 1, 2, 3]}, {"idx": 1, "inputs": {"arr": [100, 100, 100]}, "outputs": [1, 1, 1]}, {"idx": 2, "inputs": {"arr": [37, 12, 28, 9, 100, 56, 80, 5, 12]}, "outputs": [5, 3, 4, 2, 8, 6, 7, 1, 3]}], "title": "Rank Transform of an Array", "entry_fn_name": "arrayRankTransform"}
{"question_id": "1302", "schema": {"name": "deepestLeavesSum", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5, null, 6, 7, null, null, null, null, 8]}, "outputs": 15}, {"idx": 1, "inputs": {"root": [6, 7, 8, 2, 7, 1, 3, 9, null, 1, 4, null, null, null, 5]}, "outputs": 19}], "title": "Deepest Leaves Sum", "entry_fn_name": "deepestLeavesSum"}
{"question_id": "1329", "schema": {"name": "diagonalSort", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[3, 3, 1, 1], [2, 2, 1, 2], [1, 1, 1, 2]]}, "outputs": [[1, 1, 1, 1], [1, 2, 2, 2], [1, 2, 3, 3]]}, {"idx": 1, "inputs": {"mat": [[11, 25, 66, 1, 69, 7], [23, 55, 17, 45, 15, 52], [75, 31, 36, 44, 58, 8], [22, 27, 33, 25, 68, 4], [84, 28, 14, 11, 5, 50]]}, "outputs": [[5, 17, 4, 1, 52, 7], [11, 11, 25, 45, 8, 69], [14, 23, 25, 44, 58, 15], [22, 27, 31, 36, 50, 66], [84, 28, 75, 33, 55, 68]]}], "title": "Sort the Matrix Diagonally", "entry_fn_name": "diagonalSort"}
{"question_id": "1328", "schema": {"name": "breakPalindrome", "params": [{"name": "palindrome", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"palindrome": "abccba"}, "outputs": "aaccba"}, {"idx": 1, "inputs": {"palindrome": "a"}, "outputs": ""}], "title": "Break a Palindrome", "entry_fn_name": "breakPalindrome"}
{"question_id": "1147", "schema": {"name": "longestDecomposition", "params": [{"name": "text", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"text": "ghiabcdefhelloadamhelloabcdefghi"}, "outputs": 7}, {"idx": 1, "inputs": {"text": "merchant"}, "outputs": 1}, {"idx": 2, "inputs": {"text": "antaprezatepzapreanta"}, "outputs": 11}], "title": "Longest Chunked Palindrome Decomposition", "entry_fn_name": "longestDecomposition"}
{"question_id": "1143", "schema": {"name": "longestCommonSubsequence", "params": [{"name": "text1", "type": "string"}, {"type": "string", "name": "text2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"text1": "abcde", "text2": "ace"}, "outputs": 3}, {"idx": 1, "inputs": {"text1": "abc", "text2": "abc"}, "outputs": 3}, {"idx": 2, "inputs": {"text1": "abc", "text2": "def"}, "outputs": 0}], "title": "Longest Common Subsequence", "entry_fn_name": "longestCommonSubsequence"}
{"question_id": "1145", "schema": {"name": "btreeGameWinningMove", "params": [{"name": "root", "type": "TreeNode"}, {"type": "integer", "name": "n"}, {"type": "integer", "name": "x"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "n": 11, "x": 3}, "outputs": true}, {"idx": 1, "inputs": {"root": [1, 2, 3], "n": 3, "x": 1}, "outputs": false}], "title": "Binary Tree Coloring Game", "entry_fn_name": "btreeGameWinningMove"}
{"question_id": "1144", "schema": {"name": "movesToMakeZigzag", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [9, 6, 1, 6, 2]}, "outputs": 4}], "title": "Decrease Elements To Make Array Zigzag", "entry_fn_name": "movesToMakeZigzag"}
{"question_id": "1315", "schema": {"name": "sumEvenGrandparent", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [6, 7, 8, 2, 7, 1, 3, 9, null, 1, 4, null, null, null, 5]}, "outputs": 18}, {"idx": 1, "inputs": {"root": [1]}, "outputs": 0}], "title": "Sum of Nodes with Even-Valued Grandparent", "entry_fn_name": "sumEvenGrandparent"}
{"question_id": "1314", "schema": {"name": "matrixBlockSum", "params": [{"name": "mat", "type": "integer[][]"}, {"type": "integer", "name": "k"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], "k": 1}, "outputs": [[12, 21, 16], [27, 45, 33], [24, 39, 28]]}, {"idx": 1, "inputs": {"mat": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], "k": 2}, "outputs": [[45, 45, 45], [45, 45, 45], [45, 45, 45]]}], "title": "Matrix Block Sum", "entry_fn_name": "matrixBlockSum"}
{"question_id": "1313", "schema": {"name": "decompressRLElist", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": [2, 4, 4, 4]}, {"idx": 1, "inputs": {"nums": [1, 1, 2, 3]}, "outputs": [1, 3, 3]}], "title": "Decompress Run-Length Encoded List", "entry_fn_name": "decompressRLElist"}
{"question_id": "1140", "schema": {"name": "stoneGameII", "params": [{"name": "piles", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"piles": [2, 7, 9, 4, 4]}, "outputs": 10}, {"idx": 1, "inputs": {"piles": [1, 2, 3, 4, 5, 100]}, "outputs": 104}], "title": "Stone Game II", "entry_fn_name": "stoneGameII"}
{"question_id": "1139", "schema": {"name": "largest1BorderedSquare", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 1, 1], [1, 0, 1], [1, 1, 1]]}, "outputs": 9}, {"idx": 1, "inputs": {"grid": [[1, 1, 0, 0]]}, "outputs": 1}], "title": "Largest 1-Bordered Square", "entry_fn_name": "largest1BorderedSquare"}
{"question_id": "1138", "schema": {"name": "alphabetBoardPath", "params": [{"name": "target", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"target": "leet"}, "outputs": "DDR!UURRR!!DDD!"}, {"idx": 1, "inputs": {"target": "code"}, "outputs": "RR!DDRR!UUL!R!"}], "title": "Alphabet Board Path", "entry_fn_name": "alphabetBoardPath"}
{"question_id": "1137", "schema": {"name": "tribonacci", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": 4}, {"idx": 1, "inputs": {"n": 25}, "outputs": 1389537}], "title": "N-th Tribonacci Number", "entry_fn_name": "tribonacci"}
{"question_id": "1301", "schema": {"name": "pathsWithMaxScore", "params": [{"name": "board", "type": "list<string>"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"board": ["E23", "2X2", "12S"]}, "outputs": [7, 1]}, {"idx": 1, "inputs": {"board": ["E12", "1X1", "21S"]}, "outputs": [4, 2]}, {"idx": 2, "inputs": {"board": ["E11", "XXX", "11S"]}, "outputs": [0, 0]}], "title": "Number of Paths with Max Score", "entry_fn_name": "pathsWithMaxScore"}
{"question_id": "1300", "schema": {"name": "findBestValue", "params": [{"name": "arr", "type": "integer[]"}, {"type": "integer", "name": "target"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [4, 9, 3], "target": 10}, "outputs": 3}, {"idx": 1, "inputs": {"arr": [2, 3, 5], "target": 10}, "outputs": 5}, {"idx": 2, "inputs": {"arr": [60864, 25176, 27249, 21296, 20204], "target": 56803}, "outputs": 11361}], "title": "Sum of Mutated Array Closest to Target", "entry_fn_name": "findBestValue"}
{"question_id": "1299", "schema": {"name": "replaceElements", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [17, 18, 5, 4, 6, 1]}, "outputs": [18, 6, 6, 6, 1, -1]}, {"idx": 1, "inputs": {"arr": [400]}, "outputs": [-1]}], "title": "Replace Elements with Greatest Element on Right Side", "entry_fn_name": "replaceElements"}
{"question_id": "1131", "schema": {"name": "maxAbsValExpr", "params": [{"name": "arr1", "type": "integer[]"}, {"type": "integer[]", "name": "arr2"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr1": [1, 2, 3, 4], "arr2": [-1, 4, 5, 6]}, "outputs": 13}, {"idx": 1, "inputs": {"arr1": [1, -2, -5, 0, 10], "arr2": [0, -2, -1, -7, -4]}, "outputs": 20}], "title": "Maximum of Absolute Value Expression", "entry_fn_name": "maxAbsValExpr"}
{"question_id": "1129", "schema": {"name": "shortestAlternatingPaths", "params": [{"name": "n", "type": "integer"}, {"type": "integer[][]", "name": "redEdges"}, {"type": "integer[][]", "name": "blueEdges"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "redEdges": [[0, 1], [1, 2]], "blueEdges": []}, "outputs": [0, 1, -1]}, {"idx": 1, "inputs": {"n": 3, "redEdges": [[0, 1]], "blueEdges": [[2, 1]]}, "outputs": [0, 1, -1]}], "title": "Shortest Path with Alternating Colors", "entry_fn_name": "shortestAlternatingPaths"}
{"question_id": "1130", "schema": {"name": "mctFromLeafValues", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [6, 2, 4]}, "outputs": 32}, {"idx": 1, "inputs": {"arr": [4, 11]}, "outputs": 44}], "title": "Minimum Cost Tree From Leaf Values", "entry_fn_name": "mctFromLeafValues"}
{"question_id": "1128", "schema": {"name": "numEquivDominoPairs", "params": [{"name": "dominoes", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"dominoes": [[1, 2], [2, 1], [3, 4], [5, 6]]}, "outputs": 1}, {"idx": 1, "inputs": {"dominoes": [[1, 2], [1, 2], [1, 1], [1, 2], [2, 2]]}, "outputs": 3}], "title": "Number of Equivalent Domino Pairs", "entry_fn_name": "numEquivDominoPairs"}
{"question_id": "1289", "schema": {"name": "minFallingPathSum", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": 13}, {"idx": 1, "inputs": {"grid": [[7]]}, "outputs": 7}], "title": "Minimum Falling Path Sum II", "entry_fn_name": "minFallingPathSum"}
{"question_id": "1627", "schema": {"name": "areConnected", "params": [{"name": "n", "type": "integer"}, {"type": "integer", "name": "threshold"}, {"type": "integer[][]", "name": "queries"}], "return": {"type": "list<boolean>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "threshold": 2, "queries": [[1, 4], [2, 5], [3, 6]]}, "outputs": [false, false, true]}, {"idx": 1, "inputs": {"n": 6, "threshold": 0, "queries": [[4, 5], [3, 4], [3, 2], [2, 6], [1, 3]]}, "outputs": [true, true, true, true, true]}, {"idx": 2, "inputs": {"n": 5, "threshold": 1, "queries": [[4, 5], [4, 5], [3, 2], [2, 3], [3, 4]]}, "outputs": [false, false, false, false, false]}], "title": "Graph Connectivity With Threshold", "entry_fn_name": "areConnected"}
{"question_id": "1288", "schema": {"name": "removeCoveredIntervals", "params": [{"name": "intervals", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 4], [3, 6], [2, 8]]}, "outputs": 2}, {"idx": 1, "inputs": {"intervals": [[1, 4], [2, 3]]}, "outputs": 1}], "title": "Remove Covered Intervals", "entry_fn_name": "removeCoveredIntervals"}
{"question_id": "1287", "schema": {"name": "findSpecialInteger", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 2, 6, 6, 6, 6, 7, 10]}, "outputs": 6}, {"idx": 1, "inputs": {"arr": [1, 1]}, "outputs": 1}], "title": "Element Appearing More Than 25% In Sorted Array", "entry_fn_name": "findSpecialInteger"}
{"question_id": "1125", "schema": {"name": "smallestSufficientTeam", "params": [{"name": "req_skills", "type": "string[]"}, {"type": "list<list<string>>", "name": "people"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"req_skills": ["java", "nodejs", "reactjs"], "people": [["java"], ["nodejs"], ["nodejs", "reactjs"]]}, "outputs": [0, 2]}, {"idx": 1, "inputs": {"req_skills": ["algorithms", "math", "java", "reactjs", "csharp", "aws"], "people": [["algorithms", "math", "java"], ["algorithms", "math", "reactjs"], ["java", "csharp", "aws"], ["reactjs", "csharp"], ["csharp", "math"], ["aws", "java"]]}, "outputs": [1, 2]}], "title": "Smallest Sufficient Team", "entry_fn_name": "smallestSufficientTeam"}
{"question_id": "1124", "schema": {"name": "longestWPI", "params": [{"name": "hours", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"hours": [9, 9, 6, 0, 6, 6, 9]}, "outputs": 3}, {"idx": 1, "inputs": {"hours": [6, 6, 6]}, "outputs": 0}], "title": "Longest Well-Performing Interval", "entry_fn_name": "longestWPI"}
{"question_id": "1123", "schema": {"name": "lcaDeepestLeaves", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]}, "outputs": [2, 7, 4]}, {"idx": 1, "inputs": {"root": [1]}, "outputs": [1]}, {"idx": 2, "inputs": {"root": [0, 1, 3, null, 2]}, "outputs": [2]}], "title": "Lowest Common Ancestor of Deepest Leaves", "entry_fn_name": "lcaDeepestLeaves"}
{"question_id": "1122", "schema": {"name": "relativeSortArray", "params": [{"name": "arr1", "type": "integer[]"}, {"type": "integer[]", "name": "arr2"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr1": [2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19], "arr2": [2, 1, 4, 3, 9, 6]}, "outputs": [2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]}, {"idx": 1, "inputs": {"arr1": [28, 6, 22, 8, 44, 17], "arr2": [22, 28, 8, 6]}, "outputs": [22, 28, 8, 6, 17, 44]}], "title": "Relative Sort Array", "entry_fn_name": "relativeSortArray"}
{"question_id": "1291", "schema": {"name": "sequentialDigits", "params": [{"name": "low", "type": "integer"}, {"name": "high", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"low": 100, "high": 300}, "outputs": [123, 234]}, {"idx": 1, "inputs": {"low": 1000, "high": 13000}, "outputs": [1234, 2345, 3456, 4567, 5678, 6789, 12345]}], "title": "Sequential Digits", "entry_fn_name": "sequentialDigits"}
{"question_id": "1619", "schema": {"name": "trimMean", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]}, "outputs": 2.0}, {"idx": 1, "inputs": {"arr": [6, 2, 7, 5, 1, 2, 0, 3, 10, 2, 5, 0, 5, 5, 0, 8, 7, 6, 8, 0]}, "outputs": 4.0}, {"idx": 2, "inputs": {"arr": [6, 0, 7, 0, 7, 5, 7, 8, 3, 4, 0, 7, 8, 1, 6, 8, 1, 1, 2, 4, 8, 1, 9, 5, 4, 3, 8, 5, 10, 8, 6, 6, 1, 0, 6, 10, 8, 2, 3, 4]}, "outputs": 4.77778}], "title": "Mean of Array After Removing Some Elements", "entry_fn_name": "trimMean"}
{"question_id": "1111", "schema": {"name": "maxDepthAfterSplit", "params": [{"name": "seq", "type": "string"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"seq": "(()())"}, "outputs": [0, 1, 1, 1, 1, 0]}, {"idx": 1, "inputs": {"seq": "()(())()"}, "outputs": [0, 0, 0, 1, 1, 0, 1, 1]}], "title": "Maximum Nesting Depth of Two Valid Parentheses Strings", "entry_fn_name": "maxDepthAfterSplit"}
{"question_id": "1110", "schema": {"name": "delNodes", "params": [{"name": "root", "type": "TreeNode"}, {"type": "integer[]", "name": "to_delete"}], "return": {"type": "list<TreeNode>"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5, 6, 7], "to_delete": [3, 5]}, "outputs": [[1, 2, null, 4], [6], [7]]}, {"idx": 1, "inputs": {"root": [1, 2, 4, null, 3], "to_delete": [3]}, "outputs": [[1, 2, 4]]}], "title": "Delete Nodes And Return Forest", "entry_fn_name": "delNodes"}
{"question_id": "1109", "schema": {"name": "corpFlightBookings", "params": [{"name": "bookings", "type": "integer[][]"}, {"type": "integer", "name": "n"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"bookings": [[1, 2, 10], [2, 3, 20], [2, 5, 25]], "n": 5}, "outputs": [10, 55, 45, 25, 25]}, {"idx": 1, "inputs": {"bookings": [[1, 2, 10], [2, 2, 15]], "n": 2}, "outputs": [10, 25]}], "title": "Corporate Flight Bookings", "entry_fn_name": "corpFlightBookings"}
{"question_id": "1108", "schema": {"name": "defangIPaddr", "params": [{"name": "address", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"address": "1.1.1.1"}, "outputs": "1[.]1[.]1[.]1"}, {"idx": 1, "inputs": {"address": "255.100.50.0"}, "outputs": "255[.]100[.]50[.]0"}], "title": "Defanging an IP Address", "entry_fn_name": "defangIPaddr"}
{"question_id": "1106", "schema": {"name": "parseBoolExpr", "params": [{"name": "expression", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "!(f)"}, "outputs": true}, {"idx": 1, "inputs": {"expression": "|(f,t)"}, "outputs": true}, {"idx": 2, "inputs": {"expression": "&(t,f)"}, "outputs": false}], "title": "Parsing A Boolean Expression", "entry_fn_name": "parseBoolExpr"}
{"question_id": "1105", "schema": {"name": "minHeightShelves", "params": [{"name": "books", "type": "integer[][]"}, {"type": "integer", "name": "shelf_width"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"books": [[1, 1], [2, 3], [2, 3], [1, 1], [1, 1], [1, 1], [1, 2]], "shelf_width": 4}, "outputs": 6}, {"idx": 1, "inputs": {"books": [[1, 3], [2, 4], [3, 2]], "shelfWidth": 6}, "outputs": 4}], "title": "Filling Bookcase Shelves", "entry_fn_name": "minHeightShelves"}
{"question_id": "1103", "schema": {"name": "distributeCandies", "params": [{"name": "candies", "type": "integer"}, {"type": "integer", "name": "num_people"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"candies": 7, "num_people": 4}, "outputs": [1, 2, 3, 1]}, {"idx": 1, "inputs": {"candies": 10, "num_people": 3}, "outputs": [5, 2, 3]}], "title": "Distribute Candies to People", "entry_fn_name": "distributeCandies"}
{"question_id": "1104", "schema": {"name": "pathInZigZagTree", "params": [{"name": "label", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"label": 14}, "outputs": [1, 3, 4, 14]}, {"idx": 1, "inputs": {"label": 26}, "outputs": [1, 2, 6, 10, 26]}], "title": "Path In Zigzag Labelled Binary Tree", "entry_fn_name": "pathInZigZagTree"}
{"question_id": "1096", "schema": {"name": "braceExpansionII", "params": [{"name": "expression", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "{a,b}{c,{d,e}}"}, "outputs": ["ac", "ad", "ae", "bc", "bd", "be"]}, {"idx": 1, "inputs": {"expression": "{{a,z},a{b,c},{ab,z}}"}, "outputs": ["a", "ab", "ac", "z"]}], "title": "Brace Expansion II", "entry_fn_name": "braceExpansionII"}
{"question_id": "1095", "schema": {"name": "findInMountainArray", "params": [{"name": "secret", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"array": [1, 2, 3, 4, 5, 3, 1], "target": 3}, "outputs": 2}, {"idx": 1, "inputs": {"array": [0, 1, 2, 4, 2, 1], "target": 3}, "outputs": -1}], "title": "Find in Mountain Array", "entry_fn_name": "findInMountainArray"}
{"question_id": "1094", "schema": {"name": "carPooling", "params": [{"name": "trips", "type": "integer[][]"}, {"name": "capacity", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"trips": [[2, 1, 5], [3, 3, 7]], "capacity": 4}, "outputs": false}, {"idx": 1, "inputs": {"trips": [[2, 1, 5], [3, 3, 7]], "capacity": 5}, "outputs": true}], "title": "Car Pooling", "entry_fn_name": "carPooling"}
{"question_id": "1093", "schema": {"name": "sampleStats", "params": [{"name": "count", "type": "integer[]"}], "return": {"type": "double[]"}}, "test_cases": [{"idx": 0, "inputs": {"count": [0, 1, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, "outputs": [1.0, 3.0, 2.375, 2.5, 3.0]}, {"idx": 1, "inputs": {"count": [0, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}, "outputs": [1.0, 4.0, 2.18182, 2.0, 1.0]}], "title": "Statistics from a Large Sample", "entry_fn_name": "sampleStats"}
{"question_id": "1091", "schema": {"name": "shortestPathBinaryMatrix", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1], [1, 0]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[0, 0, 0], [1, 1, 0], [1, 1, 0]]}, "outputs": 4}, {"idx": 2, "inputs": {"grid": [[1, 0, 0], [1, 1, 0], [1, 1, 0]]}, "outputs": -1}], "title": "Shortest Path in Binary Matrix", "entry_fn_name": "shortestPathBinaryMatrix"}
{"question_id": "1092", "schema": {"name": "shortestCommonSupersequence", "params": [{"name": "str1", "type": "string"}, {"name": "str2", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"str1": "abac", "str2": "cab"}, "outputs": "cabac"}, {"idx": 1, "inputs": {"str1": "aaaaaaaa", "str2": "aaaaaaaa"}, "outputs": "aaaaaaaa"}], "title": "Shortest Common Supersequence ", "entry_fn_name": "shortestCommonSupersequence"}
{"question_id": "1090", "schema": {"name": "largestValsFromLabels", "params": [{"name": "values", "type": "integer[]"}, {"name": "labels", "type": "integer[]"}, {"name": "numWanted", "type": "integer"}, {"name": "useLimit", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"values": [5, 4, 3, 2, 1], "labels": [1, 1, 2, 2, 3], "numWanted": 3, "useLimit": 1}, "outputs": 9}, {"idx": 1, "inputs": {"values": [5, 4, 3, 2, 1], "labels": [1, 3, 3, 3, 2], "numWanted": 3, "useLimit": 2}, "outputs": 12}, {"idx": 2, "inputs": {"values": [9, 8, 8, 7, 6], "labels": [0, 0, 0, 1, 1], "numWanted": 3, "useLimit": 1}, "outputs": 16}], "title": "Largest Values From Labels", "entry_fn_name": "largestValsFromLabels"}
{"question_id": "1089", "schema": {"name": "duplicateZeros", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 0, 2, 3, 0, 4, 5, 0]}, "outputs": [1, 0, 0, 2, 3, 0, 0, 4]}, {"idx": 1, "inputs": {"arr": [1, 2, 3]}, "outputs": [1, 2, 3]}], "title": "Duplicate Zeros", "entry_fn_name": "duplicateZeros"}
{"question_id": "1079", "schema": {"name": "numTilePossibilities", "params": [{"name": "tiles", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tiles": "AAB"}, "outputs": 8}, {"idx": 1, "inputs": {"tiles": "AAABBC"}, "outputs": 188}, {"idx": 2, "inputs": {"tiles": "V"}, "outputs": 1}], "title": "Letter Tile Possibilities", "entry_fn_name": "numTilePossibilities"}
{"question_id": "1081", "schema": {"name": "smallestSubsequence", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "bcabc"}, "outputs": "abc"}, {"idx": 1, "inputs": {"s": "cbacdcbc"}, "outputs": "acdb"}], "title": "Smallest Subsequence of Distinct Characters", "entry_fn_name": "smallestSubsequence"}
{"question_id": "1080", "schema": {"name": "sufficientSubset", "params": [{"name": "root", "type": "TreeNode"}, {"name": "limit", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, -99, -99, 7, 8, 9, -99, -99, 12, 13, -99, 14], "limit": 1}, "outputs": [1, 2, 3, 4, null, null, 7, 8, 9, null, 14]}, {"idx": 1, "inputs": {"root": [5, 4, 8, 11, null, 17, 4, 7, 1, null, null, 5, 3], "limit": 22}, "outputs": [5, 4, 8, 11, null, 17, 4, 7, null, null, null, 5]}, {"idx": 2, "inputs": {"root": [1, 2, -3, -5, null, 4, null], "limit": -1}, "outputs": [1, null, -3, 4]}], "title": "Insufficient Nodes in Root to Leaf Paths", "entry_fn_name": "sufficientSubset"}
{"question_id": "1078", "schema": {"name": "findOcurrences", "params": [{"name": "text", "type": "string"}, {"name": "first", "type": "string"}, {"name": "second", "type": "string"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"text": "alice is a good girl she is a good student", "first": "a", "second": "good"}, "outputs": ["girl", "student"]}, {"idx": 1, "inputs": {"text": "we will we will rock you", "first": "we", "second": "will"}, "outputs": ["we", "rock"]}], "title": "Occurrences After Bigram", "entry_fn_name": "findOcurrences"}
{"question_id": "1073", "schema": {"name": "addNegabinary", "params": [{"name": "arr1", "type": "integer[]"}, {"name": "arr2", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr1": [1, 1, 1, 1, 1], "arr2": [1, 0, 1]}, "outputs": [1, 0, 0, 0, 0]}, {"idx": 1, "inputs": {"arr1": [0], "arr2": [0]}, "outputs": [0]}, {"idx": 2, "inputs": {"arr1": [0], "arr2": [1]}, "outputs": [1]}], "title": "Adding Two Negabinary Numbers", "entry_fn_name": "addNegabinary"}
{"question_id": "1072", "schema": {"name": "maxEqualRowsAfterFlips", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[0, 1], [1, 1]]}, "outputs": 1}, {"idx": 1, "inputs": {"matrix": [[0, 1], [1, 0]]}, "outputs": 2}, {"idx": 2, "inputs": {"matrix": [[0, 0, 0], [0, 0, 1], [1, 1, 0]]}, "outputs": 2}], "title": "Flip Columns For Maximum Number of Equal Rows", "entry_fn_name": "maxEqualRowsAfterFlips"}
{"question_id": "1071", "schema": {"name": "gcdOfStrings", "params": [{"name": "str1", "type": "string"}, {"name": "str2", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"str1": "ABCABC", "str2": "ABC"}, "outputs": "ABC"}, {"idx": 1, "inputs": {"str1": "ABABAB", "str2": "ABAB"}, "outputs": "AB"}, {"idx": 2, "inputs": {"str1": "LEET", "str2": "CODE"}, "outputs": ""}], "title": "Greatest Common Divisor of Strings", "entry_fn_name": "gcdOfStrings"}
{"question_id": "1074", "schema": {"name": "numSubmatrixSumTarget", "params": [{"name": "matrix", "type": "integer[][]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[0, 1, 0], [1, 1, 1], [0, 1, 0]], "target": 0}, "outputs": 4}, {"idx": 1, "inputs": {"matrix": [[1, -1], [-1, 1]], "target": 0}, "outputs": 5}, {"idx": 2, "inputs": {"matrix": [[904]], "target": 0}, "outputs": 0}], "title": "Number of Submatrices That Sum to Target", "entry_fn_name": "numSubmatrixSumTarget"}
{"question_id": "1054", "schema": {"name": "rearrangeBarcodes", "params": [{"name": "barcodes", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"barcodes": [1, 1, 1, 2, 2, 2]}, "outputs": [2, 1, 2, 1, 2, 1]}, {"idx": 1, "inputs": {"barcodes": [1, 1, 1, 1, 2, 2, 3, 3]}, "outputs": [1, 3, 1, 3, 1, 2, 1, 2]}], "title": "Distant Barcodes", "entry_fn_name": "rearrangeBarcodes"}
{"question_id": "1053", "schema": {"name": "prevPermOpt1", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 2, 1]}, "outputs": [3, 1, 2]}, {"idx": 1, "inputs": {"arr": [1, 1, 5]}, "outputs": [1, 1, 5]}, {"idx": 2, "inputs": {"arr": [1, 9, 4, 6, 7]}, "outputs": [1, 7, 4, 6, 9]}], "title": "Previous Permutation With One Swap", "entry_fn_name": "prevPermOpt1"}
{"question_id": "1052", "schema": {"name": "maxSatisfied", "params": [{"name": "customers", "type": "integer[]"}, {"name": "grumpy", "type": "integer[]"}, {"name": "minutes", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"customers": [1, 0, 1, 2, 1, 1, 7, 5], "grumpy": [0, 1, 0, 1, 0, 1, 0, 1], "minutes": 3}, "outputs": 16}, {"idx": 1, "inputs": {"customers": [1], "grumpy": [0], "minutes": 1}, "outputs": 1}], "title": "Grumpy Bookstore Owner", "entry_fn_name": "maxSatisfied"}
{"question_id": "1051", "schema": {"name": "heightChecker", "params": [{"name": "heights", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"heights": [1, 1, 4, 2, 1, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"heights": [5, 1, 2, 3, 4]}, "outputs": 5}, {"idx": 2, "inputs": {"heights": [1, 2, 3, 4, 5]}, "outputs": 0}], "title": "Height Checker", "entry_fn_name": "heightChecker"}
{"question_id": "1163", "schema": {"name": "lastSubstring", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abab"}, "outputs": "bab"}, {"idx": 1, "inputs": {"s": "leetcode"}, "outputs": "tcode"}], "title": "Last Substring in Lexicographical Order", "entry_fn_name": "lastSubstring"}
{"question_id": "1049", "schema": {"name": "lastStoneWeightII", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [2, 7, 4, 1, 8, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"stones": [31, 26, 33, 21, 40]}, "outputs": 5}], "title": "Last Stone Weight II", "entry_fn_name": "lastStoneWeightII"}
{"question_id": "1048", "schema": {"name": "longestStrChain", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["a", "b", "ba", "bca", "bda", "bdca"]}, "outputs": 4}, {"idx": 1, "inputs": {"words": ["xbc", "pcxbcf", "xb", "cxbc", "pcxbc"]}, "outputs": 5}, {"idx": 2, "inputs": {"words": ["abcd", "dbqca"]}, "outputs": 1}], "title": "Longest String Chain", "entry_fn_name": "longestStrChain"}
{"question_id": "1047", "schema": {"name": "removeDuplicates", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abbaca"}, "outputs": "ca"}, {"idx": 1, "inputs": {"s": "azxxzy"}, "outputs": "ay"}], "title": "Remove All Adjacent Duplicates In String", "entry_fn_name": "removeDuplicates"}
{"question_id": "1046", "schema": {"name": "lastStoneWeight", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [2, 7, 4, 1, 8, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"stones": [1]}, "outputs": 1}], "title": "Last Stone Weight", "entry_fn_name": "lastStoneWeight"}
{"question_id": "1044", "schema": {"name": "longestDupSubstring", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "banana"}, "outputs": "ana"}, {"idx": 1, "inputs": {"s": "abcd"}, "outputs": ""}], "title": "Longest Duplicate Substring", "entry_fn_name": "longestDupSubstring"}
{"question_id": "1043", "schema": {"name": "maxSumAfterPartitioning", "params": [{"name": "arr", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 15, 7, 9, 2, 5, 10], "k": 3}, "outputs": 84}, {"idx": 1, "inputs": {"arr": [1, 4, 1, 5, 7, 3, 6, 1, 9, 9, 3], "k": 4}, "outputs": 83}, {"idx": 2, "inputs": {"arr": [1], "k": 1}, "outputs": 1}], "title": "Partition Array for Maximum Sum", "entry_fn_name": "maxSumAfterPartitioning"}
{"question_id": "1042", "schema": {"name": "gardenNoAdj", "params": [{"name": "n", "type": "integer"}, {"name": "paths", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "paths": [[1, 2], [2, 3], [3, 1]]}, "outputs": [1, 2, 3]}, {"idx": 1, "inputs": {"n": 4, "paths": [[1, 2], [3, 4]]}, "outputs": [1, 2, 1, 2]}, {"idx": 2, "inputs": {"n": 4, "paths": [[1, 2], [2, 3], [3, 4], [4, 1], [1, 3], [2, 4]]}, "outputs": [1, 2, 3, 4]}], "title": "Flower Planting With No Adjacent", "entry_fn_name": "gardenNoAdj"}
{"question_id": "1041", "schema": {"name": "isRobotBounded", "params": [{"name": "instructions", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"instructions": "GGLLGG"}, "outputs": true}, {"idx": 1, "inputs": {"instructions": "GG"}, "outputs": false}, {"idx": 2, "inputs": {"instructions": "GL"}, "outputs": true}], "title": "Robot Bounded In Circle", "entry_fn_name": "isRobotBounded"}
{"question_id": "1162", "schema": {"name": "maxDistance", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 0, 1], [0, 0, 0], [1, 0, 1]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[1, 0, 0], [0, 0, 0], [0, 0, 0]]}, "outputs": 4}], "title": "As Far from Land as Possible", "entry_fn_name": "maxDistance"}
{"question_id": "1161", "schema": {"name": "maxLevelSum", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 7, 0, 7, -8, null, null]}, "outputs": 2}, {"idx": 1, "inputs": {"root": [989, null, 10250, 98693, -89388, null, null, null, -32127]}, "outputs": 2}], "title": "Maximum Level Sum of a Binary Tree", "entry_fn_name": "maxLevelSum"}
{"question_id": "1037", "schema": {"name": "isBoomerang", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 1], [2, 3], [3, 2]]}, "outputs": true}, {"idx": 1, "inputs": {"points": [[1, 1], [2, 2], [3, 3]]}, "outputs": false}], "title": "Valid Boomerang", "entry_fn_name": "isBoomerang"}
{"question_id": "1038", "schema": {"name": "bstToGst", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 1, 6, 0, 2, 5, 7, null, null, null, 3, null, null, null, 8]}, "outputs": [30, 36, 21, 36, 35, 26, 15, null, null, null, 33, null, null, null, 8]}, {"idx": 1, "inputs": {"root": [0, null, 1]}, "outputs": [1, null, 1]}], "title": "Binary Search Tree to Greater Sum Tree", "entry_fn_name": "bstToGst"}
{"question_id": "1040", "schema": {"name": "numMovesStonesII", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [7, 4, 9]}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"stones": [6, 5, 4, 3, 10]}, "outputs": [2, 3]}], "title": "Moving Stones Until Consecutive II", "entry_fn_name": "numMovesStonesII"}
{"question_id": "1160", "schema": {"name": "countCharacters", "params": [{"name": "words", "type": "string[]"}, {"name": "chars", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["cat", "bt", "hat", "tree"], "chars": "atach"}, "outputs": 6}, {"idx": 1, "inputs": {"words": ["hello", "world", "leetcode"], "chars": "welldonehoneyr"}, "outputs": 10}], "title": "Find Words That Can Be Formed by Characters", "entry_fn_name": "countCharacters"}
{"question_id": "1039", "schema": {"name": "minScoreTriangulation", "params": [{"name": "values", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"values": [1, 2, 3]}, "outputs": 6}, {"idx": 1, "inputs": {"values": [3, 7, 4, 5]}, "outputs": 144}, {"idx": 2, "inputs": {"values": [1, 3, 1, 4, 1, 5]}, "outputs": 13}], "title": "Minimum Score Triangulation of Polygon", "entry_fn_name": "minScoreTriangulation"}
{"question_id": "1036", "schema": {"name": "isEscapePossible", "params": [{"name": "blocked", "type": "integer[][]"}, {"name": "source", "type": "integer[]"}, {"name": "target", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"blocked": [[0, 1], [1, 0]], "source": [0, 0], "target": [0, 2]}, "outputs": false}, {"idx": 1, "inputs": {"blocked": [], "source": [0, 0], "target": [999999, 999999]}, "outputs": true}], "title": "Escape a Large Maze", "entry_fn_name": "isEscapePossible"}
{"question_id": "1035", "schema": {"name": "maxUncrossedLines", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 4, 2], "nums2": [1, 2, 4]}, "outputs": 2}, {"idx": 1, "inputs": {"nums1": [2, 5, 1, 2, 5], "nums2": [10, 5, 2, 1, 5, 2]}, "outputs": 3}, {"idx": 2, "inputs": {"nums1": [1, 3, 7, 1, 7, 5], "nums2": [1, 9, 2, 5, 1]}, "outputs": 2}], "title": "Uncrossed Lines", "entry_fn_name": "maxUncrossedLines"}
{"question_id": "1034", "schema": {"name": "colorBorder", "params": [{"name": "grid", "type": "integer[][]"}, {"name": "row", "type": "integer"}, {"name": "col", "type": "integer"}, {"name": "color", "type": "integer"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 1], [1, 2]], "row": 0, "col": 0, "color": 3}, "outputs": [[3, 3], [3, 2]]}, {"idx": 1, "inputs": {"grid": [[1, 2, 2], [2, 3, 2]], "row": 0, "col": 1, "color": 3}, "outputs": [[1, 3, 3], [2, 3, 3]]}, {"idx": 2, "inputs": {"grid": [[1, 1, 1], [1, 1, 1], [1, 1, 1]], "row": 1, "col": 1, "color": 2}, "outputs": [[2, 2, 2], [2, 1, 2], [2, 2, 2]]}], "title": "Coloring A Border", "entry_fn_name": "colorBorder"}
{"question_id": "1033", "schema": {"name": "numMovesStones", "params": [{"name": "a", "type": "integer"}, {"name": "b", "type": "integer"}, {"name": "c", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"a": 1, "b": 2, "c": 5}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"a": 4, "b": 3, "c": 2}, "outputs": [0, 0]}, {"idx": 2, "inputs": {"a": 3, "b": 5, "c": 1}, "outputs": [1, 2]}], "title": "Moving Stones Until Consecutive", "entry_fn_name": "numMovesStones"}
{"question_id": "1031", "schema": {"name": "maxSumTwoNoOverlap", "params": [{"name": "nums", "type": "integer[]"}, {"name": "firstLen", "type": "integer"}, {"name": "secondLen", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 6, 5, 2, 2, 5, 1, 9, 4], "firstLen": 1, "secondLen": 2}, "outputs": 20}, {"idx": 1, "inputs": {"nums": [3, 8, 1, 3, 2, 1, 8, 9, 0], "firstLen": 3, "secondLen": 2}, "outputs": 29}, {"idx": 2, "inputs": {"nums": [2, 1, 5, 6, 0, 9, 5, 0, 3, 8], "firstLen": 4, "secondLen": 3}, "outputs": 31}], "title": "Maximum Sum of Two Non-Overlapping Subarrays", "entry_fn_name": "maxSumTwoNoOverlap"}
{"question_id": "1029", "schema": {"name": "twoCitySchedCost", "params": [{"name": "costs", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"costs": [[10, 20], [30, 200], [400, 50], [30, 20]]}, "outputs": 110}, {"idx": 1, "inputs": {"costs": [[259, 770], [448, 54], [926, 667], [184, 139], [840, 118], [577, 469]]}, "outputs": 1859}, {"idx": 2, "inputs": {"costs": [[515, 563], [451, 713], [537, 709], [343, 819], [855, 779], [457, 60], [650, 359], [631, 42]]}, "outputs": 3086}], "title": "Two City Scheduling", "entry_fn_name": "twoCitySchedCost"}
{"question_id": "1030", "schema": {"name": "allCellsDistOrder", "params": [{"name": "rows", "type": "integer"}, {"name": "cols", "type": "integer"}, {"name": "rCenter", "type": "integer"}, {"name": "cCenter", "type": "integer"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"rows": 1, "cols": 2, "rCenter": 0, "cCenter": 0}, "outputs": [[0, 0], [0, 1]]}, {"idx": 1, "inputs": {"rows": 2, "cols": 2, "rCenter": 0, "cCenter": 1}, "outputs": [[0, 1], [0, 0], [1, 1], [1, 0]]}, {"idx": 2, "inputs": {"rows": 2, "cols": 3, "rCenter": 1, "cCenter": 2}, "outputs": [[1, 2], [0, 2], [1, 1], [0, 1], [1, 0], [0, 0]]}], "title": "Matrix Cells in Distance Order", "entry_fn_name": "allCellsDistOrder"}
{"question_id": "1028", "schema": {"name": "recoverFromPreorder", "params": [{"name": "traversal", "type": "string"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"traversal": "1-2--3--4-5--6--7"}, "outputs": [1, 2, 5, 3, 4, 6, 7]}, {"idx": 1, "inputs": {"traversal": "1-2--3---4-5--6---7"}, "outputs": [1, 2, 5, 3, null, 6, null, 4, null, 7]}, {"idx": 2, "inputs": {"traversal": "1-401--349---90--88"}, "outputs": [1, 401, null, 349, 88, 90]}], "title": "Recover a Tree From Preorder Traversal", "entry_fn_name": "recoverFromPreorder"}
{"question_id": "1026", "schema": {"name": "maxAncestorDiff", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [8, 3, 10, 1, 6, null, 14, null, null, 4, 7, 13]}, "outputs": 7}, {"idx": 1, "inputs": {"root": [1, null, 2, null, 0, 3]}, "outputs": 3}], "title": "Maximum Difference Between Node and Ancestor", "entry_fn_name": "maxAncestorDiff"}
{"question_id": "1027", "schema": {"name": "longestArithSeqLength", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 6, 9, 12]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [9, 4, 7, 2, 10]}, "outputs": 3}, {"idx": 2, "inputs": {"nums": [20, 1, 15, 3, 10, 5, 8]}, "outputs": 4}], "title": "Longest Arithmetic Subsequence", "entry_fn_name": "longestArithSeqLength"}
{"question_id": "1025", "schema": {"name": "divisorGame", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": true}, {"idx": 1, "inputs": {"n": 3}, "outputs": false}], "title": "Divisor Game", "entry_fn_name": "divisorGame"}
{"question_id": "1024", "schema": {"name": "videoStitching", "params": [{"name": "clips", "type": "integer[][]"}, {"name": "time", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"clips": [[0, 2], [4, 6], [8, 10], [1, 9], [1, 5], [5, 9]], "time": 10}, "outputs": 3}, {"idx": 1, "inputs": {"clips": [[0, 1], [1, 2]], "time": 5}, "outputs": -1}, {"idx": 2, "inputs": {"clips": [[0, 1], [6, 8], [0, 2], [5, 6], [0, 4], [0, 3], [6, 7], [1, 3], [4, 7], [1, 4], [2, 5], [2, 6], [3, 4], [4, 5], [5, 7], [6, 9]], "time": 9}, "outputs": 3}], "title": "Video Stitching", "entry_fn_name": "videoStitching"}
{"question_id": "1023", "schema": {"name": "camelMatch", "params": [{"name": "queries", "type": "string[]"}, {"name": "pattern", "type": "string"}], "return": {"type": "list<boolean>"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"queries": ["FooBar", "FooBarTest", "FootBall", "FrameBuffer", "ForceFeedBack"], "pattern": "FB"}, "outputs": [true, false, true, true, false]}, {"idx": 1, "inputs": {"queries": ["FooBar", "FooBarTest", "FootBall", "FrameBuffer", "ForceFeedBack"], "pattern": "FoBa"}, "outputs": [true, false, true, false, false]}, {"idx": 2, "inputs": {"queries": ["FooBar", "FooBarTest", "FootBall", "FrameBuffer", "ForceFeedBack"], "pattern": "FoBaT"}, "outputs": [false, true, false, false, false]}], "title": "Camelcase Matching", "entry_fn_name": "camelMatch"}
{"question_id": "1022", "schema": {"name": "sumRootToLeaf", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 0, 1, 0, 1, 0, 1]}, "outputs": 22}, {"idx": 1, "inputs": {"root": [0]}, "outputs": 0}], "title": "Sum of Root To Leaf Binary Numbers", "entry_fn_name": "sumRootToLeaf"}
{"question_id": "1021", "schema": {"name": "removeOuterParentheses", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(()())(())"}, "outputs": "()()()"}, {"idx": 1, "inputs": {"s": "(()())(())(()(()))"}, "outputs": "()()()()(())"}, {"idx": 2, "inputs": {"s": "()()"}, "outputs": ""}], "title": "Remove Outermost Parentheses", "entry_fn_name": "removeOuterParentheses"}
{"question_id": "1020", "schema": {"name": "numEnclaves", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]]}, "outputs": 0}], "title": "Number of Enclaves", "entry_fn_name": "numEnclaves"}
{"question_id": "1019", "schema": {"name": "nextLargerNodes", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"head": [2, 1, 5]}, "outputs": [5, 5, 0]}, {"idx": 1, "inputs": {"head": [2, 7, 4, 3, 5]}, "outputs": [7, 0, 5, 5, 0]}], "title": "Next Greater Node In Linked List", "entry_fn_name": "nextLargerNodes"}
{"question_id": "1018", "schema": {"name": "prefixesDivBy5", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<boolean>"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 1]}, "outputs": [true, false, false]}, {"idx": 1, "inputs": {"nums": [1, 1, 1]}, "outputs": [false, false, false]}], "title": "Binary Prefix Divisible By 5", "entry_fn_name": "prefixesDivBy5"}
{"question_id": "1017", "schema": {"name": "baseNeg2", "params": [{"name": "n", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": "110"}, {"idx": 1, "inputs": {"n": 3}, "outputs": "111"}, {"idx": 2, "inputs": {"n": 4}, "outputs": "100"}], "title": "Convert to Base -2", "entry_fn_name": "baseNeg2"}
{"question_id": "1016", "schema": {"name": "queryString", "params": [{"name": "s", "type": "string"}, {"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "0110", "n": 3}, "outputs": true}, {"idx": 1, "inputs": {"s": "0110", "n": 4}, "outputs": false}], "title": "Binary String With Substrings Representing 1 To N", "entry_fn_name": "queryString"}
{"question_id": "1015", "schema": {"name": "smallestRepunitDivByK", "params": [{"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"k": 1}, "outputs": 1}, {"idx": 1, "inputs": {"k": 2}, "outputs": -1}, {"idx": 2, "inputs": {"k": 3}, "outputs": 3}], "title": "Smallest Integer Divisible by K", "entry_fn_name": "smallestRepunitDivByK"}
{"question_id": "1014", "schema": {"name": "maxScoreSightseeingPair", "params": [{"name": "values", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"values": [8, 1, 5, 2, 6]}, "outputs": 11}, {"idx": 1, "inputs": {"values": [1, 2]}, "outputs": 2}], "title": "Best Sightseeing Pair", "entry_fn_name": "maxScoreSightseeingPair"}
{"question_id": "1013", "schema": {"name": "canThreePartsEqualSum", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]}, "outputs": true}, {"idx": 1, "inputs": {"arr": [0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1]}, "outputs": false}, {"idx": 2, "inputs": {"arr": [3, 3, 6, 5, -2, 2, 5, 1, -9, 4]}, "outputs": true}], "title": "Partition Array Into Three Parts With Equal Sum", "entry_fn_name": "canThreePartsEqualSum"}
{"question_id": "1012", "schema": {"name": "numDupDigitsAtMostN", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 20}, "outputs": 1}, {"idx": 1, "inputs": {"n": 100}, "outputs": 10}, {"idx": 2, "inputs": {"n": 1000}, "outputs": 262}], "title": "Numbers With Repeated Digits", "entry_fn_name": "numDupDigitsAtMostN"}
{"question_id": "1011", "schema": {"name": "shipWithinDays", "params": [{"name": "weights", "type": "integer[]"}, {"name": "days", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"weights": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "days": 5}, "outputs": 15}, {"idx": 1, "inputs": {"weights": [3, 2, 2, 4, 1, 4], "days": 3}, "outputs": 6}, {"idx": 2, "inputs": {"weights": [1, 2, 3, 1, 1], "days": 4}, "outputs": 3}], "title": "Capacity To Ship Packages Within D Days", "entry_fn_name": "shipWithinDays"}
{"question_id": "1010", "schema": {"name": "numPairsDivisibleBy60", "params": [{"name": "time", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"time": [30, 20, 150, 100, 40]}, "outputs": 3}, {"idx": 1, "inputs": {"time": [60, 60, 60]}, "outputs": 3}], "title": "Pairs of Songs With Total Durations Divisible by 60", "entry_fn_name": "numPairsDivisibleBy60"}
{"question_id": "1009", "schema": {"name": "bitwiseComplement", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": 2}, {"idx": 1, "inputs": {"n": 7}, "outputs": 0}, {"idx": 2, "inputs": {"n": 10}, "outputs": 5}], "title": "Complement of Base 10 Integer", "entry_fn_name": "bitwiseComplement"}
{"question_id": "1008", "schema": {"name": "bstFromPreorder", "params": [{"name": "preorder", "type": "integer[]"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"preorder": [8, 5, 1, 7, 10, 12]}, "outputs": [8, 5, 10, 1, 7, null, 12]}, {"idx": 1, "inputs": {"preorder": [1, 3]}, "outputs": [1, null, 3]}], "title": "Construct Binary Search Tree from Preorder Traversal", "entry_fn_name": "bstFromPreorder"}
{"question_id": "1007", "schema": {"name": "minDominoRotations", "params": [{"name": "tops", "type": "integer[]"}, {"name": "bottoms", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tops": [2, 1, 2, 4, 2, 2], "bottoms": [5, 2, 6, 2, 3, 2]}, "outputs": 2}, {"idx": 1, "inputs": {"tops": [3, 5, 1, 2, 3], "bottoms": [3, 6, 3, 3, 4]}, "outputs": -1}], "title": "Minimum Domino Rotations For Equal Row", "entry_fn_name": "minDominoRotations"}
{"question_id": "1006", "schema": {"name": "clumsy", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": 7}, {"idx": 1, "inputs": {"n": 10}, "outputs": 12}], "title": "Clumsy Factorial", "entry_fn_name": "clumsy"}
{"question_id": "1005", "schema": {"name": "largestSumAfterKNegations", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 2, 3], "k": 1}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [3, -1, 0, 2], "k": 3}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [2, -3, -1, 5, -4], "k": 2}, "outputs": 13}], "title": "Maximize Sum Of Array After K Negations", "entry_fn_name": "largestSumAfterKNegations"}
{"question_id": "1004", "schema": {"name": "longestOnes", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], "k": 2}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], "k": 3}, "outputs": 10}], "title": "Max Consecutive Ones III", "entry_fn_name": "longestOnes"}
{"question_id": "1003", "schema": {"name": "isValid", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aabcbc"}, "outputs": true}, {"idx": 1, "inputs": {"s": "abcabcababcc"}, "outputs": true}, {"idx": 2, "inputs": {"s": "abccba"}, "outputs": false}], "title": "Check If Word Is Valid After Substitutions", "entry_fn_name": "isValid"}
{"question_id": "1002", "schema": {"name": "commonChars", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["bella", "label", "roller"]}, "outputs": ["e", "l", "l"]}, {"idx": 1, "inputs": {"words": ["cool", "lock", "cook"]}, "outputs": ["c", "o"]}], "title": "Find Common Characters", "entry_fn_name": "commonChars"}
{"question_id": "1001", "schema": {"name": "gridIllumination", "params": [{"name": "n", "type": "integer"}, {"name": "lamps", "type": "integer[][]"}, {"name": "queries", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "lamps": [[0, 0], [4, 4]], "queries": [[1, 1], [1, 0]]}, "outputs": [1, 0]}, {"idx": 1, "inputs": {"n": 5, "lamps": [[0, 0], [4, 4]], "queries": [[1, 1], [1, 1]]}, "outputs": [1, 1]}, {"idx": 2, "inputs": {"n": 5, "lamps": [[0, 0], [0, 4]], "queries": [[0, 4], [0, 1], [1, 4]]}, "outputs": [1, 1, 0]}], "title": "Grid Illumination", "entry_fn_name": "gridIllumination"}
{"question_id": "1000", "schema": {"name": "mergeStones", "params": [{"name": "stones", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [3, 2, 4, 1], "k": 2}, "outputs": 20}, {"idx": 1, "inputs": {"stones": [3, 2, 4, 1], "k": 3}, "outputs": -1}, {"idx": 2, "inputs": {"stones": [3, 5, 1, 2, 6], "k": 3}, "outputs": 25}], "title": "Minimum Cost to Merge Stones", "entry_fn_name": "mergeStones"}
{"question_id": "999", "schema": {"name": "numRookCaptures", "params": [{"name": "board", "type": "character[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"board": [[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "R", ".", ".", ".", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]}, "outputs": 3}, {"idx": 1, "inputs": {"board": [[".", ".", ".", ".", ".", ".", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "B", "R", "B", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]}, "outputs": 0}, {"idx": 2, "inputs": {"board": [[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], ["p", "p", ".", "R", ".", "p", "B", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "B", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]}, "outputs": 3}], "title": "Available Captures for Rook", "entry_fn_name": "numRookCaptures"}
{"question_id": "998", "schema": {"name": "insertIntoMaxTree", "params": [{"name": "root", "type": "TreeNode"}, {"name": "val", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 1, 3, null, null, 2], "val": 5}, "outputs": [5, 4, null, 1, 3, null, null, 2]}, {"idx": 1, "inputs": {"root": [5, 2, 4, null, 1], "val": 3}, "outputs": [5, 2, 4, null, 1, null, 3]}, {"idx": 2, "inputs": {"root": [5, 2, 3, null, 1], "val": 4}, "outputs": [5, 2, 4, null, 1, 3]}], "title": "Maximum Binary Tree II", "entry_fn_name": "insertIntoMaxTree"}
{"question_id": "997", "schema": {"name": "findJudge", "params": [{"name": "n", "type": "integer"}, {"name": "trust", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "trust": [[1, 2]]}, "outputs": 2}, {"idx": 1, "inputs": {"n": 3, "trust": [[1, 3], [2, 3]]}, "outputs": 3}, {"idx": 2, "inputs": {"n": 3, "trust": [[1, 3], [2, 3], [3, 1]]}, "outputs": -1}], "title": "Find the Town Judge", "entry_fn_name": "findJudge"}
{"question_id": "996", "schema": {"name": "numSquarefulPerms", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 17, 8]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 2, 2]}, "outputs": 1}], "title": "Number of Squareful Arrays", "entry_fn_name": "numSquarefulPerms"}
{"question_id": "995", "schema": {"name": "minKBitFlips", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 0], "k": 1}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 1, 0], "k": 2}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [0, 0, 0, 1, 0, 1, 1, 0], "k": 3}, "outputs": 3}], "title": "Minimum Number of K Consecutive Bit Flips", "entry_fn_name": "minKBitFlips"}
{"question_id": "994", "schema": {"name": "orangesRotting", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[2, 1, 1], [1, 1, 0], [0, 1, 1]]}, "outputs": 4}, {"idx": 1, "inputs": {"grid": [[2, 1, 1], [0, 1, 1], [1, 0, 1]]}, "outputs": -1}, {"idx": 2, "inputs": {"grid": [[0, 2]]}, "outputs": 0}], "title": "Rotting Oranges", "entry_fn_name": "orangesRotting"}
{"question_id": "993", "schema": {"name": "isCousins", "params": [{"name": "root", "type": "TreeNode"}, {"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4], "x": 4, "y": 3}, "outputs": false}, {"idx": 1, "inputs": {"root": [1, 2, 3, null, 4, null, 5], "x": 5, "y": 4}, "outputs": true}, {"idx": 2, "inputs": {"root": [1, 2, 3, null, 4], "x": 2, "y": 3}, "outputs": false}], "title": "Cousins in Binary Tree", "entry_fn_name": "isCousins"}
{"question_id": "992", "schema": {"name": "subarraysWithKDistinct", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 1, 2, 3], "k": 2}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [1, 2, 1, 3, 4], "k": 3}, "outputs": 3}], "title": "Subarrays with K Different Integers", "entry_fn_name": "subarraysWithKDistinct"}
{"question_id": "991", "schema": {"name": "brokenCalc", "params": [{"name": "startValue", "type": "integer"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"startValue": 2, "target": 3}, "outputs": 2}, {"idx": 1, "inputs": {"startValue": 5, "target": 8}, "outputs": 2}, {"idx": 2, "inputs": {"startValue": 3, "target": 10}, "outputs": 3}], "title": "Broken Calculator", "entry_fn_name": "brokenCalc"}
{"question_id": "989", "schema": {"name": "addToArrayForm", "params": [{"name": "num", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"num": [1, 2, 0, 0], "k": 34}, "outputs": [1, 2, 3, 4]}, {"idx": 1, "inputs": {"num": [2, 7, 4], "k": 181}, "outputs": [4, 5, 5]}, {"idx": 2, "inputs": {"num": [2, 1, 5], "k": 806}, "outputs": [1, 0, 2, 1]}], "title": "Add to Array-Form of Integer", "entry_fn_name": "addToArrayForm"}
{"question_id": "988", "schema": {"name": "smallestFromLeaf", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"root": [0, 1, 2, 3, 4, 3, 4]}, "outputs": "dba"}, {"idx": 1, "inputs": {"root": [25, 1, 3, 1, 3, 0, 2]}, "outputs": "adz"}, {"idx": 2, "inputs": {"root": [2, 2, 1, null, 1, 0, null, 0]}, "outputs": "abc"}], "title": "Smallest String Starting From Leaf", "entry_fn_name": "smallestFromLeaf"}
{"question_id": "987", "schema": {"name": "verticalTraversal", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": [[9], [3, 15], [20], [7]]}, {"idx": 1, "inputs": {"root": [1, 2, 3, 4, 5, 6, 7]}, "outputs": [[4], [2], [1, 5, 6], [3], [7]]}, {"idx": 2, "inputs": {"root": [1, 2, 3, 4, 6, 5, 7]}, "outputs": [[4], [2], [1, 5, 6], [3], [7]]}], "title": "Vertical Order Traversal of a Binary Tree", "entry_fn_name": "verticalTraversal"}
{"question_id": "986", "schema": {"name": "intervalIntersection", "params": [{"name": "firstList", "type": "integer[][]"}, {"name": "secondList", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"firstList": [[0, 2], [5, 10], [13, 23], [24, 25]], "secondList": [[1, 5], [8, 12], [15, 24], [25, 26]]}, "outputs": [[1, 2], [5, 5], [8, 10], [15, 23], [24, 24], [25, 25]]}, {"idx": 1, "inputs": {"firstList": [[1, 3], [5, 9]], "secondList": []}, "outputs": []}], "title": "Interval List Intersections", "entry_fn_name": "intervalIntersection"}
{"question_id": "985", "schema": {"name": "sumEvenAfterQueries", "params": [{"name": "nums", "type": "integer[]"}, {"name": "queries", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4], "queries": [[1, 0], [-3, 1], [-4, 0], [2, 3]]}, "outputs": [8, 6, 2, 4]}, {"idx": 1, "inputs": {"nums": [1], "queries": [[4, 0]]}, "outputs": [0]}], "title": "Sum of Even Numbers After Queries", "entry_fn_name": "sumEvenAfterQueries"}
{"question_id": "984", "schema": {"name": "strWithout3a3b", "params": [{"name": "a", "type": "integer"}, {"name": "b", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"a": 1, "b": 2}, "outputs": "abb"}, {"idx": 1, "inputs": {"a": 4, "b": 1}, "outputs": "aabaa"}], "title": "String Without AAA or BBB", "entry_fn_name": "strWithout3a3b"}
{"question_id": "983", "schema": {"name": "mincostTickets", "params": [{"name": "days", "type": "integer[]"}, {"name": "costs", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"days": [1, 4, 6, 7, 8, 20], "costs": [2, 7, 15]}, "outputs": 11}, {"idx": 1, "inputs": {"days": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], "costs": [2, 7, 15]}, "outputs": 17}], "title": "Minimum Cost For Tickets", "entry_fn_name": "mincostTickets"}
{"question_id": "982", "schema": {"name": "countTriplets", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 3]}, "outputs": 12}, {"idx": 1, "inputs": {"nums": [0, 0, 0]}, "outputs": 27}], "title": "Triples with Bitwise AND Equal To Zero", "entry_fn_name": "countTriplets"}
{"question_id": "980", "schema": {"name": "uniquePathsIII", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2]]}, "outputs": 4}, {"idx": 2, "inputs": {"grid": [[0, 1], [2, 0]]}, "outputs": 0}], "title": "Unique Paths III", "entry_fn_name": "uniquePathsIII"}
{"question_id": "979", "schema": {"name": "distributeCoins", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 0, 0]}, "outputs": 2}, {"idx": 1, "inputs": {"root": [0, 3, 0]}, "outputs": 3}], "title": "Distribute Coins in Binary Tree", "entry_fn_name": "distributeCoins"}
{"question_id": "978", "schema": {"name": "maxTurbulenceSize", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [9, 4, 2, 10, 7, 8, 8, 1, 9]}, "outputs": 5}, {"idx": 1, "inputs": {"arr": [4, 8, 12, 16]}, "outputs": 2}, {"idx": 2, "inputs": {"arr": [100]}, "outputs": 1}], "title": "Longest Turbulent Subarray", "entry_fn_name": "maxTurbulenceSize"}
{"question_id": "977", "schema": {"name": "sortedSquares", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-4, -1, 0, 3, 10]}, "outputs": [0, 1, 9, 16, 100]}, {"idx": 1, "inputs": {"nums": [-7, -3, 2, 3, 11]}, "outputs": [4, 9, 9, 49, 121]}], "title": "Squares of a Sorted Array", "entry_fn_name": "sortedSquares"}
{"question_id": "976", "schema": {"name": "largestPerimeter", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 2]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [1, 2, 1]}, "outputs": 0}], "title": "Largest Perimeter Triangle", "entry_fn_name": "largestPerimeter"}
{"question_id": "975", "schema": {"name": "oddEvenJumps", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [10, 13, 12, 14, 15]}, "outputs": 2}, {"idx": 1, "inputs": {"arr": [2, 3, 1, 1, 4]}, "outputs": 3}, {"idx": 2, "inputs": {"arr": [5, 1, 3, 4, 2]}, "outputs": 3}], "title": "Odd Even Jump", "entry_fn_name": "oddEvenJumps"}
{"question_id": "974", "schema": {"name": "subarraysDivByK", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 5, 0, -2, -3, 1], "k": 5}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [5], "k": 9}, "outputs": 0}], "title": "Subarray Sums Divisible by K", "entry_fn_name": "subarraysDivByK"}
{"question_id": "973", "schema": {"name": "kClosest", "params": [{"name": "points", "type": "integer[][]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 3], [-2, 2]], "k": 1}, "outputs": [[-2, 2]]}, {"idx": 1, "inputs": {"points": [[3, 3], [5, -1], [-2, 4]], "k": 2}, "outputs": [[3, 3], [-2, 4]]}], "title": "K Closest Points to Origin", "entry_fn_name": "kClosest"}
{"question_id": "509", "schema": {"name": "fib", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 1}, {"idx": 1, "inputs": {"n": 3}, "outputs": 2}, {"idx": 2, "inputs": {"n": 4}, "outputs": 3}], "title": "Fibonacci Number", "entry_fn_name": "fib"}
{"question_id": "972", "schema": {"name": "isRationalEqual", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "0.(52)", "t": "0.5(25)"}, "outputs": true}, {"idx": 1, "inputs": {"s": "0.1666(6)", "t": "0.166(66)"}, "outputs": true}, {"idx": 2, "inputs": {"s": "0.9(9)", "t": "1."}, "outputs": true}], "title": "Equal Rational Numbers", "entry_fn_name": "isRationalEqual"}
{"question_id": "971", "schema": {"name": "flipMatchVoyage", "params": [{"name": "root", "type": "TreeNode"}, {"name": "voyage", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2], "voyage": [2, 1]}, "outputs": [-1]}, {"idx": 1, "inputs": {"root": [1, 2, 3], "voyage": [1, 3, 2]}, "outputs": [1]}, {"idx": 2, "inputs": {"root": [1, 2, 3], "voyage": [1, 2, 3]}, "outputs": []}], "title": "Flip Binary Tree To Match Preorder Traversal", "entry_fn_name": "flipMatchVoyage"}
{"question_id": "970", "schema": {"name": "powerfulIntegers", "params": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}, {"name": "bound", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"x": 2, "y": 3, "bound": 10}, "outputs": [2, 3, 4, 5, 7, 9, 10]}, {"idx": 1, "inputs": {"x": 3, "y": 5, "bound": 15}, "outputs": [2, 4, 6, 8, 10, 14]}], "title": "Powerful Integers", "entry_fn_name": "powerfulIntegers"}
{"question_id": "969", "schema": {"name": "pancakeSort", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "list<integer>"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 2, 4, 1]}, "outputs": [4, 2, 4, 3]}, {"idx": 1, "inputs": {"arr": [1, 2, 3]}, "outputs": []}], "title": "Pancake Sorting", "entry_fn_name": "pancakeSort"}
{"question_id": "968", "schema": {"name": "minCameraCover", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [0, 0, null, 0, 0]}, "outputs": 1}, {"idx": 1, "inputs": {"root": [0, 0, null, 0, null, 0, null, null, 0]}, "outputs": 2}], "title": "Binary Tree Cameras", "entry_fn_name": "minCameraCover"}
{"question_id": "967", "schema": {"name": "numsSameConsecDiff", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 7}, "outputs": [181, 292, 707, 818, 929]}, {"idx": 1, "inputs": {"n": 2, "k": 1}, "outputs": [10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98]}], "title": "Numbers With Same Consecutive Differences", "entry_fn_name": "numsSameConsecDiff"}
{"question_id": "966", "schema": {"name": "spellchecker", "params": [{"name": "wordlist", "type": "string[]"}, {"name": "queries", "type": "string[]"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"wordlist": ["KiTe", "kite", "hare", "Hare"], "queries": ["kite", "Kite", "KiTe", "Hare", "HARE", "Hear", "hear", "keti", "keet", "keto"]}, "outputs": ["kite", "KiTe", "KiTe", "Hare", "hare", "", "", "KiTe", "", "KiTe"]}, {"idx": 1, "inputs": {"wordlist": ["yellow"], "queries": ["YellOw"]}, "outputs": ["yellow"]}], "title": "Vowel Spellchecker", "entry_fn_name": "spellchecker"}
{"question_id": "965", "schema": {"name": "isUnivalTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 1, 1, 1, 1, null, 1]}, "outputs": true}, {"idx": 1, "inputs": {"root": [2, 2, 2, 5, 2]}, "outputs": false}], "title": "Univalued Binary Tree", "entry_fn_name": "isUnivalTree"}
{"question_id": "964", "schema": {"name": "leastOpsExpressTarget", "params": [{"name": "x", "type": "integer"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"x": 3, "target": 19}, "outputs": 5}, {"idx": 1, "inputs": {"x": 5, "target": 501}, "outputs": 8}, {"idx": 2, "inputs": {"x": 100, "target": 100000000}, "outputs": 3}], "title": "Least Operators to Express Number", "entry_fn_name": "leastOpsExpressTarget"}
{"question_id": "963", "schema": {"name": "minAreaFreeRect", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 2], [2, 1], [1, 0], [0, 1]]}, "outputs": 2.0}, {"idx": 1, "inputs": {"points": [[0, 1], [2, 1], [1, 1], [1, 0], [2, 0]]}, "outputs": 1.0}, {"idx": 2, "inputs": {"points": [[0, 3], [1, 2], [3, 1], [1, 3], [2, 1]]}, "outputs": 0}], "title": "Minimum Area Rectangle II", "entry_fn_name": "minAreaFreeRect"}
{"question_id": "962", "schema": {"name": "maxWidthRamp", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [6, 0, 8, 2, 1, 5]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [9, 8, 1, 0, 1, 9, 4, 0, 4, 1]}, "outputs": 7}], "title": "Maximum Width Ramp", "entry_fn_name": "maxWidthRamp"}
{"question_id": "961", "schema": {"name": "repeatedNTimes", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [2, 1, 2, 5, 3, 2]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [5, 1, 5, 2, 5, 3, 5, 4]}, "outputs": 5}], "title": "N-Repeated Element in Size 2N Array", "entry_fn_name": "repeatedNTimes"}
{"question_id": "960", "schema": {"name": "minDeletionSize", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["babca", "bbazb"]}, "outputs": 3}, {"idx": 1, "inputs": {"strs": ["edcba"]}, "outputs": 4}, {"idx": 2, "inputs": {"strs": ["ghi", "def", "abc"]}, "outputs": 0}], "title": "Delete Columns to Make Sorted III", "entry_fn_name": "minDeletionSize"}
{"question_id": "959", "schema": {"name": "regionsBySlashes", "params": [{"name": "grid", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [" /", "/ "]}, "outputs": 2}, {"idx": 1, "inputs": {"grid": [" /", "  "]}, "outputs": 1}, {"idx": 2, "inputs": {"grid": ["/\\", "\\/"]}, "outputs": 5}], "title": "Regions Cut By Slashes", "entry_fn_name": "regionsBySlashes"}
{"question_id": "958", "schema": {"name": "isCompleteTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5, 6]}, "outputs": true}, {"idx": 1, "inputs": {"root": [1, 2, 3, 4, 5, null, 7]}, "outputs": false}], "title": "Check Completeness of a Binary Tree", "entry_fn_name": "isCompleteTree"}
{"question_id": "957", "schema": {"name": "prisonAfterNDays", "params": [{"name": "cells", "type": "integer[]"}, {"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"cells": [0, 1, 0, 1, 1, 0, 0, 1], "n": 7}, "outputs": [0, 0, 1, 1, 0, 0, 0, 0]}, {"idx": 1, "inputs": {"cells": [1, 0, 0, 1, 0, 0, 1, 0], "n": 1000000000}, "outputs": [0, 0, 1, 1, 1, 1, 1, 0]}], "title": "Prison Cells After N Days", "entry_fn_name": "prisonAfterNDays"}
{"question_id": "956", "schema": {"name": "tallestBillboard", "params": [{"name": "rods", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rods": [1, 2, 3, 6]}, "outputs": 6}, {"idx": 1, "inputs": {"rods": [1, 2, 3, 4, 5, 6]}, "outputs": 10}, {"idx": 2, "inputs": {"rods": [1, 2]}, "outputs": 0}], "title": "Tallest Billboard", "entry_fn_name": "tallestBillboard"}
{"question_id": "955", "schema": {"name": "minDeletionSize", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["ca", "bb", "ac"]}, "outputs": 1}, {"idx": 1, "inputs": {"strs": ["xc", "yb", "za"]}, "outputs": 0}, {"idx": 2, "inputs": {"strs": ["zyx", "wvu", "tsr"]}, "outputs": 3}], "title": "Delete Columns to Make Sorted II", "entry_fn_name": "minDeletionSize"}
{"question_id": "954", "schema": {"name": "canReorderDoubled", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 1, 3, 6]}, "outputs": false}, {"idx": 1, "inputs": {"arr": [2, 1, 2, 6]}, "outputs": false}, {"idx": 2, "inputs": {"arr": [4, -2, 2, -4]}, "outputs": true}], "title": "Array of Doubled Pairs", "entry_fn_name": "canReorderDoubled"}
{"question_id": "953", "schema": {"name": "isAlienSorted", "params": [{"name": "words", "type": "string[]"}, {"name": "order", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["hello", "leetcode"], "order": "hlabcdefgijkmnopqrstuvwxyz"}, "outputs": true}, {"idx": 1, "inputs": {"words": ["word", "world", "row"], "order": "worldabcefghijkmnpqstuvxyz"}, "outputs": false}, {"idx": 2, "inputs": {"words": ["apple", "app"], "order": "abcdefghijklmnopqrstuvwxyz"}, "outputs": false}], "title": "Verifying an Alien Dictionary", "entry_fn_name": "isAlienSorted"}
{"question_id": "952", "schema": {"name": "largestComponentSize", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 6, 15, 35]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [20, 50, 9, 63]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [2, 3, 6, 7, 4, 12, 21, 39]}, "outputs": 8}], "title": "Largest Component Size by Common Factor", "entry_fn_name": "largestComponentSize"}
{"question_id": "951", "schema": {"name": "flipEquiv", "params": [{"name": "root1", "type": "TreeNode"}, {"name": "root2", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root1": [1, 2, 3, 4, 5, 6, null, null, null, 7, 8], "root2": [1, 3, 2, null, 6, 4, 5, null, null, null, null, 8, 7]}, "outputs": true}, {"idx": 1, "inputs": {"root1": [], "root2": []}, "outputs": true}, {"idx": 2, "inputs": {"root1": [], "root2": [1]}, "outputs": false}], "title": "Flip Equivalent Binary Trees", "entry_fn_name": "flipEquiv"}
{"question_id": "950", "schema": {"name": "deckRevealedIncreasing", "params": [{"name": "deck", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"deck": [17, 13, 11, 2, 3, 5, 7]}, "outputs": [2, 13, 3, 11, 5, 17, 7]}, {"idx": 1, "inputs": {"deck": [1, 1000]}, "outputs": [1, 1000]}], "title": "Reveal Cards In Increasing Order", "entry_fn_name": "deckRevealedIncreasing"}
{"question_id": "949", "schema": {"name": "largestTimeFromDigits", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 4]}, "outputs": "23:41"}, {"idx": 1, "inputs": {"arr": [5, 5, 5, 5]}, "outputs": ""}], "title": "Largest Time for Given Digits", "entry_fn_name": "largestTimeFromDigits"}
{"question_id": "948", "schema": {"name": "bagOfTokensScore", "params": [{"name": "tokens", "type": "integer[]"}, {"name": "power", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tokens": [100], "power": 50}, "outputs": 0}, {"idx": 1, "inputs": {"tokens": [100, 200], "power": 150}, "outputs": 1}, {"idx": 2, "inputs": {"tokens": [100, 200, 300, 400], "power": 200}, "outputs": 2}], "title": "Bag of Tokens", "entry_fn_name": "bagOfTokensScore"}
{"question_id": "947", "schema": {"name": "removeStones", "params": [{"name": "stones", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [[0, 0], [0, 1], [1, 0], [1, 2], [2, 1], [2, 2]]}, "outputs": 5}, {"idx": 1, "inputs": {"stones": [[0, 0], [0, 2], [1, 1], [2, 0], [2, 2]]}, "outputs": 3}, {"idx": 2, "inputs": {"stones": [[0, 0]]}, "outputs": 0}], "title": "Most Stones Removed with Same Row or Column", "entry_fn_name": "removeStones"}
{"question_id": "946", "schema": {"name": "validateStackSequences", "params": [{"name": "pushed", "type": "integer[]"}, {"name": "popped", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"pushed": [1, 2, 3, 4, 5], "popped": [4, 5, 3, 2, 1]}, "outputs": true}, {"idx": 1, "inputs": {"pushed": [1, 2, 3, 4, 5], "popped": [4, 3, 5, 1, 2]}, "outputs": false}], "title": "Validate Stack Sequences", "entry_fn_name": "validateStackSequences"}
{"question_id": "945", "schema": {"name": "minIncrementForUnique", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 2]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [3, 2, 1, 2, 1, 7]}, "outputs": 6}], "title": "Minimum Increment to Make Array Unique", "entry_fn_name": "minIncrementForUnique"}
{"question_id": "944", "schema": {"name": "minDeletionSize", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["cba", "daf", "ghi"]}, "outputs": 1}, {"idx": 1, "inputs": {"strs": ["a", "b"]}, "outputs": 0}, {"idx": 2, "inputs": {"strs": ["zyx", "wvu", "tsr"]}, "outputs": 3}], "title": "Delete Columns to Make Sorted", "entry_fn_name": "minDeletionSize"}
{"question_id": "943", "schema": {"name": "shortestSuperstring", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["alex", "loves", "leetcode"]}, "outputs": "alexlovesleetcode"}, {"idx": 1, "inputs": {"words": ["catg", "ctaagt", "gcta", "ttca", "atgcatc"]}, "outputs": "gctaagttcatgcatc"}], "title": "Find the Shortest Superstring", "entry_fn_name": "shortestSuperstring"}
{"question_id": "942", "schema": {"name": "diStringMatch", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"s": "IDID"}, "outputs": [0, 4, 1, 3, 2]}, {"idx": 1, "inputs": {"s": "III"}, "outputs": [0, 1, 2, 3]}, {"idx": 2, "inputs": {"s": "DDI"}, "outputs": [3, 2, 0, 1]}], "title": "DI String Match", "entry_fn_name": "diStringMatch"}
{"question_id": "941", "schema": {"name": "validMountainArray", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 1]}, "outputs": false}, {"idx": 1, "inputs": {"arr": [3, 5, 5]}, "outputs": false}, {"idx": 2, "inputs": {"arr": [0, 3, 2, 1]}, "outputs": true}], "title": "Valid Mountain Array", "entry_fn_name": "validMountainArray"}
{"question_id": "940", "schema": {"name": "distinctSubseqII", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abc"}, "outputs": 7}, {"idx": 1, "inputs": {"s": "aba"}, "outputs": 6}, {"idx": 2, "inputs": {"s": "aaa"}, "outputs": 3}], "title": "Distinct Subsequences II", "entry_fn_name": "distinctSubseqII"}
{"question_id": "939", "schema": {"name": "minAreaRect", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 1], [1, 3], [3, 1], [3, 3], [2, 2]]}, "outputs": 4}, {"idx": 1, "inputs": {"points": [[1, 1], [1, 3], [3, 1], [3, 3], [4, 1], [4, 3]]}, "outputs": 2}], "title": "Minimum Area Rectangle", "entry_fn_name": "minAreaRect"}
{"question_id": "938", "schema": {"name": "rangeSumBST", "params": [{"name": "root", "type": "TreeNode"}, {"name": "low", "type": "integer"}, {"name": "high", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [10, 5, 15, 3, 7, null, 18], "low": 7, "high": 15}, "outputs": 32}, {"idx": 1, "inputs": {"root": [10, 5, 15, 3, 7, 13, 18, 1, null, 6], "low": 6, "high": 10}, "outputs": 23}], "title": "Range Sum of BST", "entry_fn_name": "rangeSumBST"}
{"question_id": "937", "schema": {"name": "reorderLogFiles", "params": [{"name": "logs", "type": "string[]"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"logs": ["dig1 8 1 5 1", "let1 art can", "dig2 3 6", "let2 own kit dig", "let3 art zero"]}, "outputs": ["let1 art can", "let3 art zero", "let2 own kit dig", "dig1 8 1 5 1", "dig2 3 6"]}, {"idx": 1, "inputs": {"logs": ["a1 9 2 3 1", "g1 act car", "zo4 4 7", "ab1 off key dog", "a8 act zoo"]}, "outputs": ["g1 act car", "a8 act zoo", "ab1 off key dog", "a1 9 2 3 1", "zo4 4 7"]}], "title": "Reorder Data in Log Files", "entry_fn_name": "reorderLogFiles"}
{"question_id": "936", "schema": {"name": "movesToStamp", "params": [{"name": "stamp", "type": "string"}, {"name": "target", "type": "string"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"stamp": "abc", "target": "ababc"}, "outputs": [0, 2]}, {"idx": 1, "inputs": {"stamp": "abca", "target": "aabcaca"}, "outputs": [3, 0, 1]}], "title": "Stamping The Sequence", "entry_fn_name": "movesToStamp"}
{"question_id": "935", "schema": {"name": "knightDialer", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": 10}, {"idx": 1, "inputs": {"n": 2}, "outputs": 20}, {"idx": 2, "inputs": {"n": 3131}, "outputs": 136006598}], "title": "Knight Dialer", "entry_fn_name": "knightDialer"}
{"question_id": "934", "schema": {"name": "shortestBridge", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1], [1, 0]]}, "outputs": 1}, {"idx": 1, "inputs": {"grid": [[0, 1, 0], [0, 0, 0], [0, 0, 1]]}, "outputs": 2}, {"idx": 2, "inputs": {"grid": [[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]]}, "outputs": 1}], "title": "Shortest Bridge", "entry_fn_name": "shortestBridge"}
{"question_id": "932", "schema": {"name": "beautifulArray", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": [2, 1, 4, 3]}, {"idx": 1, "inputs": {"n": 5}, "outputs": [3, 1, 2, 5, 4]}], "title": "Beautiful Array", "entry_fn_name": "beautifulArray"}
{"question_id": "931", "schema": {"name": "minFallingPathSum", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[2, 1, 3], [6, 5, 4], [7, 8, 9]]}, "outputs": 13}, {"idx": 1, "inputs": {"matrix": [[-19, 57], [-40, -5]]}, "outputs": -59}], "title": "Minimum Falling Path Sum", "entry_fn_name": "minFallingPathSum"}
{"question_id": "930", "schema": {"name": "numSubarraysWithSum", "params": [{"name": "nums", "type": "integer[]"}, {"name": "goal", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 0, 1, 0, 1], "goal": 2}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [0, 0, 0, 0, 0], "goal": 0}, "outputs": 15}], "title": "Binary Subarrays With Sum", "entry_fn_name": "numSubarraysWithSum"}
{"question_id": "929", "schema": {"name": "numUniqueEmails", "params": [{"name": "emails", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"emails": ["test.email+alex@leetcode.com", "test.e.mail+bob.cathy@leetcode.com", "testemail+david@lee.tcode.com"]}, "outputs": 2}, {"idx": 1, "inputs": {"emails": ["a@leetcode.com", "b@leetcode.com", "c@leetcode.com"]}, "outputs": 3}], "title": "Unique Email Addresses", "entry_fn_name": "numUniqueEmails"}
{"question_id": "928", "schema": {"name": "minMalwareSpread", "params": [{"name": "graph", "type": "integer[][]"}, {"name": "initial", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[1, 1, 0], [1, 1, 0], [0, 0, 1]], "initial": [0, 1]}, "outputs": 0}, {"idx": 1, "inputs": {"graph": [[1, 1, 0], [1, 1, 1], [0, 1, 1]], "initial": [0, 1]}, "outputs": 1}, {"idx": 2, "inputs": {"graph": [[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]], "initial": [0, 1]}, "outputs": 1}], "title": "Minimize Malware Spread II", "entry_fn_name": "minMalwareSpread"}
{"question_id": "927", "schema": {"name": "threeEqualParts", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 0, 1, 0, 1]}, "outputs": [0, 3]}, {"idx": 1, "inputs": {"arr": [1, 1, 0, 1, 1]}, "outputs": [-1, -1]}, {"idx": 2, "inputs": {"arr": [1, 1, 0, 0, 1]}, "outputs": [0, 2]}], "title": "Three Equal Parts", "entry_fn_name": "threeEqualParts"}
{"question_id": "926", "schema": {"name": "minFlipsMonoIncr", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "00110"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "010110"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "00011000"}, "outputs": 2}], "title": "Flip String to Monotone Increasing", "entry_fn_name": "minFlipsMonoIncr"}
{"question_id": "925", "schema": {"name": "isLongPressedName", "params": [{"name": "name", "type": "string"}, {"name": "typed", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"name": "alex", "typed": "aaleex"}, "outputs": true}, {"idx": 1, "inputs": {"name": "saeed", "typed": "ssaaedd"}, "outputs": false}], "title": "Long Pressed Name", "entry_fn_name": "isLongPressedName"}
{"question_id": "924", "schema": {"name": "minMalwareSpread", "params": [{"name": "graph", "type": "integer[][]"}, {"name": "initial", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[1, 1, 0], [1, 1, 0], [0, 0, 1]], "initial": [0, 1]}, "outputs": 0}, {"idx": 1, "inputs": {"graph": [[1, 0, 0], [0, 1, 0], [0, 0, 1]], "initial": [0, 2]}, "outputs": 0}, {"idx": 2, "inputs": {"graph": [[1, 1, 1], [1, 1, 1], [1, 1, 1]], "initial": [1, 2]}, "outputs": 1}], "title": "Minimize Malware Spread", "entry_fn_name": "minMalwareSpread"}
{"question_id": "923", "schema": {"name": "threeSumMulti", "params": [{"name": "arr", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], "target": 8}, "outputs": 20}, {"idx": 1, "inputs": {"arr": [1, 1, 2, 2, 2, 2], "target": 5}, "outputs": 12}, {"idx": 2, "inputs": {"arr": [2, 1, 3], "target": 6}, "outputs": 1}], "title": "3Sum With Multiplicity", "entry_fn_name": "threeSumMulti"}
{"question_id": "922", "schema": {"name": "sortArrayByParityII", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 2, 5, 7]}, "outputs": [4, 5, 2, 7]}, {"idx": 1, "inputs": {"nums": [2, 3]}, "outputs": [2, 3]}], "title": "Sort Array By Parity II", "entry_fn_name": "sortArrayByParityII"}
{"question_id": "921", "schema": {"name": "minAddToMakeValid", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "())"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "((("}, "outputs": 3}], "title": "Minimum Add to Make Parentheses Valid", "entry_fn_name": "minAddToMakeValid"}
{"question_id": "920", "schema": {"name": "numMusicPlaylists", "params": [{"name": "n", "type": "integer"}, {"name": "goal", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "goal": 3, "k": 1}, "outputs": 6}, {"idx": 1, "inputs": {"n": 2, "goal": 3, "k": 0}, "outputs": 6}, {"idx": 2, "inputs": {"n": 2, "goal": 3, "k": 1}, "outputs": 2}], "title": "Number of Music Playlists", "entry_fn_name": "numMusicPlaylists"}
{"question_id": "918", "schema": {"name": "maxSubarraySumCircular", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, -2, 3, -2]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [5, -3, 5]}, "outputs": 10}, {"idx": 2, "inputs": {"nums": [-3, -2, -3]}, "outputs": -2}], "title": "Maximum Sum Circular Subarray", "entry_fn_name": "maxSubarraySumCircular"}
{"question_id": "916", "schema": {"name": "wordSubsets", "params": [{"name": "words1", "type": "string[]"}, {"name": "words2", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words1": ["amazon", "apple", "facebook", "google", "leetcode"], "words2": ["e", "o"]}, "outputs": ["facebook", "google", "leetcode"]}, {"idx": 1, "inputs": {"words1": ["amazon", "apple", "facebook", "google", "leetcode"], "words2": ["l", "e"]}, "outputs": ["apple", "google", "leetcode"]}], "title": "Word Subsets", "entry_fn_name": "wordSubsets"}
{"question_id": "915", "schema": {"name": "partitionDisjoint", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 0, 3, 8, 6]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 1, 1, 0, 6, 12]}, "outputs": 4}], "title": "Partition Array into Disjoint Intervals", "entry_fn_name": "partitionDisjoint"}
{"question_id": "914", "schema": {"name": "hasGroupsSizeX", "params": [{"name": "deck", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"deck": [1, 2, 3, 4, 4, 3, 2, 1]}, "outputs": true}, {"idx": 1, "inputs": {"deck": [1, 1, 1, 2, 2, 2, 3, 3]}, "outputs": false}], "title": "X of a Kind in a Deck of Cards", "entry_fn_name": "hasGroupsSizeX"}
{"question_id": "913", "schema": {"name": "catMouseGame", "params": [{"name": "graph", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[2, 5], [3], [0, 4, 5], [1, 4, 5], [2, 3], [0, 2, 3]]}, "outputs": 0}, {"idx": 1, "inputs": {"graph": [[1, 3], [0], [3], [0, 2]]}, "outputs": 1}], "title": "Cat and Mouse", "entry_fn_name": "catMouseGame"}
{"question_id": "912", "schema": {"name": "sortArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 2, 3, 1]}, "outputs": [1, 2, 3, 5]}, {"idx": 1, "inputs": {"nums": [5, 1, 1, 2, 0, 0]}, "outputs": [0, 0, 1, 1, 2, 5]}], "title": "Sort an Array", "entry_fn_name": "sortArray"}
{"question_id": "910", "schema": {"name": "smallestRangeII", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1], "k": 0}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [0, 10], "k": 2}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [1, 3, 6], "k": 3}, "outputs": 3}], "title": "Smallest Range II", "entry_fn_name": "smallestRangeII"}
{"question_id": "909", "schema": {"name": "snakesAndLadders", "params": [{"name": "board", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"board": [[-1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1], [-1, 35, -1, -1, 13, -1], [-1, -1, -1, -1, -1, -1], [-1, 15, -1, -1, -1, -1]]}, "outputs": 4}, {"idx": 1, "inputs": {"board": [[-1, -1], [-1, 3]]}, "outputs": 1}], "title": "Snakes and Ladders", "entry_fn_name": "snakesAndLadders"}
{"question_id": "908", "schema": {"name": "smallestRangeI", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1], "k": 0}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [0, 10], "k": 2}, "outputs": 6}, {"idx": 2, "inputs": {"nums": [1, 3, 6], "k": 3}, "outputs": 0}], "title": "Smallest Range I", "entry_fn_name": "smallestRangeI"}
{"question_id": "907", "schema": {"name": "sumSubarrayMins", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [3, 1, 2, 4]}, "outputs": 17}, {"idx": 1, "inputs": {"arr": [11, 81, 94, 43, 3]}, "outputs": 444}], "title": "Sum of Subarray Minimums", "entry_fn_name": "sumSubarrayMins"}
{"question_id": "906", "schema": {"name": "superpalindromesInRange", "params": [{"name": "left", "type": "string"}, {"name": "right", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"left": "4", "right": "1000"}, "outputs": 4}, {"idx": 1, "inputs": {"left": "1", "right": "2"}, "outputs": 1}], "title": "Super Palindromes", "entry_fn_name": "superpalindromesInRange"}
{"question_id": "905", "schema": {"name": "sortArrayByParity", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 2, 4]}, "outputs": [2, 4, 3, 1]}, {"idx": 1, "inputs": {"nums": [0]}, "outputs": [0]}], "title": "Sort Array By Parity", "entry_fn_name": "sortArrayByParity"}
{"question_id": "904", "schema": {"name": "totalFruit", "params": [{"name": "fruits", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"fruits": []}, "outputs": 3}, {"idx": 1, "inputs": {"fruits": [0]}, "outputs": 3}, {"idx": 2, "inputs": {"fruits": [1]}, "outputs": 4}], "title": "Fruit Into Baskets", "entry_fn_name": "totalFruit"}
{"question_id": "903", "schema": {"name": "numPermsDISequence", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "DID"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "D"}, "outputs": 1}], "title": "Valid Permutations for DI Sequence", "entry_fn_name": "numPermsDISequence"}
{"question_id": "902", "schema": {"name": "atMostNGivenDigitSet", "params": [{"name": "digits", "type": "string[]"}, {"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"digits": ["1", "3", "5", "7"], "n": 100}, "outputs": 20}, {"idx": 1, "inputs": {"digits": ["1", "4", "9"], "n": 1000000000}, "outputs": 29523}, {"idx": 2, "inputs": {"digits": ["7"], "n": 8}, "outputs": 1}], "title": "Numbers At Most N Given Digit Set", "entry_fn_name": "atMostNGivenDigitSet"}
{"question_id": "899", "schema": {"name": "orderlyQueue", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "cba", "k": 1}, "outputs": "acb"}, {"idx": 1, "inputs": {"s": "baaca", "k": 3}, "outputs": "aaabc"}], "title": "Orderly Queue", "entry_fn_name": "orderlyQueue"}
{"question_id": "898", "schema": {"name": "subarrayBitwiseORs", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [0]}, "outputs": 1}, {"idx": 1, "inputs": {"arr": [1, 1, 2]}, "outputs": 3}, {"idx": 2, "inputs": {"arr": [1, 2, 4]}, "outputs": 6}], "title": "Bitwise ORs of Subarrays", "entry_fn_name": "subarrayBitwiseORs"}
{"question_id": "897", "schema": {"name": "increasingBST", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 3, 6, 2, 4, null, 8, 1, null, null, null, 7, 9]}, "outputs": [1, null, 2, null, 3, null, 4, null, 5, null, 6, null, 7, null, 8, null, 9]}, {"idx": 1, "inputs": {"root": [5, 1, 7]}, "outputs": [1, null, 5, null, 7]}], "title": "Increasing Order Search Tree", "entry_fn_name": "increasingBST"}
{"question_id": "896", "schema": {"name": "isMonotonic", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 2, 3]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [6, 5, 4, 4]}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 3, 2]}, "outputs": false}], "title": "Monotonic Array", "entry_fn_name": "isMonotonic"}
{"question_id": "894", "schema": {"name": "allPossibleFBT", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<TreeNode>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 7}, "outputs": [[0, 0, 0, null, null, 0, 0, null, null, 0, 0], [0, 0, 0, null, null, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, null, null, null, null, 0, 0], [0, 0, 0, 0, 0, null, null, 0, 0]]}, {"idx": 1, "inputs": {"n": 3}, "outputs": [[0, 0, 0]]}], "title": "All Possible Full Binary Trees", "entry_fn_name": "allPossibleFBT"}
{"question_id": "893", "schema": {"name": "numSpecialEquivGroups", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["abcd", "cdab", "cbad", "xyzz", "zzxy", "zzyx"]}, "outputs": 3}, {"idx": 1, "inputs": {"words": ["abc", "acb", "bac", "bca", "cab", "cba"]}, "outputs": 3}], "title": "Groups of Special-Equivalent Strings", "entry_fn_name": "numSpecialEquivGroups"}
{"question_id": "892", "schema": {"name": "surfaceArea", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 2], [3, 4]]}, "outputs": 34}, {"idx": 1, "inputs": {"grid": [[1, 1, 1], [1, 0, 1], [1, 1, 1]]}, "outputs": 32}, {"idx": 2, "inputs": {"grid": [[2, 2, 2], [2, 1, 2], [2, 2, 2]]}, "outputs": 46}], "title": "Surface Area of 3D Shapes", "entry_fn_name": "surfaceArea"}
{"question_id": "890", "schema": {"name": "findAndReplacePattern", "params": [{"name": "words", "type": "string[]"}, {"name": "pattern", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["abc", "deq", "mee", "aqq", "dkd", "ccc"], "pattern": "abb"}, "outputs": ["mee", "aqq"]}, {"idx": 1, "inputs": {"words": ["a", "b", "c"], "pattern": "a"}, "outputs": ["a", "b", "c"]}], "title": "Find and Replace Pattern", "entry_fn_name": "findAndReplacePattern"}
{"question_id": "889", "schema": {"name": "constructFromPrePost", "params": [{"name": "preorder", "type": "integer[]"}, {"name": "postorder", "type": "integer[]"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"preorder": [1, 2, 4, 5, 3, 6, 7], "postorder": [4, 5, 2, 6, 7, 3, 1]}, "outputs": [1, 2, 3, 4, 5, 6, 7]}, {"idx": 1, "inputs": {"preorder": [1], "postorder": [1]}, "outputs": [1]}], "title": "Construct Binary Tree from Preorder and Postorder Traversal", "entry_fn_name": "constructFromPrePost"}
{"question_id": "888", "schema": {"name": "fairCandySwap", "params": [{"name": "aliceSizes", "type": "integer[]"}, {"name": "bobSizes", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"aliceSizes": [1, 1], "bobSizes": [2, 2]}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"aliceSizes": [1, 2], "bobSizes": [2, 3]}, "outputs": [1, 2]}, {"idx": 2, "inputs": {"aliceSizes": [2], "bobSizes": [1, 3]}, "outputs": [2, 3]}], "title": "Fair Candy Swap", "entry_fn_name": "fairCandySwap"}
{"question_id": "887", "schema": {"name": "superEggDrop", "params": [{"name": "k", "type": "integer"}, {"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"k": 1, "n": 2}, "outputs": 2}, {"idx": 1, "inputs": {"k": 2, "n": 6}, "outputs": 3}, {"idx": 2, "inputs": {"k": 3, "n": 14}, "outputs": 4}], "title": "Super Egg Drop", "entry_fn_name": "superEggDrop"}
{"question_id": "886", "schema": {"name": "possibleBipartition", "params": [{"name": "n", "type": "integer"}, {"name": "dislikes", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "dislikes": [[1, 2], [1, 3], [2, 4]]}, "outputs": true}, {"idx": 1, "inputs": {"n": 3, "dislikes": [[1, 2], [1, 3], [2, 3]]}, "outputs": false}, {"idx": 2, "inputs": {"n": 5, "dislikes": [[1, 2], [2, 3], [3, 4], [4, 5], [1, 5]]}, "outputs": false}], "title": "Possible Bipartition", "entry_fn_name": "possibleBipartition"}
{"question_id": "885", "schema": {"name": "spiralMatrixIII", "params": [{"name": "rows", "type": "integer"}, {"name": "cols", "type": "integer"}, {"name": "rStart", "type": "integer"}, {"name": "cStart", "type": "integer"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"rows": 1, "cols": 4, "rStart": 0, "cStart": 0}, "outputs": [[0, 0], [0, 1], [0, 2], [0, 3]]}, {"idx": 1, "inputs": {"rows": 5, "cols": 6, "rStart": 1, "cStart": 4}, "outputs": [[1, 4], [1, 5], [2, 5], [2, 4], [2, 3], [1, 3], [0, 3], [0, 4], [0, 5], [3, 5], [3, 4], [3, 3], [3, 2], [2, 2], [1, 2], [0, 2], [4, 5], [4, 4], [4, 3], [4, 2], [4, 1], [3, 1], [2, 1], [1, 1], [0, 1], [4, 0], [3, 0], [2, 0], [1, 0], [0, 0]]}], "title": "Spiral Matrix III", "entry_fn_name": "spiralMatrixIII"}
{"question_id": "884", "schema": {"name": "uncommonFromSentences", "params": [{"name": "s1", "type": "string"}, {"name": "s2", "type": "string"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "this apple is sweet", "s2": "this apple is sour"}, "outputs": ["sweet", "sour"]}, {"idx": 1, "inputs": {"s1": "apple apple", "s2": "banana"}, "outputs": ["banana"]}], "title": "Uncommon Words from Two Sentences", "entry_fn_name": "uncommonFromSentences"}
{"question_id": "883", "schema": {"name": "projectionArea", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 2], [3, 4]]}, "outputs": 17}, {"idx": 1, "inputs": {"grid": [[2]]}, "outputs": 5}, {"idx": 2, "inputs": {"grid": [[1, 0], [0, 2]]}, "outputs": 8}], "title": "Projection Area of 3D Shapes", "entry_fn_name": "projectionArea"}
{"question_id": "882", "schema": {"name": "reachableNodes", "params": [{"name": "edges", "type": "integer[][]"}, {"name": "maxMoves", "type": "integer"}, {"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"edges": [[0, 1, 10], [0, 2, 1], [1, 2, 2]], "maxMoves": 6, "n": 3}, "outputs": 13}, {"idx": 1, "inputs": {"edges": [[0, 1, 4], [1, 2, 6], [0, 2, 8], [1, 3, 1]], "maxMoves": 10, "n": 4}, "outputs": 23}, {"idx": 2, "inputs": {"edges": [[1, 2, 4], [1, 4, 5], [1, 3, 1], [2, 3, 4], [3, 4, 5]], "maxMoves": 17, "n": 5}, "outputs": 1}], "title": "Reachable Nodes In Subdivided Graph", "entry_fn_name": "reachableNodes"}
{"question_id": "881", "schema": {"name": "numRescueBoats", "params": [{"name": "people", "type": "integer[]"}, {"name": "limit", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"people": [1, 2], "limit": 3}, "outputs": 1}, {"idx": 1, "inputs": {"people": [3, 2, 2, 1], "limit": 3}, "outputs": 3}, {"idx": 2, "inputs": {"people": [3, 5, 3, 4], "limit": 5}, "outputs": 4}], "title": "Boats to Save People", "entry_fn_name": "numRescueBoats"}
{"question_id": "880", "schema": {"name": "decodeAtIndex", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leet2code3", "k": 10}, "outputs": "o"}, {"idx": 1, "inputs": {"s": "ha22", "k": 5}, "outputs": "h"}, {"idx": 2, "inputs": {"s": "a2345678999999999999999", "k": 1}, "outputs": "a"}], "title": "Decoded String at Index", "entry_fn_name": "decodeAtIndex"}
{"question_id": "879", "schema": {"name": "profitableSchemes", "params": [{"name": "n", "type": "integer"}, {"name": "minProfit", "type": "integer"}, {"name": "group", "type": "integer[]"}, {"name": "profit", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "minProfit": 3, "group": [2, 2], "profit": [2, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"n": 10, "minProfit": 5, "group": [2, 3, 5], "profit": [6, 7, 8]}, "outputs": 7}], "title": "Profitable Schemes", "entry_fn_name": "profitableSchemes"}
{"question_id": "878", "schema": {"name": "nthMagicalNumber", "params": [{"name": "n", "type": "integer"}, {"name": "a", "type": "integer"}, {"name": "b", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "a": 2, "b": 3}, "outputs": 2}, {"idx": 1, "inputs": {"n": 4, "a": 2, "b": 3}, "outputs": 6}], "title": "Nth Magical Number", "entry_fn_name": "nthMagicalNumber"}
{"question_id": "877", "schema": {"name": "stoneGame", "params": [{"name": "piles", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"piles": [5, 3, 4, 5]}, "outputs": true}, {"idx": 1, "inputs": {"piles": [3, 7, 2, 3]}, "outputs": true}], "title": "Stone Game", "entry_fn_name": "stoneGame"}
{"question_id": "876", "schema": {"name": "middleNode", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5]}, "outputs": [3, 4, 5]}, {"idx": 1, "inputs": {"head": [1, 2, 3, 4, 5, 6]}, "outputs": [4, 5, 6]}], "title": "Middle of the Linked List", "entry_fn_name": "middleNode"}
{"question_id": "875", "schema": {"name": "minEatingSpeed", "params": [{"name": "piles", "type": "integer[]"}, {"name": "h", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"piles": [3, 6, 7, 11], "h": 8}, "outputs": 4}, {"idx": 1, "inputs": {"piles": [30, 11, 23, 4, 20], "h": 5}, "outputs": 30}, {"idx": 2, "inputs": {"piles": [30, 11, 23, 4, 20], "h": 6}, "outputs": 23}], "title": "Koko Eating Bananas", "entry_fn_name": "minEatingSpeed"}
{"question_id": "874", "schema": {"name": "robotSim", "params": [{"name": "commands", "type": "integer[]"}, {"name": "obstacles", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"commands": [4, -1, 3], "obstacles": []}, "outputs": 25}, {"idx": 1, "inputs": {"commands": [4, -1, 4, -2, 4], "obstacles": [[2, 4]]}, "outputs": 65}, {"idx": 2, "inputs": {"commands": [6, -1, -1, 6], "obstacles": []}, "outputs": 36}], "title": "Walking Robot Simulation", "entry_fn_name": "robotSim"}
{"question_id": "873", "schema": {"name": "lenLongestFibSubseq", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 4, 5, 6, 7, 8]}, "outputs": 5}, {"idx": 1, "inputs": {"arr": [1, 3, 7, 11, 12, 14, 18]}, "outputs": 3}], "title": "Length of Longest Fibonacci Subsequence", "entry_fn_name": "lenLongestFibSubseq"}
{"question_id": "872", "schema": {"name": "leafSimilar", "params": [{"name": "root1", "type": "TreeNode"}, {"name": "root2", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root1": [3, 5, 1, 6, 2, 9, 8, null, null, 7, 4], "root2": [3, 5, 1, 6, 7, 4, 2, null, null, null, null, null, null, 9, 8]}, "outputs": true}, {"idx": 1, "inputs": {"root1": [1, 2, 3], "root2": [1, 3, 2]}, "outputs": false}], "title": "Leaf-Similar Trees", "entry_fn_name": "leafSimilar"}
{"question_id": "871", "schema": {"name": "minRefuelStops", "params": [{"name": "target", "type": "integer"}, {"name": "startFuel", "type": "integer"}, {"name": "stations", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": 1, "startFuel": 1, "stations": []}, "outputs": 0}, {"idx": 1, "inputs": {"target": 100, "startFuel": 1, "stations": [[10, 100]]}, "outputs": -1}, {"idx": 2, "inputs": {"target": 100, "startFuel": 10, "stations": [[10, 60], [20, 30], [30, 30], [60, 40]]}, "outputs": 2}], "title": "Minimum Number of Refueling Stops", "entry_fn_name": "minRefuelStops"}
{"question_id": "870", "schema": {"name": "advantageCount", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [2, 7, 11, 15], "nums2": [1, 10, 4, 11]}, "outputs": [2, 11, 7, 15]}, {"idx": 1, "inputs": {"nums1": [12, 24, 8, 32], "nums2": [13, 25, 32, 11]}, "outputs": [24, 32, 8, 12]}], "title": "Advantage Shuffle", "entry_fn_name": "advantageCount"}
{"question_id": "869", "schema": {"name": "reorderedPowerOf2", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": true}, {"idx": 1, "inputs": {"n": 10}, "outputs": false}], "title": "Reordered Power of 2", "entry_fn_name": "reorderedPowerOf2"}
{"question_id": "868", "schema": {"name": "binaryGap", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 22}, "outputs": 2}, {"idx": 1, "inputs": {"n": 8}, "outputs": 0}, {"idx": 2, "inputs": {"n": 5}, "outputs": 2}], "title": "Binary Gap", "entry_fn_name": "binaryGap"}
{"question_id": "867", "schema": {"name": "transpose", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": [[1, 4, 7], [2, 5, 8], [3, 6, 9]]}, {"idx": 1, "inputs": {"matrix": [[1, 2, 3], [4, 5, 6]]}, "outputs": [[1, 4], [2, 5], [3, 6]]}], "title": "Transpose Matrix", "entry_fn_name": "transpose"}
{"question_id": "866", "schema": {"name": "primePalindrome", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6}, "outputs": 7}, {"idx": 1, "inputs": {"n": 8}, "outputs": 11}, {"idx": 2, "inputs": {"n": 13}, "outputs": 101}], "title": "Prime Palindrome", "entry_fn_name": "primePalindrome"}
{"question_id": "865", "schema": {"name": "subtreeWithAllDeepest", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]}, "outputs": [2, 7, 4]}, {"idx": 1, "inputs": {"root": [1]}, "outputs": [1]}, {"idx": 2, "inputs": {"root": [0, 1, 3, null, 2]}, "outputs": [2]}], "title": "Smallest Subtree with all the Deepest Nodes", "entry_fn_name": "subtreeWithAllDeepest"}
{"question_id": "864", "schema": {"name": "shortestPathAllKeys", "params": [{"name": "grid", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": ["@.a..", "###.#", "b.A.B"]}, "outputs": 8}, {"idx": 1, "inputs": {"grid": ["@..aA", "..B#.", "....b"]}, "outputs": 6}, {"idx": 2, "inputs": {"grid": ["@Aa"]}, "outputs": -1}], "title": "Shortest Path to Get All Keys", "entry_fn_name": "shortestPathAllKeys"}
{"question_id": "862", "schema": {"name": "shortestSubarray", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1], "k": 1}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 2], "k": 4}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [2, -1, 2], "k": 3}, "outputs": 3}], "title": "Shortest Subarray with Sum at Least K", "entry_fn_name": "shortestSubarray"}
{"question_id": "861", "schema": {"name": "matrixScore", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 0, 1, 1], [1, 0, 1, 0], [1, 1, 0, 0]]}, "outputs": 39}, {"idx": 1, "inputs": {"grid": [[0]]}, "outputs": 1}], "title": "Score After Flipping Matrix", "entry_fn_name": "matrixScore"}
{"question_id": "860", "schema": {"name": "lemonadeChange", "params": [{"name": "bills", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"bills": [5, 5, 5, 10, 20]}, "outputs": true}, {"idx": 1, "inputs": {"bills": [5, 5, 10, 10, 20]}, "outputs": false}], "title": "Lemonade Change", "entry_fn_name": "lemonadeChange"}
{"question_id": "859", "schema": {"name": "buddyStrings", "params": [{"name": "s", "type": "string"}, {"name": "goal", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ab", "goal": "ba"}, "outputs": true}, {"idx": 1, "inputs": {"s": "ab", "goal": "ab"}, "outputs": false}, {"idx": 2, "inputs": {"s": "aa", "goal": "aa"}, "outputs": true}], "title": "Buddy Strings", "entry_fn_name": "buddyStrings"}
{"question_id": "858", "schema": {"name": "mirrorReflection", "params": [{"name": "p", "type": "integer"}, {"name": "q", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"p": 2, "q": 1}, "outputs": 2}, {"idx": 1, "inputs": {"p": 3, "q": 1}, "outputs": 1}], "title": "Mirror Reflection", "entry_fn_name": "mirrorReflection"}
{"question_id": "857", "schema": {"name": "mincostToHireWorkers", "params": [{"name": "quality", "type": "integer[]"}, {"name": "wage", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"quality": [10, 20, 5], "wage": [70, 50, 30], "k": 2}, "outputs": 105.0}, {"idx": 1, "inputs": {"quality": [3, 1, 10, 10, 1], "wage": [4, 8, 2, 2, 7], "k": 3}, "outputs": 30.66667}], "title": "Minimum Cost to Hire K Workers", "entry_fn_name": "mincostToHireWorkers"}
{"question_id": "856", "schema": {"name": "scoreOfParentheses", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "()"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "(())"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "()()"}, "outputs": 2}], "title": "Score of Parentheses", "entry_fn_name": "scoreOfParentheses"}
{"question_id": "854", "schema": {"name": "kSimilarity", "params": [{"name": "s1", "type": "string"}, {"name": "s2", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "ab", "s2": "ba"}, "outputs": 1}, {"idx": 1, "inputs": {"s1": "abc", "s2": "bca"}, "outputs": 2}], "title": "K-Similar Strings", "entry_fn_name": "kSimilarity"}
{"question_id": "853", "schema": {"name": "carFleet", "params": [{"name": "target", "type": "integer"}, {"name": "position", "type": "integer[]"}, {"name": "speed", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": 12, "position": [10, 8, 0, 5, 3], "speed": [2, 4, 1, 1, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"target": 10, "position": [3], "speed": [3]}, "outputs": 1}, {"idx": 2, "inputs": {"target": 100, "position": [0, 2, 4], "speed": [4, 2, 1]}, "outputs": 1}], "title": "Car Fleet", "entry_fn_name": "carFleet"}
{"question_id": "852", "schema": {"name": "peakIndexInMountainArray", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [0, 1, 0]}, "outputs": 1}, {"idx": 1, "inputs": {"arr": [0, 2, 1, 0]}, "outputs": 1}, {"idx": 2, "inputs": {"arr": [0, 10, 5, 2]}, "outputs": 1}], "title": "Peak Index in a Mountain Array", "entry_fn_name": "peakIndexInMountainArray"}
{"question_id": "851", "schema": {"name": "loudAndRich", "params": [{"name": "richer", "type": "integer[][]"}, {"name": "quiet", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"richer": [[1, 0], [2, 1], [3, 1], [3, 7], [4, 3], [5, 3], [6, 3]], "quiet": [3, 2, 5, 4, 6, 1, 7, 0]}, "outputs": [5, 5, 2, 5, 4, 5, 6, 7]}, {"idx": 1, "inputs": {"richer": [], "quiet": [0]}, "outputs": [0]}], "title": "Loud and Rich", "entry_fn_name": "loudAndRich"}
{"question_id": "850", "schema": {"name": "rectangleArea", "params": [{"name": "rectangles", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"rectangles": [[0, 0, 2, 2], [1, 0, 2, 3], [1, 0, 3, 1]]}, "outputs": 6}, {"idx": 1, "inputs": {"rectangles": [[0, 0, 1000000000, 1000000000]]}, "outputs": 49}], "title": "Rectangle Area II", "entry_fn_name": "rectangleArea"}
{"question_id": "849", "schema": {"name": "maxDistToClosest", "params": [{"name": "seats", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"seats": [1, 0, 0, 0, 1, 0, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"seats": [1, 0, 0, 0]}, "outputs": 3}, {"idx": 2, "inputs": {"seats": [0, 1]}, "outputs": 1}], "title": "Maximize Distance to Closest Person", "entry_fn_name": "maxDistToClosest"}
{"question_id": "848", "schema": {"name": "shiftingLetters", "params": [{"name": "s", "type": "string"}, {"name": "shifts", "type": "integer[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abc", "shifts": [3, 5, 9]}, "outputs": "rpl"}, {"idx": 1, "inputs": {"s": "aaa", "shifts": [1, 2, 3]}, "outputs": "gfd"}], "title": "Shifting Letters", "entry_fn_name": "shiftingLetters"}
{"question_id": "847", "schema": {"name": "shortestPathLength", "params": [{"name": "graph", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[1, 2, 3], [0], [0], [0]]}, "outputs": 4}, {"idx": 1, "inputs": {"graph": [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]]}, "outputs": 4}], "title": "Shortest Path Visiting All Nodes", "entry_fn_name": "shortestPathLength"}
{"question_id": "846", "schema": {"name": "isNStraightHand", "params": [{"name": "hand", "type": "integer[]"}, {"name": "groupSize", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"hand": [1, 2, 3, 6, 2, 3, 4, 7, 8], "groupSize": 3}, "outputs": true}, {"idx": 1, "inputs": {"hand": [1, 2, 3, 4, 5], "groupSize": 4}, "outputs": false}], "title": "Hand of Straights", "entry_fn_name": "isNStraightHand"}
{"question_id": "845", "schema": {"name": "longestMountain", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 1, 4, 7, 3, 2, 5]}, "outputs": 5}, {"idx": 1, "inputs": {"arr": [2, 2, 2]}, "outputs": 0}], "title": "Longest Mountain in Array", "entry_fn_name": "longestMountain"}
{"question_id": "844", "schema": {"name": "backspaceCompare", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ab#c", "t": "ad#c"}, "outputs": true}, {"idx": 1, "inputs": {"s": "ab##", "t": "c#d#"}, "outputs": true}, {"idx": 2, "inputs": {"s": "a#c", "t": "b"}, "outputs": false}], "title": "Backspace String Compare", "entry_fn_name": "backspaceCompare"}
{"question_id": "842", "schema": {"name": "splitIntoFibonacci", "params": [{"name": "num", "type": "string"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"num": "1101111"}, "outputs": [11, 0, 11, 11]}, {"idx": 1, "inputs": {"num": "112358130"}, "outputs": []}, {"idx": 2, "inputs": {"num": "0123"}, "outputs": []}], "title": "Split Array into Fibonacci Sequence", "entry_fn_name": "splitIntoFibonacci"}
{"question_id": "841", "schema": {"name": "canVisitAllRooms", "params": [{"name": "rooms", "type": "list<list<integer>>"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"rooms": [[1], [2], [3], []]}, "outputs": true}, {"idx": 1, "inputs": {"rooms": [[1, 3], [3, 0, 1], [2], [0]]}, "outputs": false}], "title": "Keys and Rooms", "entry_fn_name": "canVisitAllRooms"}
{"question_id": "840", "schema": {"name": "numMagicSquaresInside", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[4, 3, 8, 4], [9, 5, 1, 9], [2, 7, 6, 2]]}, "outputs": 1}, {"idx": 1, "inputs": {"grid": [[8]]}, "outputs": 0}], "title": "Magic Squares In Grid", "entry_fn_name": "numMagicSquaresInside"}
{"question_id": "839", "schema": {"name": "numSimilarGroups", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["tars", "rats", "arts", "star"]}, "outputs": 2}, {"idx": 1, "inputs": {"strs": ["omv", "ovm"]}, "outputs": 1}], "title": "Similar String Groups", "entry_fn_name": "numSimilarGroups"}
{"question_id": "838", "schema": {"name": "pushDominoes", "params": [{"name": "dominoes", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"dominoes": "RR.L"}, "outputs": "RR.L"}, {"idx": 1, "inputs": {"dominoes": ".L.R...LR..L.."}, "outputs": "LL.RR.LLRRLL.."}], "title": "Push Dominoes", "entry_fn_name": "pushDominoes"}
{"question_id": "837", "schema": {"name": "new21Game", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}, {"name": "maxPts", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10, "k": 1, "maxPts": 10}, "outputs": 1.0}, {"idx": 1, "inputs": {"n": 6, "k": 1, "maxPts": 10}, "outputs": 0.6}, {"idx": 2, "inputs": {"n": 21, "k": 17, "maxPts": 10}, "outputs": 0.73278}], "title": "New 21 Game", "entry_fn_name": "new21Game"}
{"question_id": "836", "schema": {"name": "isRectangleOverlap", "params": [{"name": "rec1", "type": "integer[]"}, {"name": "rec2", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"rec1": [0, 0, 2, 2], "rec2": [1, 1, 3, 3]}, "outputs": true}, {"idx": 1, "inputs": {"rec1": [0, 0, 1, 1], "rec2": [1, 0, 2, 1]}, "outputs": false}, {"idx": 2, "inputs": {"rec1": [0, 0, 1, 1], "rec2": [2, 2, 3, 3]}, "outputs": false}], "title": "Rectangle Overlap", "entry_fn_name": "isRectangleOverlap"}
{"question_id": "835", "schema": {"name": "largestOverlap", "params": [{"name": "img1", "type": "integer[][]"}, {"name": "img2", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"img1": [[1, 1, 0], [0, 1, 0], [0, 1, 0]], "img2": [[0, 0, 0], [0, 1, 1], [0, 0, 1]]}, "outputs": 3}, {"idx": 1, "inputs": {"img1": [[1]], "img2": [[1]]}, "outputs": 1}, {"idx": 2, "inputs": {"img1": [[0]], "img2": [[0]]}, "outputs": 0}], "title": "Image Overlap", "entry_fn_name": "largestOverlap"}
{"question_id": "834", "schema": {"name": "sumOfDistancesInTree", "params": [{"name": "n", "type": "integer"}, {"name": "edges", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6, "edges": [[0, 1], [0, 2], [2, 3], [2, 4], [2, 5]]}, "outputs": [8, 12, 6, 10, 10, 10]}, {"idx": 1, "inputs": {"n": 1, "edges": []}, "outputs": [0]}, {"idx": 2, "inputs": {"n": 2, "edges": [[1, 0]]}, "outputs": [1, 1]}], "title": "Sum of Distances in Tree", "entry_fn_name": "sumOfDistancesInTree"}
{"question_id": "833", "schema": {"name": "findReplaceString", "params": [{"name": "s", "type": "string"}, {"name": "indices", "type": "integer[]"}, {"name": "sources", "type": "string[]"}, {"name": "targets", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcd", "indices": [0, 2], "sources": ["a", "cd"], "targets": ["eee", "ffff"]}, "outputs": "eeebffff"}, {"idx": 1, "inputs": {"s": "abcd", "indices": [0, 2], "sources": ["ab", "ec"], "targets": ["eee", "ffff"]}, "outputs": "eeecd"}], "title": "Find And Replace in String", "entry_fn_name": "findReplaceString"}
{"question_id": "832", "schema": {"name": "flipAndInvertImage", "params": [{"name": "image", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"image": [[1, 1, 0], [1, 0, 1], [0, 0, 0]]}, "outputs": [[1, 0, 0], [0, 1, 0], [1, 1, 1]]}, {"idx": 1, "inputs": {"image": [[1, 1, 0, 0], [1, 0, 0, 1], [0, 1, 1, 1], [1, 0, 1, 0]]}, "outputs": [[1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 0, 1, 0]]}], "title": "Flipping an Image", "entry_fn_name": "flipAndInvertImage"}
{"question_id": "831", "schema": {"name": "maskPII", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "LeetCode@LeetCode.com"}, "outputs": "l*****e@leetcode.com"}, {"idx": 1, "inputs": {"s": "AB@qq.com"}, "outputs": "a*****b@qq.com"}, {"idx": 2, "inputs": {"s": "1(234)567-890"}, "outputs": "***-***-7890"}], "title": "Masking Personal Information", "entry_fn_name": "maskPII"}
{"question_id": "830", "schema": {"name": "largeGroupPositions", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abbxxxxzzy"}, "outputs": [[3, 6]]}, {"idx": 1, "inputs": {"s": "abc"}, "outputs": []}, {"idx": 2, "inputs": {"s": "abcdddeeeeaabbbcd"}, "outputs": [[3, 5], [6, 9], [12, 14]]}], "title": "Positions of Large Groups", "entry_fn_name": "largeGroupPositions"}
{"question_id": "829", "schema": {"name": "consecutiveNumbersSum", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": 2}, {"idx": 1, "inputs": {"n": 9}, "outputs": 3}, {"idx": 2, "inputs": {"n": 15}, "outputs": 4}], "title": "Consecutive Numbers Sum", "entry_fn_name": "consecutiveNumbersSum"}
{"question_id": "828", "schema": {"name": "uniqueLetterString", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ABC"}, "outputs": 10}, {"idx": 1, "inputs": {"s": "ABA"}, "outputs": 8}, {"idx": 2, "inputs": {"s": "LEETCODE"}, "outputs": 92}], "title": "Count Unique Characters of All Substrings of a Given String", "entry_fn_name": "uniqueLetterString"}
{"question_id": "827", "schema": {"name": "largestIsland", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 0], [0, 1]]}, "outputs": 3}, {"idx": 1, "inputs": {"grid": [[1, 1], [1, 0]]}, "outputs": 4}, {"idx": 2, "inputs": {"grid": [[1, 1], [1, 1]]}, "outputs": 4}], "title": "Making A Large Island", "entry_fn_name": "largestIsland"}
{"question_id": "826", "schema": {"name": "maxProfitAssignment", "params": [{"name": "difficulty", "type": "integer[]"}, {"name": "profit", "type": "integer[]"}, {"name": "worker", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"difficulty": [2, 4, 6, 8, 10], "profit": [10, 20, 30, 40, 50], "worker": [4, 5, 6, 7]}, "outputs": 100}, {"idx": 1, "inputs": {"difficulty": [85, 47, 57], "profit": [24, 66, 99], "worker": [40, 25, 25]}, "outputs": 0}], "title": "Most Profit Assigning Work", "entry_fn_name": "maxProfitAssignment"}
{"question_id": "825", "schema": {"name": "numFriendRequests", "params": [{"name": "ages", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"ages": [16, 16]}, "outputs": 2}, {"idx": 1, "inputs": {"ages": [16, 17, 18]}, "outputs": 2}, {"idx": 2, "inputs": {"ages": [20, 30, 100, 110, 120]}, "outputs": 3}], "title": "Friends Of Appropriate Ages", "entry_fn_name": "numFriendRequests"}
{"question_id": "824", "schema": {"name": "toGoatLatin", "params": [{"name": "sentence", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"sentence": "I speak Goat Latin"}, "outputs": "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"}, {"idx": 1, "inputs": {"sentence": "The quick brown fox jumped over the lazy dog"}, "outputs": "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"}], "title": "Goat Latin", "entry_fn_name": "toGoatLatin"}
{"question_id": "823", "schema": {"name": "numFactoredBinaryTrees", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [2, 4]}, "outputs": 3}, {"idx": 1, "inputs": {"arr": [2, 4, 5, 10]}, "outputs": 7}], "title": "Binary Trees With Factors", "entry_fn_name": "numFactoredBinaryTrees"}
{"question_id": "822", "schema": {"name": "flipgame", "params": [{"name": "fronts", "type": "integer[]"}, {"name": "backs", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"fronts": [1, 2, 4, 4, 7], "backs": [1, 3, 4, 1, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"fronts": [1], "backs": [1]}, "outputs": 0}], "title": "Card Flipping Game", "entry_fn_name": "flipgame"}
{"question_id": "821", "schema": {"name": "shortestToChar", "params": [{"name": "s", "type": "string"}, {"name": "c", "type": "character"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"s": "loveleetcode", "c": "e"}, "outputs": [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]}, {"idx": 1, "inputs": {"s": "aaab", "c": "b"}, "outputs": [3, 2, 1, 0]}], "title": "Shortest Distance to a Character", "entry_fn_name": "shortestToChar"}
{"question_id": "820", "schema": {"name": "minimumLengthEncoding", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["time", "me", "bell"]}, "outputs": 10}, {"idx": 1, "inputs": {"words": ["t"]}, "outputs": 2}], "title": "Short Encoding of Words", "entry_fn_name": "minimumLengthEncoding"}
{"question_id": "819", "schema": {"name": "mostCommonWord", "params": [{"name": "paragraph", "type": "string"}, {"name": "banned", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"paragraph": "Bob hit a ball, the hit BALL flew far after it was hit.", "banned": ["hit"]}, "outputs": "ball"}, {"idx": 1, "inputs": {"paragraph": "a.", "banned": []}, "outputs": "a"}], "title": "Most Common Word", "entry_fn_name": "mostCommonWord"}
{"question_id": "818", "schema": {"name": "racecar", "params": [{"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": 3}, "outputs": 2}, {"idx": 1, "inputs": {"target": 6}, "outputs": 5}], "title": "Race Car", "entry_fn_name": "racecar"}
{"question_id": "817", "schema": {"name": "numComponents", "params": [{"name": "head", "type": "ListNode"}, {"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"head": [0, 1, 2, 3], "nums": [0, 1, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"head": [0, 1, 2, 3, 4], "nums": [0, 3, 1, 4]}, "outputs": 2}], "title": "Linked List Components", "entry_fn_name": "numComponents"}
{"question_id": "816", "schema": {"name": "ambiguousCoordinates", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(123)"}, "outputs": ["(1, 2.3)", "(1, 23)", "(1.2, 3)", "(12, 3)"]}, {"idx": 1, "inputs": {"s": "(0123)"}, "outputs": ["(0, 1.23)", "(0, 12.3)", "(0, 123)", "(0.1, 2.3)", "(0.1, 23)", "(0.12, 3)"]}, {"idx": 2, "inputs": {"s": "(00011)"}, "outputs": ["(0, 0.011)", "(0.001, 1)"]}], "title": "Ambiguous Coordinates", "entry_fn_name": "ambiguousCoordinates"}
{"question_id": "815", "schema": {"name": "numBusesToDestination", "params": [{"name": "routes", "type": "integer[][]"}, {"name": "source", "type": "integer"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"routes": [[1, 2, 7], [3, 6, 7]], "source": 1, "target": 6}, "outputs": 2}, {"idx": 1, "inputs": {"routes": [[7, 12], [4, 5, 15], [6], [15, 19], [9, 12, 13]], "source": 15, "target": 12}, "outputs": -1}], "title": "Bus Routes", "entry_fn_name": "numBusesToDestination"}
{"question_id": "814", "schema": {"name": "pruneTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 0, 0, 1]}, "outputs": [1, null, 0, null, 1]}, {"idx": 1, "inputs": {"root": [1, 0, 1, 0, 0, 0, 1]}, "outputs": [1, null, 1, null, 1]}, {"idx": 2, "inputs": {"root": [1, 1, 0, 1, 1, 0, 1, 0]}, "outputs": [1, 1, 0, 1, 1, null, 1]}], "title": "Binary Tree Pruning", "entry_fn_name": "pruneTree"}
{"question_id": "813", "schema": {"name": "largestSumOfAverages", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [9, 1, 2, 3, 9], "k": 3}, "outputs": 20.0}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 5, 6, 7], "k": 4}, "outputs": 20.5}], "title": "Largest Sum of Averages", "entry_fn_name": "largestSumOfAverages"}
{"question_id": "812", "schema": {"name": "largestTriangleArea", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[0, 0], [0, 1], [1, 0], [0, 2], [2, 0]]}, "outputs": 2.0}, {"idx": 1, "inputs": {"points": [[1, 0], [0, 0], [0, 1]]}, "outputs": 0.5}], "title": "Largest Triangle Area", "entry_fn_name": "largestTriangleArea"}
{"question_id": "811", "schema": {"name": "subdomainVisits", "params": [{"name": "cpdomains", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"cpdomains": ["9001 discuss.leetcode.com"]}, "outputs": ["9001 leetcode.com", "9001 discuss.leetcode.com", "9001 com"]}, {"idx": 1, "inputs": {"cpdomains": ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]}, "outputs": ["901 mail.com", "50 yahoo.com", "900 google.mail.com", "5 wiki.org", "5 org", "1 intel.mail.com", "951 com"]}], "title": "Subdomain Visit Count", "entry_fn_name": "subdomainVisits"}
{"question_id": "810", "schema": {"name": "xorGame", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 2]}, "outputs": false}, {"idx": 1, "inputs": {"nums": [0, 1]}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 2, 3]}, "outputs": true}], "title": "Chalkboard XOR Game", "entry_fn_name": "xorGame"}
{"question_id": "809", "schema": {"name": "expressiveWords", "params": [{"name": "s", "type": "string"}, {"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "heeellooo", "words": ["hello", "hi", "helo"]}, "outputs": 1}, {"idx": 1, "inputs": {"s": "zzzzzyyyyy", "words": ["zzyy", "zy", "zyy"]}, "outputs": 3}], "title": "Expressive Words", "entry_fn_name": "expressiveWords"}
{"question_id": "808", "schema": {"name": "soupServings", "params": [{"name": "n", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"n": 50}, "outputs": 0.625}, {"idx": 1, "inputs": {"n": 100}, "outputs": 0.71875}], "title": "Soup Servings", "entry_fn_name": "soupServings"}
{"question_id": "807", "schema": {"name": "maxIncreaseKeepingSkyline", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0]]}, "outputs": 35}, {"idx": 1, "inputs": {"grid": [[0, 0, 0], [0, 0, 0], [0, 0, 0]]}, "outputs": 0}], "title": "Max Increase to Keep City Skyline", "entry_fn_name": "maxIncreaseKeepingSkyline"}
{"question_id": "806", "schema": {"name": "numberOfLines", "params": [{"name": "widths", "type": "integer[]"}, {"name": "s", "type": "string"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"widths": [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], "s": "abcdefghijklmnopqrstuvwxyz"}, "outputs": [3, 60]}, {"idx": 1, "inputs": {"widths": [4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], "s": "bbbcccdddaaa"}, "outputs": [2, 4]}], "title": "Number of Lines To Write String", "entry_fn_name": "numberOfLines"}
{"question_id": "805", "schema": {"name": "splitArraySameAverage", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5, 6, 7, 8]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [3, 1]}, "outputs": false}], "title": "Split Array With Same Average", "entry_fn_name": "splitArraySameAverage"}
{"question_id": "804", "schema": {"name": "uniqueMorseRepresentations", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["gin", "zen", "gig", "msg"]}, "outputs": 2}, {"idx": 1, "inputs": {"words": ["a"]}, "outputs": 1}], "title": "Unique Morse Code Words", "entry_fn_name": "uniqueMorseRepresentations"}
{"question_id": "803", "schema": {"name": "hitBricks", "params": [{"name": "grid", "type": "integer[][]"}, {"name": "hits", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 0, 0, 0], [1, 1, 1, 0]], "hits": [[1, 0]]}, "outputs": [2]}, {"idx": 1, "inputs": {"grid": [[1, 0, 0, 0], [1, 1, 0, 0]], "hits": [[1, 1], [1, 0]]}, "outputs": [0, 0]}], "title": "Bricks Falling When Hit", "entry_fn_name": "hitBricks"}
{"question_id": "802", "schema": {"name": "eventualSafeNodes", "params": [{"name": "graph", "type": "integer[][]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[1, 2], [2, 3], [5], [0], [5], [], []]}, "outputs": [2, 4, 5, 6]}, {"idx": 1, "inputs": {"graph": [[1, 2, 3, 4], [1, 2], [3, 4], [0, 4], []]}, "outputs": [4]}], "title": "Find Eventual Safe States", "entry_fn_name": "eventualSafeNodes"}
{"question_id": "801", "schema": {"name": "minSwap", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 3, 5, 4], "nums2": [1, 2, 3, 7]}, "outputs": 1}, {"idx": 1, "inputs": {"nums1": [0, 3, 5, 8, 9], "nums2": [2, 1, 4, 6, 9]}, "outputs": 1}], "title": "Minimum Swaps To Make Sequences Increasing", "entry_fn_name": "minSwap"}
{"question_id": "799", "schema": {"name": "champagneTower", "params": [{"name": "poured", "type": "integer"}, {"name": "query_row", "type": "integer"}, {"name": "query_glass", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"poured": 1, "query_row": 1, "query_glass": 1}, "outputs": 0.0}, {"idx": 1, "inputs": {"poured": 2, "query_row": 1, "query_glass": 1}, "outputs": 0.5}, {"idx": 2, "inputs": {"poured": 100000009, "query_row": 33, "query_glass": 17}, "outputs": 1.0}], "title": "Champagne Tower", "entry_fn_name": "champagneTower"}
{"question_id": "798", "schema": {"name": "bestRotation", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 1, 4, 0]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 3, 0, 2, 4]}, "outputs": 0}], "title": "Smallest Rotation with Highest Score", "entry_fn_name": "bestRotation"}
{"question_id": "797", "schema": {"name": "allPathsSourceTarget", "params": [{"name": "graph", "type": "integer[][]"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[1, 2], [3], [3], []]}, "outputs": [[0, 1, 3], [0, 2, 3]]}, {"idx": 1, "inputs": {"graph": [[4, 3, 1], [3, 2, 4], [3], [4], []]}, "outputs": [[0, 4], [0, 3, 4], [0, 1, 3, 4], [0, 1, 2, 3, 4], [0, 1, 4]]}], "title": "All Paths From Source to Target", "entry_fn_name": "allPathsSourceTarget"}
{"question_id": "796", "schema": {"name": "rotateString", "params": [{"name": "s", "type": "string"}, {"name": "goal", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcde", "goal": "cdeab"}, "outputs": true}, {"idx": 1, "inputs": {"s": "abcde", "goal": "abced"}, "outputs": false}], "title": "Rotate String", "entry_fn_name": "rotateString"}
{"question_id": "795", "schema": {"name": "numSubarrayBoundedMax", "params": [{"name": "nums", "type": "integer[]"}, {"name": "left", "type": "integer"}, {"name": "right", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 1, 4, 3], "left": 2, "right": 3}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [2, 9, 2, 5, 6], "left": 2, "right": 8}, "outputs": 7}], "title": "Number of Subarrays with Bounded Maximum", "entry_fn_name": "numSubarrayBoundedMax"}
{"question_id": "794", "schema": {"name": "validTicTacToe", "params": [{"name": "board", "type": "string[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"board": ["O  ", "   ", "   "]}, "outputs": false}, {"idx": 1, "inputs": {"board": ["XOX", " X ", "   "]}, "outputs": false}, {"idx": 2, "inputs": {"board": ["XOX", "O O", "XOX"]}, "outputs": true}], "title": "Valid Tic-Tac-Toe State", "entry_fn_name": "validTicTacToe"}
{"question_id": "793", "schema": {"name": "preimageSizeFZF", "params": [{"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"k": 0}, "outputs": 5}, {"idx": 1, "inputs": {"k": 5}, "outputs": 0}, {"idx": 2, "inputs": {"k": 3}, "outputs": 5}], "title": "Preimage Size of Factorial Zeroes Function", "entry_fn_name": "preimageSizeFZF"}
{"question_id": "792", "schema": {"name": "numMatchingSubseq", "params": [{"name": "s", "type": "string"}, {"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcde", "words": ["a", "bb", "acd", "ace"]}, "outputs": 3}, {"idx": 1, "inputs": {"s": "dsahjpjauf", "words": ["ahjpjau", "ja", "ahbwzgqnuk", "tnmlanowax"]}, "outputs": 2}], "title": "Number of Matching Subsequences", "entry_fn_name": "numMatchingSubseq"}
{"question_id": "791", "schema": {"name": "customSortString", "params": [{"name": "order", "type": "string"}, {"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"order": "cba", "s": "abcd"}, "outputs": "cbad"}, {"idx": 1, "inputs": {"order": "cbafg", "s": "abcd"}, "outputs": "cbad"}], "title": "Custom Sort String", "entry_fn_name": "customSortString"}
{"question_id": "790", "schema": {"name": "numTilings", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 5}, {"idx": 1, "inputs": {"n": 1}, "outputs": 1}], "title": "Domino and Tromino Tiling", "entry_fn_name": "numTilings"}
{"question_id": "789", "schema": {"name": "escapeGhosts", "params": [{"name": "ghosts", "type": "integer[][]"}, {"name": "target", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"ghosts": [[1, 0], [0, 3]], "target": [0, 1]}, "outputs": true}, {"idx": 1, "inputs": {"ghosts": [[1, 0]], "target": [2, 0]}, "outputs": false}, {"idx": 2, "inputs": {"ghosts": [[2, 0]], "target": [1, 0]}, "outputs": false}], "title": "Escape The Ghosts", "entry_fn_name": "escapeGhosts"}
{"question_id": "788", "schema": {"name": "rotatedDigits", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10}, "outputs": 4}, {"idx": 1, "inputs": {"n": 1}, "outputs": 0}, {"idx": 2, "inputs": {"n": 2}, "outputs": 1}], "title": "Rotated Digits", "entry_fn_name": "rotatedDigits"}
{"question_id": "787", "schema": {"name": "findCheapestPrice", "params": [{"name": "n", "type": "integer"}, {"name": "flights", "type": "integer[][]"}, {"name": "src", "type": "integer"}, {"name": "dst", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "flights": [[0, 1, 100], [1, 2, 100], [2, 0, 100], [1, 3, 600], [2, 3, 200]], "src": 0, "dst": 3, "k": 1}, "outputs": 700}, {"idx": 1, "inputs": {"n": 3, "flights": [[0, 1, 100], [1, 2, 100], [0, 2, 500]], "src": 0, "dst": 2, "k": 1}, "outputs": 200}, {"idx": 2, "inputs": {"n": 3, "flights": [[0, 1, 100], [1, 2, 100], [0, 2, 500]], "src": 0, "dst": 2, "k": 0}, "outputs": 500}], "title": "Cheapest Flights Within K Stops", "entry_fn_name": "findCheapestPrice"}
{"question_id": "786", "schema": {"name": "kthSmallestPrimeFraction", "params": [{"name": "arr", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 5], "k": 3}, "outputs": [2, 5]}, {"idx": 1, "inputs": {"arr": [1, 7], "k": 1}, "outputs": [1, 7]}], "title": "K-th Smallest Prime Fraction", "entry_fn_name": "kthSmallestPrimeFraction"}
{"question_id": "785", "schema": {"name": "isBipartite", "params": [{"name": "graph", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"graph": [[1, 2, 3], [0, 2], [0, 1, 3], [0, 2]]}, "outputs": false}, {"idx": 1, "inputs": {"graph": [[1, 3], [0, 2], [1, 3], [0, 2]]}, "outputs": true}], "title": "Is Graph Bipartite?", "entry_fn_name": "isBipartite"}
{"question_id": "784", "schema": {"name": "letterCasePermutation", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "a1b2"}, "outputs": ["a1b2", "a1B2", "A1b2", "A1B2"]}, {"idx": 1, "inputs": {"s": "3z4"}, "outputs": ["3z4", "3Z4"]}], "title": "Letter Case Permutation", "entry_fn_name": "letterCasePermutation"}
{"question_id": "783", "schema": {"name": "minDiffInBST", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 2, 6, 1, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"root": [1, 0, 48, null, null, 12, 49]}, "outputs": 1}], "title": "Minimum Distance Between BST Nodes", "entry_fn_name": "minDiffInBST"}
{"question_id": "782", "schema": {"name": "movesToChessboard", "params": [{"name": "board", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"board": [[0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1]]}, "outputs": 2}, {"idx": 1, "inputs": {"board": [[0, 1], [1, 0]]}, "outputs": 0}, {"idx": 2, "inputs": {"board": [[1, 0], [1, 0]]}, "outputs": -1}], "title": "Transform to Chessboard", "entry_fn_name": "movesToChessboard"}
{"question_id": "781", "schema": {"name": "numRabbits", "params": [{"name": "answers", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"answers": [1, 1, 2]}, "outputs": 5}, {"idx": 1, "inputs": {"answers": [10, 10, 10]}, "outputs": 11}], "title": "Rabbits in Forest", "entry_fn_name": "numRabbits"}
{"question_id": "780", "schema": {"name": "reachingPoints", "params": [{"name": "sx", "type": "integer"}, {"name": "sy", "type": "integer"}, {"name": "tx", "type": "integer"}, {"name": "ty", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"sx": 1, "sy": 1, "tx": 3, "ty": 5}, "outputs": true}, {"idx": 1, "inputs": {"sx": 1, "sy": 1, "tx": 2, "ty": 2}, "outputs": false}, {"idx": 2, "inputs": {"sx": 1, "sy": 1, "tx": 1, "ty": 1}, "outputs": true}], "title": "Reaching Points", "entry_fn_name": "reachingPoints"}
{"question_id": "779", "schema": {"name": "kthGrammar", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "k": 1}, "outputs": 0}, {"idx": 1, "inputs": {"n": 2, "k": 1}, "outputs": 0}, {"idx": 2, "inputs": {"n": 2, "k": 2}, "outputs": 1}], "title": "K-th Symbol in Grammar", "entry_fn_name": "kthGrammar"}
{"question_id": "777", "schema": {"name": "canTransform", "params": [{"name": "start", "type": "string"}, {"name": "end", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"start": "RXXLRXRXL", "end": "XRLXXRRLX"}, "outputs": true}, {"idx": 1, "inputs": {"start": "X", "end": "L"}, "outputs": false}], "title": "Swap Adjacent in LR String", "entry_fn_name": "canTransform"}
{"question_id": "704", "schema": {"name": "search", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-1, 0, 3, 5, 9, 12], "target": 9}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [-1, 0, 3, 5, 9, 12], "target": 2}, "outputs": -1}], "title": "Binary Search", "entry_fn_name": "search"}
{"question_id": "775", "schema": {"name": "isIdealPermutation", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 0, 2]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 2, 0]}, "outputs": false}], "title": "Global and Local Inversions", "entry_fn_name": "isIdealPermutation"}
{"question_id": "773", "schema": {"name": "slidingPuzzle", "params": [{"name": "board", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"board": [[1, 2, 3], [4, 0, 5]]}, "outputs": 1}, {"idx": 1, "inputs": {"board": [[1, 2, 3], [5, 4, 0]]}, "outputs": -1}, {"idx": 2, "inputs": {"board": [[4, 1, 2], [5, 0, 3]]}, "outputs": 5}], "title": "Sliding Puzzle", "entry_fn_name": "slidingPuzzle"}
{"question_id": "701", "schema": {"name": "insertIntoBST", "params": [{"name": "root", "type": "TreeNode"}, {"name": "val", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 2, 7, 1, 3], "val": 5}, "outputs": [4, 2, 7, 1, 3, 5]}, {"idx": 1, "inputs": {"root": [40, 20, 60, 10, 30, 50, 70], "val": 25}, "outputs": [40, 20, 60, 10, 30, 50, 70, null, null, 25]}, {"idx": 2, "inputs": {"root": [4, 2, 7, 1, 3, null, null, null, null, null, null], "val": 5}, "outputs": [4, 2, 7, 1, 3, 5]}], "title": "Insert into a Binary Search Tree", "entry_fn_name": "insertIntoBST"}
{"question_id": "700", "schema": {"name": "searchBST", "params": [{"name": "root", "type": "TreeNode"}, {"name": "val", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 2, 7, 1, 3], "val": 2}, "outputs": [2, 1, 3]}, {"idx": 1, "inputs": {"root": [4, 2, 7, 1, 3], "val": 5}, "outputs": []}], "title": "Search in a Binary Search Tree", "entry_fn_name": "searchBST"}
{"question_id": "771", "schema": {"name": "numJewelsInStones", "params": [{"name": "jewels", "type": "string"}, {"name": "stones", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"jewels": "aA", "stones": "aAAbbbb"}, "outputs": 3}, {"idx": 1, "inputs": {"jewels": "z", "stones": "ZZ"}, "outputs": 0}], "title": "Jewels and Stones", "entry_fn_name": "numJewelsInStones"}
{"question_id": "770", "schema": {"name": "basicCalculatorIV", "params": [{"name": "expression", "type": "string"}, {"name": "evalvars", "type": "string[]"}, {"name": "evalints", "type": "integer[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "e + 8 - a + 5", "evalvars": ["e"], "evalints": [1]}, "outputs": ["-1*a", "14"]}, {"idx": 1, "inputs": {"expression": "e - 8 + temperature - pressure", "evalvars": ["e", "temperature"], "evalints": [1, 12]}, "outputs": ["-1*pressure", "5"]}, {"idx": 2, "inputs": {"expression": "(e + 8) * (e - 8)", "evalvars": [], "evalints": []}, "outputs": ["1*e*e", "-64"]}], "title": "Basic Calculator IV", "entry_fn_name": "basicCalculatorIV"}
{"question_id": "769", "schema": {"name": "maxChunksToSorted", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [4, 3, 2, 1, 0]}, "outputs": 1}, {"idx": 1, "inputs": {"arr": [1, 0, 2, 3, 4]}, "outputs": 4}], "title": "Max Chunks To Make Sorted", "entry_fn_name": "maxChunksToSorted"}
{"question_id": "768", "schema": {"name": "maxChunksToSorted", "params": [{"name": "arr", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [5, 4, 3, 2, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"arr": [2, 1, 3, 4, 4]}, "outputs": 4}], "title": "Max Chunks To Make Sorted II", "entry_fn_name": "maxChunksToSorted"}
{"question_id": "767", "schema": {"name": "reorganizeString", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aab"}, "outputs": "aba"}, {"idx": 1, "inputs": {"s": "aaab"}, "outputs": ""}], "title": "Reorganize String", "entry_fn_name": "reorganizeString"}
{"question_id": "766", "schema": {"name": "isToeplitzMatrix", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2]]}, "outputs": true}, {"idx": 1, "inputs": {"matrix": [[1, 2], [2, 2]]}, "outputs": false}], "title": "Toeplitz Matrix", "entry_fn_name": "isToeplitzMatrix"}
{"question_id": "590", "schema": {"name": "postorder", "params": [{"name": "root", "type": "integer"}], "return": {"type": "list<integer>"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "golang", "ruby", "c", "kotlin", "scala", "php", "swift", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 3, 2, 4, null, 5, 6]}, "outputs": [5, 6, 3, 2, 4, 1]}, {"idx": 1, "inputs": {"root": [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]}, "outputs": [2, 6, 14, 11, 7, 3, 12, 8, 4, 13, 9, 10, 5, 1]}], "title": "N-ary Tree Postorder Traversal", "entry_fn_name": "postorder"}
{"question_id": "589", "schema": {"name": "preorder", "params": [{"name": "root", "type": "integer"}], "return": {"type": "list<integer>"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "golang", "ruby", "c", "kotlin", "scala", "php", "swift", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 3, 2, 4, null, 5, 6]}, "outputs": [1, 3, 5, 6, 2, 4]}, {"idx": 1, "inputs": {"root": [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]}, "outputs": [1, 2, 3, 6, 7, 11, 14, 4, 8, 12, 5, 9, 13, 10]}], "title": "N-ary Tree Preorder Traversal", "entry_fn_name": "preorder"}
{"question_id": "559", "schema": {"name": "maxDepth", "params": [{"name": "root", "type": "integer"}], "return": {"type": "integer"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "golang", "ruby", "c", "kotlin", "scala", "php", "swift", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 3, 2, 4, null, 5, 6]}, "outputs": 3}, {"idx": 1, "inputs": {"root": [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]}, "outputs": 5}], "title": "Maximum Depth of N-ary Tree", "entry_fn_name": "maxDepth"}
{"question_id": "558", "schema": {"name": "intersect", "params": [{"name": "quadTree1", "type": "integer[][]"}, {"name": "quadTree2", "type": "integer[][]"}], "return": {"type": "integer[][]"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "kotlin", "ruby", "scala", "swift", "golang", "php", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"quadTree1": [[0, 1], [1, 1], [1, 1], [1, 0], [1, 0]], "quadTree2": [[0, 1], [1, 1], [0, 1], [1, 1], [1, 0], null, null, null, null, [1, 0], [1, 0], [1, 1], [1, 1]]}, "outputs": [[0, 0], [1, 1], [1, 1], [1, 1], [1, 0]]}, {"idx": 1, "inputs": {"quadTree1": [[1, 0]], "quadTree2": [[1, 0]]}, "outputs": [[1, 0]]}], "title": "Logical OR of Two Binary Grids Represented as Quad-Trees", "entry_fn_name": "intersect"}
{"question_id": "427", "schema": {"name": "construct", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "list<list<integer>>"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "kotlin", "ruby", "scala", "swift", "golang", "php", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1], [1, 0]]}, "outputs": [[0, 1], [1, 0], [1, 1], [1, 1], [1, 0]]}, {"idx": 1, "inputs": {"grid": [[1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0]]}, "outputs": [[0, 1], [1, 1], [0, 1], [1, 1], [1, 0], null, null, null, null, [1, 0], [1, 0], [1, 1], [1, 1]]}], "title": "Construct Quad Tree", "entry_fn_name": "construct"}
{"question_id": "765", "schema": {"name": "minSwapsCouples", "params": [{"name": "row", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"row": [0, 2, 1, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"row": [3, 2, 0, 1]}, "outputs": 0}], "title": "Couples Holding Hands", "entry_fn_name": "minSwapsCouples"}
{"question_id": "764", "schema": {"name": "orderOfLargestPlusSign", "params": [{"name": "n", "type": "integer"}, {"name": "mines", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "mines": [[4, 2]]}, "outputs": 2}, {"idx": 1, "inputs": {"n": 1, "mines": [[0, 0]]}, "outputs": 0}], "title": "Largest Plus Sign", "entry_fn_name": "orderOfLargestPlusSign"}
{"question_id": "763", "schema": {"name": "partitionLabels", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ababcbacadefegdehijhklij"}, "outputs": [9, 7, 8]}, {"idx": 1, "inputs": {"s": "eccbbbbdec"}, "outputs": [10]}], "title": "Partition Labels", "entry_fn_name": "partitionLabels"}
{"question_id": "762", "schema": {"name": "countPrimeSetBits", "params": [{"name": "left", "type": "integer"}, {"name": "right", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"left": 6, "right": 10}, "outputs": 4}, {"idx": 1, "inputs": {"left": 10, "right": 15}, "outputs": 5}], "title": "Prime Number of Set Bits in Binary Representation", "entry_fn_name": "countPrimeSetBits"}
{"question_id": "430", "schema": {"name": "flatten", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "kotlin", "ruby", "scala", "golang", "swift", "php", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5, 6, null, null, null, 7, 8, 9, 10, null, null, 11, 12]}, "outputs": [1, 2, 3, 7, 8, 11, 12, 9, 10, 4, 5, 6]}, {"idx": 1, "inputs": {"head": [1, 2, null, 3]}, "outputs": [1, 3, 2]}, {"idx": 2, "inputs": {"head": []}, "outputs": []}], "title": "Flatten a Multilevel Doubly Linked List", "entry_fn_name": "flatten"}
{"question_id": "429", "schema": {"name": "levelOrder", "params": [{"name": "root", "type": "integer"}], "return": {"type": "list<list<integer>>"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "golang", "ruby", "c", "kotlin", "scala", "php", "swift", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 3, 2, 4, null, 5, 6]}, "outputs": [[1], [3, 2, 4], [5, 6]]}, {"idx": 1, "inputs": {"root": [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]}, "outputs": [[1], [2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [14]]}], "title": "N-ary Tree Level Order Traversal", "entry_fn_name": "levelOrder"}
{"question_id": "761", "schema": {"name": "makeLargestSpecial", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "11011000"}, "outputs": "11100100"}, {"idx": 1, "inputs": {"s": "10"}, "outputs": "10"}], "title": "Special Binary String", "entry_fn_name": "makeLargestSpecial"}
{"question_id": "757", "schema": {"name": "intersectionSizeTwo", "params": [{"name": "intervals", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 3], [1, 4], [2, 5], [3, 5]]}, "outputs": 3}, {"idx": 1, "inputs": {"intervals": [[1, 2], [2, 3], [2, 4], [4, 5]]}, "outputs": 5}], "title": "Set Intersection Size At Least Two", "entry_fn_name": "intersectionSizeTwo"}
{"question_id": "756", "schema": {"name": "pyramidTransition", "params": [{"name": "bottom", "type": "string"}, {"name": "allowed", "type": "list<string>"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"bottom": "BCD", "allowed": ["BCC", "CDE", "CEA", "FFF"]}, "outputs": true}, {"idx": 1, "inputs": {"bottom": "AAAA", "allowed": ["AAB", "AAC", "BCD", "BBE", "DEF"]}, "outputs": false}], "title": "Pyramid Transition Matrix", "entry_fn_name": "pyramidTransition"}
{"question_id": "754", "schema": {"name": "reachNumber", "params": [{"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": 2}, "outputs": 3}, {"idx": 1, "inputs": {"target": 3}, "outputs": 2}], "title": "Reach a Number", "entry_fn_name": "reachNumber"}
{"question_id": "753", "schema": {"name": "crackSafe", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "k": 2}, "outputs": "10"}, {"idx": 1, "inputs": {"n": 2, "k": 2}, "outputs": "01100"}], "title": "Cracking the Safe", "entry_fn_name": "crackSafe"}
{"question_id": "752", "schema": {"name": "openLock", "params": [{"name": "deadends", "type": "string[]"}, {"name": "target", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"deadends": ["0201", "0101", "0102", "1212", "2002"], "target": "0202"}, "outputs": 6}, {"idx": 1, "inputs": {"deadends": ["8888"], "target": "0009"}, "outputs": 1}, {"idx": 2, "inputs": {"deadends": ["8887", "8889", "8878", "8898", "8788", "8988", "7888", "9888"], "target": "8888"}, "outputs": -1}], "title": "Open the Lock", "entry_fn_name": "openLock"}
{"question_id": "749", "schema": {"name": "containVirus", "params": [{"name": "isInfected", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"isInfected": [[0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0]]}, "outputs": 10}, {"idx": 1, "inputs": {"isInfected": [[1, 1, 1], [1, 0, 1], [1, 1, 1]]}, "outputs": 4}, {"idx": 2, "inputs": {"isInfected": [[1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0]]}, "outputs": 13}], "title": "Contain Virus", "entry_fn_name": "containVirus"}
{"question_id": "748", "schema": {"name": "shortestCompletingWord", "params": [{"name": "licensePlate", "type": "string"}, {"name": "words", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"licensePlate": "1s3 PSt", "words": ["step", "steps", "stripe", "stepple"]}, "outputs": "steps"}, {"idx": 1, "inputs": {"licensePlate": "1s3 456", "words": ["looks", "pest", "stew", "show"]}, "outputs": "pest"}], "title": "Shortest Completing Word", "entry_fn_name": "shortestCompletingWord"}
{"question_id": "747", "schema": {"name": "dominantIndex", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 6, 1, 0]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": -1}], "title": "Largest Number At Least Twice of Others", "entry_fn_name": "dominantIndex"}
{"question_id": "744", "schema": {"name": "nextGreatestLetter", "params": [{"name": "letters", "type": "character[]"}, {"name": "target", "type": "character"}], "return": {"type": "character"}}, "test_cases": [{"idx": 0, "inputs": {"letters": ["c", "f", "j"], "target": "a"}, "outputs": "c"}, {"idx": 1, "inputs": {"letters": ["c", "f", "j"], "target": "c"}, "outputs": "f"}, {"idx": 2, "inputs": {"letters": ["c", "f", "j"], "target": "d"}, "outputs": "f"}], "title": "Find Smallest Letter Greater Than Target", "entry_fn_name": "nextGreatestLetter"}
{"question_id": "743", "schema": {"name": "networkDelayTime", "params": [{"name": "times", "type": "integer[][]"}, {"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"times": [[2, 1, 1], [2, 3, 1], [3, 4, 1]], "n": 4, "k": 2}, "outputs": 2}, {"idx": 1, "inputs": {"times": [[1, 2, 1]], "n": 2, "k": 1}, "outputs": 1}, {"idx": 2, "inputs": {"times": [[1, 2, 1]], "n": 2, "k": 2}, "outputs": -1}], "title": "Network Delay Time", "entry_fn_name": "networkDelayTime"}
{"question_id": "709", "schema": {"name": "toLowerCase", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "Hello"}, "outputs": "hello"}, {"idx": 1, "inputs": {"s": "here"}, "outputs": "here"}, {"idx": 2, "inputs": {"s": "LOVELY"}, "outputs": "lovely"}], "title": "To Lower Case", "entry_fn_name": "toLowerCase"}
{"question_id": "741", "schema": {"name": "cherryPickup", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1, -1], [1, 0, -1], [1, 1, 1]]}, "outputs": 5}, {"idx": 1, "inputs": {"grid": [[1, 1, -1], [1, -1, 1], [-1, 1, 1]]}, "outputs": 0}], "title": "Cherry Pickup", "entry_fn_name": "cherryPickup"}
{"question_id": "740", "schema": {"name": "deleteAndEarn", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 4, 2]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [2, 2, 3, 3, 3, 4]}, "outputs": 9}], "title": "Delete and Earn", "entry_fn_name": "deleteAndEarn"}
{"question_id": "739", "schema": {"name": "dailyTemperatures", "params": [{"name": "temperatures", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"temperatures": [73, 74, 75, 71, 69, 72, 76, 73]}, "outputs": [1, 1, 4, 2, 1, 1, 0, 0]}, {"idx": 1, "inputs": {"temperatures": [30, 40, 50, 60]}, "outputs": [1, 1, 1, 0]}, {"idx": 2, "inputs": {"temperatures": [30, 60, 90]}, "outputs": [1, 1, 0]}], "title": "Daily Temperatures", "entry_fn_name": "dailyTemperatures"}
{"question_id": "738", "schema": {"name": "monotoneIncreasingDigits", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10}, "outputs": 9}, {"idx": 1, "inputs": {"n": 1234}, "outputs": 1234}, {"idx": 2, "inputs": {"n": 332}, "outputs": 299}], "title": "Monotone Increasing Digits", "entry_fn_name": "monotoneIncreasingDigits"}
{"question_id": "736", "schema": {"name": "evaluate", "params": [{"name": "expression", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "(let x 2 (mult x (let x 3 y 4 (add x y))))"}, "outputs": 14}, {"idx": 1, "inputs": {"expression": "(let x 3 x 2 x)"}, "outputs": 2}, {"idx": 2, "inputs": {"expression": "(let x 1 y 2 x (add x y) (add x y))"}, "outputs": 5}], "title": "Parse Lisp Expression", "entry_fn_name": "evaluate"}
{"question_id": "735", "schema": {"name": "asteroidCollision", "params": [{"name": "asteroids", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"asteroids": [5, 10, -5]}, "outputs": [5, 10]}, {"idx": 1, "inputs": {"asteroids": [8, -8]}, "outputs": []}, {"idx": 2, "inputs": {"asteroids": [10, 2, -5]}, "outputs": [10]}], "title": "Asteroid Collision", "entry_fn_name": "asteroidCollision"}
{"question_id": "733", "schema": {"name": "floodFill", "params": [{"name": "image", "type": "integer[][]"}, {"name": "sr", "type": "integer"}, {"name": "sc", "type": "integer"}, {"name": "color", "type": "integer"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"image": [[1, 1, 1], [1, 1, 0], [1, 0, 1]], "sr": 1, "sc": 1, "color": 2}, "outputs": [[2, 2, 2], [2, 2, 0], [2, 0, 1]]}, {"idx": 1, "inputs": {"image": [[0, 0, 0], [0, 0, 0]], "sr": 0, "sc": 0, "color": 0}, "outputs": [[0, 0, 0], [0, 0, 0]]}], "title": "Flood Fill", "entry_fn_name": "floodFill"}
{"question_id": "730", "schema": {"name": "countPalindromicSubsequences", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "bccb"}, "outputs": 6}, {"idx": 1, "inputs": {"s": "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"}, "outputs": 104860361}], "title": "Count Different Palindromic Subsequences", "entry_fn_name": "countPalindromicSubsequences"}
{"question_id": "728", "schema": {"name": "selfDividingNumbers", "params": [{"name": "left", "type": "integer"}, {"name": "right", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"left": 1, "right": 22}, "outputs": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]}, {"idx": 1, "inputs": {"left": 47, "right": 85}, "outputs": [48, 55, 66, 77]}], "title": "Self Dividing Numbers", "entry_fn_name": "selfDividingNumbers"}
{"question_id": "726", "schema": {"name": "countOfAtoms", "params": [{"name": "formula", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"formula": "H2O"}, "outputs": "H2O"}, {"idx": 1, "inputs": {"formula": "Mg(OH)2"}, "outputs": "H2MgO2"}, {"idx": 2, "inputs": {"formula": "K4(ON(SO3)2)2"}, "outputs": "K4N2O14S4"}], "title": "Number of Atoms", "entry_fn_name": "countOfAtoms"}
{"question_id": "725", "schema": {"name": "splitListToParts", "params": [{"name": "head", "type": "ListNode"}, {"name": "k", "type": "integer"}], "return": {"type": "ListNode[]"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3], "k": 5}, "outputs": [[1], [2], [3], [], []]}, {"idx": 1, "inputs": {"head": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "k": 3}, "outputs": [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]}], "title": "Split Linked List in Parts", "entry_fn_name": "splitListToParts"}
{"question_id": "724", "schema": {"name": "pivotIndex", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 7, 3, 6, 5, 6]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 2, 3]}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [2, 1, -1]}, "outputs": 0}], "title": "Find Pivot Index", "entry_fn_name": "pivotIndex"}
{"question_id": "721", "schema": {"name": "accountsMerge", "params": [{"name": "accounts", "type": "list<list<string>>"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"accounts": [["John", "johnsmith@mail.com", "john_newyork@mail.com"], ["John", "johnsmith@mail.com", "john00@mail.com"], ["Mary", "mary@mail.com"], ["John", "johnnybravo@mail.com"]]}, "outputs": [["John", "john00@mail.com", "john_newyork@mail.com", "johnsmith@mail.com"], ["Mary", "mary@mail.com"], ["John", "johnnybravo@mail.com"]]}, {"idx": 1, "inputs": {"accounts": [["Gabe", "Gabe0@m.co", "Gabe3@m.co", "Gabe1@m.co"], ["Kevin", "Kevin3@m.co", "Kevin5@m.co", "Kevin0@m.co"], ["Ethan", "Ethan5@m.co", "Ethan4@m.co", "Ethan0@m.co"], ["Hanzo", "Hanzo3@m.co", "Hanzo1@m.co", "Hanzo0@m.co"], ["Fern", "Fern5@m.co", "Fern1@m.co", "Fern0@m.co"]]}, "outputs": [["Ethan", "Ethan0@m.co", "Ethan4@m.co", "Ethan5@m.co"], ["Gabe", "Gabe0@m.co", "Gabe1@m.co", "Gabe3@m.co"], ["Hanzo", "Hanzo0@m.co", "Hanzo1@m.co", "Hanzo3@m.co"], ["Kevin", "Kevin0@m.co", "Kevin3@m.co", "Kevin5@m.co"], ["Fern", "Fern0@m.co", "Fern1@m.co", "Fern5@m.co"]]}], "title": "Accounts Merge", "entry_fn_name": "accountsMerge"}
{"question_id": "720", "schema": {"name": "longestWord", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["w", "wo", "wor", "worl", "world"]}, "outputs": "world"}, {"idx": 1, "inputs": {"words": ["a", "banana", "app", "appl", "ap", "apply", "apple"]}, "outputs": "apple"}], "title": "Longest Word in Dictionary", "entry_fn_name": "longestWord"}
{"question_id": "719", "schema": {"name": "smallestDistancePair", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 1], "k": 1}, "outputs": 0}, {"idx": 1, "inputs": {"nums": [1, 1, 1], "k": 2}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1, 6, 1], "k": 3}, "outputs": 5}], "title": "Find K-th Smallest Pair Distance", "entry_fn_name": "smallestDistancePair"}
{"question_id": "718", "schema": {"name": "findLength", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 3, 2, 1], "nums2": [3, 2, 1, 4, 7]}, "outputs": 3}, {"idx": 1, "inputs": {"nums1": [0, 0, 0, 0, 0], "nums2": [0, 0, 0, 0, 0]}, "outputs": 5}], "title": "Maximum Length of Repeated Subarray", "entry_fn_name": "findLength"}
{"question_id": "717", "schema": {"name": "isOneBitCharacter", "params": [{"name": "bits", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"bits": [1, 0, 0]}, "outputs": true}, {"idx": 1, "inputs": {"bits": [1, 1, 1, 0]}, "outputs": false}], "title": "1-bit and 2-bit Characters", "entry_fn_name": "isOneBitCharacter"}
{"question_id": "714", "schema": {"name": "maxProfit", "params": [{"name": "prices", "type": "integer[]"}, {"name": "fee", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [1, 3, 2, 8, 4, 9], "fee": 2}, "outputs": 8}, {"idx": 1, "inputs": {"prices": [1, 3, 7, 5, 10, 3], "fee": 3}, "outputs": 6}], "title": "Best Time to Buy and Sell Stock with Transaction Fee", "entry_fn_name": "maxProfit"}
{"question_id": "713", "schema": {"name": "numSubarrayProductLessThanK", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 5, 2, 6], "k": 100}, "outputs": 8}, {"idx": 1, "inputs": {"nums": [1, 2, 3], "k": 0}, "outputs": 0}], "title": "Subarray Product Less Than K", "entry_fn_name": "numSubarrayProductLessThanK"}
{"question_id": "712", "schema": {"name": "minimumDeleteSum", "params": [{"name": "s1", "type": "string"}, {"name": "s2", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "sea", "s2": "eat"}, "outputs": 231}, {"idx": 1, "inputs": {"s1": "delete", "s2": "leet"}, "outputs": 403}], "title": "Minimum ASCII Delete Sum for Two Strings", "entry_fn_name": "minimumDeleteSum"}
{"question_id": "699", "schema": {"name": "fallingSquares", "params": [{"name": "positions", "type": "integer[][]", "dealloc": false}], "return": {"type": "list<integer>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"positions": [[1, 2], [2, 3], [6, 1]]}, "outputs": [2, 5, 5]}, {"idx": 1, "inputs": {"positions": [[100, 100], [200, 100]]}, "outputs": [100, 100]}], "title": "Falling Squares", "entry_fn_name": "fallingSquares"}
{"question_id": "698", "schema": {"name": "canPartitionKSubsets", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 3, 2, 3, 5, 2, 1], "k": 4}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4], "k": 3}, "outputs": false}], "title": "Partition to K Equal Sum Subsets", "entry_fn_name": "canPartitionKSubsets"}
{"question_id": "697", "schema": {"name": "findShortestSubArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 2, 3, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 2, 2, 3, 1, 4, 2]}, "outputs": 6}], "title": "Degree of an Array", "entry_fn_name": "findShortestSubArray"}
{"question_id": "696", "schema": {"name": "countBinarySubstrings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "00110011"}, "outputs": 6}, {"idx": 1, "inputs": {"s": "10101"}, "outputs": 4}], "title": "Count Binary Substrings", "entry_fn_name": "countBinarySubstrings"}
{"question_id": "695", "schema": {"name": "maxAreaOfIsland", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]}, "outputs": 6}, {"idx": 1, "inputs": {"grid": [[0, 0, 0, 0, 0, 0, 0, 0]]}, "outputs": 0}], "title": "Max Area of Island", "entry_fn_name": "maxAreaOfIsland"}
{"question_id": "693", "schema": {"name": "hasAlternatingBits", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": true}, {"idx": 1, "inputs": {"n": 7}, "outputs": false}, {"idx": 2, "inputs": {"n": 11}, "outputs": false}], "title": "Binary Number with Alternating Bits", "entry_fn_name": "hasAlternatingBits"}
{"question_id": "692", "schema": {"name": "topKFrequent", "params": [{"name": "words", "type": "string[]"}, {"name": "k", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["i", "love", "leetcode", "i", "love", "coding"], "k": 2}, "outputs": ["i", "love"]}, {"idx": 1, "inputs": {"words": ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], "k": 4}, "outputs": ["the", "is", "sunny", "day"]}], "title": "Top K Frequent Words", "entry_fn_name": "topKFrequent"}
{"question_id": "690", "schema": {"name": "getImportance", "params": [{"name": "employees", "type": "list<string>"}, {"name": "id", "type": "integer"}], "return": {"type": "integer"}, "languages": ["cpp", "java", "python", "ruby", "python3", "kotlin", "scala", "csharp", "javascript", "swift", "golang", "php", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"employees": [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], "id": 1}, "outputs": 11}, {"idx": 1, "inputs": {"employees": [[1, 2, [5]], [5, -3, []]], "id": 5}, "outputs": -3}], "title": "Employee Importance", "entry_fn_name": "getImportance"}
{"question_id": "689", "schema": {"name": "maxSumOfThreeSubarrays", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 1, 2, 6, 7, 5, 1], "k": 2}, "outputs": [0, 3, 5]}, {"idx": 1, "inputs": {"nums": [1, 2, 1, 2, 1, 2, 1, 2, 1], "k": 2}, "outputs": [0, 2, 4]}], "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "entry_fn_name": "maxSumOfThreeSubarrays"}
{"question_id": "688", "schema": {"name": "knightProbability", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}, {"name": "row", "type": "integer"}, {"name": "column", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 2, "row": 0, "column": 0}, "outputs": 0.0625}, {"idx": 1, "inputs": {"n": 1, "k": 0, "row": 0, "column": 0}, "outputs": 1.0}], "title": "Knight Probability in Chessboard", "entry_fn_name": "knightProbability"}
{"question_id": "687", "schema": {"name": "longestUnivaluePath", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 4, 5, 1, 1, null, 5]}, "outputs": 2}, {"idx": 1, "inputs": {"root": [1, 4, 5, 4, 4, null, 5]}, "outputs": 2}], "title": "Longest Univalue Path", "entry_fn_name": "longestUnivaluePath"}
{"question_id": "686", "schema": {"name": "repeatedStringMatch", "params": [{"name": "a", "type": "string"}, {"name": "b", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": "abcd", "b": "cdabcdab"}, "outputs": 3}, {"idx": 1, "inputs": {"a": "a", "b": "aa"}, "outputs": 2}], "title": "Repeated String Match", "entry_fn_name": "repeatedStringMatch"}
{"question_id": "685", "schema": {"name": "findRedundantDirectedConnection", "params": [{"name": "edges", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"edges": [[1, 2], [1, 3], [2, 3]]}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"edges": [[1, 2], [2, 3], [3, 4], [4, 1], [1, 5]]}, "outputs": [4, 1]}], "title": "Redundant Connection II", "entry_fn_name": "findRedundantDirectedConnection"}
{"question_id": "684", "schema": {"name": "findRedundantConnection", "params": [{"name": "edges", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"edges": [[1, 2], [1, 3], [2, 3]]}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"edges": [[1, 2], [2, 3], [3, 4], [1, 4], [1, 5]]}, "outputs": [1, 4]}], "title": "Redundant Connection", "entry_fn_name": "findRedundantConnection"}
{"question_id": "682", "schema": {"name": "calPoints", "params": [{"name": "ops", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"ops": ["5", "2", "C", "D", "+"]}, "outputs": 30}, {"idx": 1, "inputs": {"ops": ["5", "-2", "4", "C", "D", "9", "+", "+"]}, "outputs": 27}, {"idx": 2, "inputs": {"ops": ["1", "C"]}, "outputs": 0}], "title": "Baseball Game", "entry_fn_name": "calPoints"}
{"question_id": "680", "schema": {"name": "validPalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aba"}, "outputs": true}, {"idx": 1, "inputs": {"s": "abca"}, "outputs": true}, {"idx": 2, "inputs": {"s": "abc"}, "outputs": false}], "title": "Valid Palindrome II", "entry_fn_name": "validPalindrome"}
{"question_id": "679", "schema": {"name": "judgePoint24", "params": [{"name": "cards", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"cards": [4, 1, 8, 7]}, "outputs": true}, {"idx": 1, "inputs": {"cards": [1, 2, 1, 2]}, "outputs": false}], "title": "24 Game", "entry_fn_name": "judgePoint24"}
{"question_id": "678", "schema": {"name": "checkValidString", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "()"}, "outputs": true}, {"idx": 1, "inputs": {"s": "(*)"}, "outputs": true}, {"idx": 2, "inputs": {"s": "(*))"}, "outputs": true}], "title": "Valid Parenthesis String", "entry_fn_name": "checkValidString"}
{"question_id": "674", "schema": {"name": "findLengthOfLCIS", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 5, 4, 7]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [2, 2, 2, 2, 2]}, "outputs": 1}], "title": "Longest Continuous Increasing Subsequence", "entry_fn_name": "findLengthOfLCIS"}
{"question_id": "673", "schema": {"name": "findNumberOfLIS", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 5, 4, 7]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 2, 2, 2, 2]}, "outputs": 5}], "title": "Number of Longest Increasing Subsequence", "entry_fn_name": "findNumberOfLIS"}
{"question_id": "672", "schema": {"name": "flipLights", "params": [{"name": "n", "type": "integer"}, {"name": "presses", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1, "presses": 1}, "outputs": 2}, {"idx": 1, "inputs": {"n": 2, "presses": 1}, "outputs": 3}, {"idx": 2, "inputs": {"n": 3, "presses": 1}, "outputs": 4}], "title": "Bulb Switcher II", "entry_fn_name": "flipLights"}
{"question_id": "671", "schema": {"name": "findSecondMinimumValue", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [2, 2, 5, null, null, 5, 7]}, "outputs": 5}, {"idx": 1, "inputs": {"root": [2, 2, 2]}, "outputs": -1}], "title": "Second Minimum Node In a Binary Tree", "entry_fn_name": "findSecondMinimumValue"}
{"question_id": "670", "schema": {"name": "maximumSwap", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 2736}, "outputs": 7236}, {"idx": 1, "inputs": {"num": 9973}, "outputs": 9973}], "title": "Maximum Swap", "entry_fn_name": "maximumSwap"}
{"question_id": "669", "schema": {"name": "trimBST", "params": [{"name": "root", "type": "TreeNode"}, {"name": "low", "type": "integer"}, {"name": "high", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 0, 2], "low": 1, "high": 2}, "outputs": [1, null, 2]}, {"idx": 1, "inputs": {"root": [3, 0, 4, null, 2, null, null, 1], "low": 1, "high": 3}, "outputs": [3, 2, null, 1]}], "title": "Trim a Binary Search Tree", "entry_fn_name": "trimBST"}
{"question_id": "668", "schema": {"name": "findKthNumber", "params": [{"name": "m", "type": "integer"}, {"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 3, "n": 3, "k": 5}, "outputs": 3}, {"idx": 1, "inputs": {"m": 2, "n": 3, "k": 6}, "outputs": 6}], "title": "Kth Smallest Number in Multiplication Table", "entry_fn_name": "findKthNumber"}
{"question_id": "665", "schema": {"name": "checkPossibility", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 2, 3]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [4, 2, 1]}, "outputs": false}], "title": "Non-decreasing Array", "entry_fn_name": "checkPossibility"}
{"question_id": "664", "schema": {"name": "strangePrinter", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aaabbb"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "aba"}, "outputs": 2}], "title": "Strange Printer", "entry_fn_name": "strangePrinter"}
{"question_id": "662", "schema": {"name": "widthOfBinaryTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 3, 2, 5, 3, null, 9]}, "outputs": 4}, {"idx": 1, "inputs": {"root": [1, 3, 2, 5, null, null, 9, 6, null, 7]}, "outputs": 7}, {"idx": 2, "inputs": {"root": [1, 3, 2, 5]}, "outputs": 2}], "title": "Maximum Width of Binary Tree", "entry_fn_name": "widthOfBinaryTree"}
{"question_id": "661", "schema": {"name": "imageSmoother", "params": [{"name": "img", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"img": [[1, 1, 1], [1, 0, 1], [1, 1, 1]]}, "outputs": [[0, 0, 0], [0, 0, 0], [0, 0, 0]]}, {"idx": 1, "inputs": {"img": [[100, 200, 100], [200, 50, 200], [100, 200, 100]]}, "outputs": [[137, 141, 137], [141, 138, 141], [137, 141, 137]]}], "title": "Image Smoother", "entry_fn_name": "imageSmoother"}
{"question_id": "659", "schema": {"name": "isPossible", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 3, 4, 5]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 3, 4, 4, 5, 5]}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 4, 5]}, "outputs": false}], "title": "Split Array into Consecutive Subsequences", "entry_fn_name": "isPossible"}
{"question_id": "658", "schema": {"name": "findClosestElements", "params": [{"name": "arr", "type": "integer[]"}, {"name": "k", "type": "integer"}, {"name": "x", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"arr": [1, 2, 3, 4, 5], "k": 4, "x": 3}, "outputs": [1, 2, 3, 4]}, {"idx": 1, "inputs": {"arr": [1, 2, 3, 4, 5], "k": 4, "x": -1}, "outputs": [1, 2, 3, 4]}], "title": "Find K Closest Elements", "entry_fn_name": "findClosestElements"}
{"question_id": "657", "schema": {"name": "judgeCircle", "params": [{"name": "moves", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"moves": "UD"}, "outputs": true}, {"idx": 1, "inputs": {"moves": "LL"}, "outputs": false}], "title": "Robot Return to Origin", "entry_fn_name": "judgeCircle"}
{"question_id": "655", "schema": {"name": "printTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2]}, "outputs": [["", "1", ""], ["2", "", ""]]}, {"idx": 1, "inputs": {"root": [1, 2, 3, null, 4]}, "outputs": [["", "", "", "1", "", "", ""], ["", "2", "", "", "", "3", ""], ["", "", "4", "", "", "", ""]]}], "title": "Print Binary Tree", "entry_fn_name": "printTree"}
{"question_id": "654", "schema": {"name": "constructMaximumBinaryTree", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "TreeNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 1, 6, 0, 5]}, "outputs": [6, 3, 5, null, 2, 0, null, null, 1]}, {"idx": 1, "inputs": {"nums": [3, 2, 1]}, "outputs": [3, null, 2, null, 1]}], "title": "Maximum Binary Tree", "entry_fn_name": "constructMaximumBinaryTree"}
{"question_id": "653", "schema": {"name": "findTarget", "params": [{"name": "root", "type": "TreeNode"}, {"name": "k", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 3, 6, 2, 4, null, 7], "k": 9}, "outputs": true}, {"idx": 1, "inputs": {"root": [5, 3, 6, 2, 4, null, 7], "k": 28}, "outputs": false}], "title": "Two Sum IV - Input is a BST", "entry_fn_name": "findTarget"}
{"question_id": "652", "schema": {"name": "findDuplicateSubtrees", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<TreeNode>"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, null, 2, 4, null, null, 4]}, "outputs": [[2, 4], [4]]}, {"idx": 1, "inputs": {"root": [2, 1, 1]}, "outputs": [[1]]}, {"idx": 2, "inputs": {"root": [2, 2, 2, 3, null, 3, null]}, "outputs": [[2, 3], [3]]}], "title": "Find Duplicate Subtrees", "entry_fn_name": "findDuplicateSubtrees"}
{"question_id": "650", "schema": {"name": "minSteps", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 3}, {"idx": 1, "inputs": {"n": 1}, "outputs": 0}], "title": "2 Keys Keyboard", "entry_fn_name": "minSteps"}
{"question_id": "649", "schema": {"name": "predictPartyVictory", "params": [{"name": "senate", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"senate": "RD"}, "outputs": "Radiant"}, {"idx": 1, "inputs": {"senate": "RDD"}, "outputs": "Dire"}], "title": "Dota2 Senate", "entry_fn_name": "predictPartyVictory"}
{"question_id": "648", "schema": {"name": "replaceWords", "params": [{"name": "dictionary", "type": "list<string>"}, {"name": "sentence", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"dictionary": ["cat", "bat", "rat"], "sentence": "the cattle was rattled by the battery"}, "outputs": "the cat was rat by the bat"}, {"idx": 1, "inputs": {"dictionary": ["a", "b", "c"], "sentence": "aadsfasf absbs bbab cadsfafs"}, "outputs": "a a b c"}], "title": "Replace Words", "entry_fn_name": "replaceWords"}
{"question_id": "647", "schema": {"name": "countSubstrings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abc"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "aaa"}, "outputs": 6}], "title": "Palindromic Substrings", "entry_fn_name": "countSubstrings"}
{"question_id": "646", "schema": {"name": "findLongestChain", "params": [{"name": "pairs", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"pairs": [[1, 2], [2, 3], [3, 4]]}, "outputs": 2}, {"idx": 1, "inputs": {"pairs": [[1, 2], [7, 8], [4, 5]]}, "outputs": 3}], "title": "Maximum Length of Pair Chain", "entry_fn_name": "findLongestChain"}
{"question_id": "645", "schema": {"name": "findErrorNums", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 2, 4]}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"nums": [1, 1]}, "outputs": [1, 2]}], "title": "Set Mismatch", "entry_fn_name": "findErrorNums"}
{"question_id": "643", "schema": {"name": "findMaxAverage", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 12, -5, -6, 50, 3], "k": 4}, "outputs": 12.75}, {"idx": 1, "inputs": {"nums": [5], "k": 1}, "outputs": 5.0}], "title": "Maximum Average Subarray I", "entry_fn_name": "findMaxAverage"}
{"question_id": "639", "schema": {"name": "numDecodings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "*"}, "outputs": 9}, {"idx": 1, "inputs": {"s": "1*"}, "outputs": 18}, {"idx": 2, "inputs": {"s": "2*"}, "outputs": 15}], "title": "Decode Ways II", "entry_fn_name": "numDecodings"}
{"question_id": "638", "schema": {"name": "shoppingOffers", "params": [{"name": "price", "type": "list<integer>"}, {"name": "special", "type": "list<list<integer>>"}, {"name": "needs", "type": "list<integer>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"price": [2, 5], "special": [[3, 0, 5], [1, 2, 10]], "needs": [3, 2]}, "outputs": 14}, {"idx": 1, "inputs": {"price": [2, 3, 4], "special": [[1, 1, 0, 4], [2, 2, 1, 9]], "needs": [1, 2, 1]}, "outputs": 11}], "title": "Shopping Offers", "entry_fn_name": "shoppingOffers"}
{"question_id": "636", "schema": {"name": "exclusiveTime", "params": [{"name": "n", "type": "integer"}, {"name": "logs", "type": "list<string>"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2, "logs": ["0:start:0", "1:start:2", "1:end:5", "0:end:6"]}, "outputs": [3, 4]}, {"idx": 1, "inputs": {"n": 1, "logs": ["0:start:0", "0:start:2", "0:end:5", "0:start:6", "0:end:6", "0:end:7"]}, "outputs": [8]}, {"idx": 2, "inputs": {"n": 2, "logs": ["0:start:0", "0:start:2", "0:end:5", "1:start:6", "1:end:6", "0:end:7"]}, "outputs": [7, 1]}], "title": "Exclusive Time of Functions", "entry_fn_name": "exclusiveTime"}
{"question_id": "633", "schema": {"name": "judgeSquareSum", "params": [{"name": "c", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"c": 5}, "outputs": true}, {"idx": 1, "inputs": {"c": 3}, "outputs": false}], "title": "Sum of Square Numbers", "entry_fn_name": "judgeSquareSum"}
{"question_id": "632", "schema": {"name": "smallestRange", "params": [{"name": "nums", "type": "list<list<integer>>"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]}, "outputs": [20, 24]}, {"idx": 1, "inputs": {"nums": [[1, 2, 3], [1, 2, 3], [1, 2, 3]]}, "outputs": [1, 1]}], "title": "Smallest Range Covering Elements from K Lists", "entry_fn_name": "smallestRange"}
{"question_id": "629", "schema": {"name": "kInversePairs", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 0}, "outputs": 1}, {"idx": 1, "inputs": {"n": 3, "k": 1}, "outputs": 2}], "title": "K Inverse Pairs Array", "entry_fn_name": "kInversePairs"}
{"question_id": "628", "schema": {"name": "maximumProduct", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": 24}, {"idx": 2, "inputs": {"nums": [-1, -2, -3]}, "outputs": -6}], "title": "Maximum Product of Three Numbers", "entry_fn_name": "maximumProduct"}
{"question_id": "623", "schema": {"name": "addOneRow", "params": [{"name": "root", "type": "TreeNode"}, {"name": "val", "type": "integer"}, {"name": "depth", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 2, 6, 3, 1, 5], "val": 1, "depth": 2}, "outputs": [4, 1, 1, 2, null, null, 6, 3, 1, 5]}, {"idx": 1, "inputs": {"root": [4, 2, null, 3, 1], "val": 1, "depth": 3}, "outputs": [4, 2, null, 1, 1, 3, null, null, 1]}], "title": "Add One Row to Tree", "entry_fn_name": "addOneRow"}
{"question_id": "621", "schema": {"name": "leastInterval", "params": [{"name": "tasks", "type": "character[]"}, {"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tasks": ["A", "A", "A", "B", "B", "B"], "n": 2}, "outputs": 8}, {"idx": 1, "inputs": {"tasks": ["A", "A", "A", "B", "B", "B"], "n": 0}, "outputs": 6}, {"idx": 2, "inputs": {"tasks": ["A", "A", "A", "A", "A", "A", "B", "C", "D", "E", "F", "G"], "n": 2}, "outputs": 16}], "title": "Task Scheduler", "entry_fn_name": "leastInterval"}
{"question_id": "617", "schema": {"name": "mergeTrees", "params": [{"name": "root1", "type": "TreeNode", "dealloc": false}, {"name": "root2", "type": "TreeNode", "dealloc": false}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root1": [1, 3, 2, 5], "root2": [2, 1, 3, null, 4, null, 7]}, "outputs": [3, 4, 5, 5, 4, null, 7]}, {"idx": 1, "inputs": {"root1": [1], "root2": [1, 2]}, "outputs": [2, 2]}], "title": "Merge Two Binary Trees", "entry_fn_name": "mergeTrees"}
{"question_id": "611", "schema": {"name": "triangleNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 2, 3, 4]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [4, 2, 3, 4]}, "outputs": 4}], "title": "Valid Triangle Number", "entry_fn_name": "triangleNumber"}
{"question_id": "609", "schema": {"name": "findDuplicate", "params": [{"name": "paths", "type": "string[]"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"paths": ["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)", "root 4.txt(efgh)"]}, "outputs": [["root/a/2.txt", "root/c/d/4.txt", "root/4.txt"], ["root/a/1.txt", "root/c/3.txt"]]}, {"idx": 1, "inputs": {"paths": ["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)"]}, "outputs": [["root/a/2.txt", "root/c/d/4.txt"], ["root/a/1.txt", "root/c/3.txt"]]}], "title": "Find Duplicate File in System", "entry_fn_name": "findDuplicate"}
{"question_id": "606", "schema": {"name": "tree2str", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4]}, "outputs": "1(2(4))(3)"}, {"idx": 1, "inputs": {"root": [1, 2, 3, null, 4]}, "outputs": "1(2()(4))(3)"}], "title": "Construct String from Binary Tree", "entry_fn_name": "tree2str"}
{"question_id": "605", "schema": {"name": "canPlaceFlowers", "params": [{"name": "flowerbed", "type": "integer[]"}, {"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"flowerbed": [1, 0, 0, 0, 1], "n": 1}, "outputs": true}, {"idx": 1, "inputs": {"flowerbed": [1, 0, 0, 0, 1], "n": 2}, "outputs": false}], "title": "Can Place Flowers", "entry_fn_name": "canPlaceFlowers"}
{"question_id": "600", "schema": {"name": "findIntegers", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": 5}, {"idx": 1, "inputs": {"n": 1}, "outputs": 2}, {"idx": 2, "inputs": {"n": 2}, "outputs": 3}], "title": "Non-negative Integers without Consecutive Ones", "entry_fn_name": "findIntegers"}
{"question_id": "599", "schema": {"name": "findRestaurant", "params": [{"name": "list1", "type": "string[]"}, {"name": "list2", "type": "string[]"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"list1": ["Shogun", "Tapioca Express", "Burger King", "KFC"], "list2": ["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]}, "outputs": ["Shogun"]}, {"idx": 1, "inputs": {"list1": ["Shogun", "Tapioca Express", "Burger King", "KFC"], "list2": ["KFC", "Shogun", "Burger King"]}, "outputs": ["Shogun"]}], "title": "Minimum Index Sum of Two Lists", "entry_fn_name": "findRestaurant"}
{"question_id": "598", "schema": {"name": "maxCount", "params": [{"name": "m", "type": "integer"}, {"name": "n", "type": "integer"}, {"name": "ops", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 3, "n": 3, "ops": [[2, 2], [3, 3]]}, "outputs": 4}, {"idx": 1, "inputs": {"m": 3, "n": 3, "ops": [[2, 2], [3, 3], [3, 3], [3, 3], [2, 2], [3, 3], [3, 3], [3, 3], [2, 2], [3, 3], [3, 3], [3, 3]]}, "outputs": 4}, {"idx": 2, "inputs": {"m": 3, "n": 3, "ops": []}, "outputs": 9}], "title": "Range Addition II", "entry_fn_name": "maxCount"}
{"question_id": "594", "schema": {"name": "findLHS", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 2, 2, 5, 2, 3, 7]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [1, 1, 1, 1]}, "outputs": 0}], "title": "Longest Harmonious Subsequence", "entry_fn_name": "findLHS"}
{"question_id": "593", "schema": {"name": "validSquare", "params": [{"name": "p1", "type": "integer[]"}, {"name": "p2", "type": "integer[]"}, {"name": "p3", "type": "integer[]"}, {"name": "p4", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"p1": [0, 0], "p2": [1, 1], "p3": [1, 0], "p4": [0, 1]}, "outputs": true}, {"idx": 1, "inputs": {"p1": [0, 0], "p2": [1, 1], "p3": [1, 0], "p4": [0, 12]}, "outputs": false}, {"idx": 2, "inputs": {"p1": [1, 0], "p2": [-1, 0], "p3": [0, 1], "p4": [0, -1]}, "outputs": true}], "title": "Valid Square", "entry_fn_name": "validSquare"}
{"question_id": "592", "schema": {"name": "fractionAddition", "params": [{"name": "expression", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "-1/2+1/2"}, "outputs": "0/1"}, {"idx": 1, "inputs": {"expression": "-1/2+1/2+1/3"}, "outputs": "1/3"}, {"idx": 2, "inputs": {"expression": "1/3-1/2"}, "outputs": "-1/6"}], "title": "Fraction Addition and Subtraction", "entry_fn_name": "fractionAddition"}
{"question_id": "591", "schema": {"name": "isValid", "params": [{"name": "code", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"code": "<DIV>This is the first line <![CDATA[<div>]]></DIV>"}, "outputs": true}, {"idx": 1, "inputs": {"code": "<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>"}, "outputs": true}, {"idx": 2, "inputs": {"code": "<A>  <B> </A>   </B>"}, "outputs": false}], "title": "Tag Validator", "entry_fn_name": "isValid"}
{"question_id": "587", "schema": {"name": "outerTrees", "params": [{"name": "trees", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 1], [2, 2], [2, 0], [2, 4], [3, 3], [4, 2]]}, "outputs": [[1, 1], [2, 0], [3, 3], [2, 4], [4, 2]]}, {"idx": 1, "inputs": {"points": [[1, 2], [2, 2], [4, 2]]}, "outputs": [[4, 2], [2, 2], [1, 2]]}], "title": "Erect the Fence", "entry_fn_name": "outerTrees"}
{"question_id": "583", "schema": {"name": "minDistance", "params": [{"name": "word1", "type": "string"}, {"name": "word2", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "sea", "word2": "eat"}, "outputs": 2}, {"idx": 1, "inputs": {"word1": "leetcode", "word2": "etco"}, "outputs": 4}], "title": "Delete Operation for Two Strings", "entry_fn_name": "minDistance"}
{"question_id": "581", "schema": {"name": "findUnsortedSubarray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 6, 4, 8, 10, 9, 15]}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [1]}, "outputs": 0}], "title": "Shortest Unsorted Continuous Subarray", "entry_fn_name": "findUnsortedSubarray"}
{"question_id": "576", "schema": {"name": "findPaths", "params": [{"name": "m", "type": "integer"}, {"name": "n", "type": "integer"}, {"name": "maxMove", "type": "integer"}, {"name": "startRow", "type": "integer"}, {"name": "startColumn", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 2, "n": 2, "maxMove": 2, "startRow": 0, "startColumn": 0}, "outputs": 6}, {"idx": 1, "inputs": {"m": 1, "n": 3, "maxMove": 3, "startRow": 0, "startColumn": 1}, "outputs": 12}], "title": "Out of Boundary Paths", "entry_fn_name": "findPaths"}
{"question_id": "575", "schema": {"name": "distributeCandies", "params": [{"name": "candyType", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"candyType": [1, 1, 2, 2, 3, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"candyType": [1, 1, 2, 3]}, "outputs": 2}, {"idx": 2, "inputs": {"candyType": [6, 6, 6, 6]}, "outputs": 1}], "title": "Distribute Candies", "entry_fn_name": "distributeCandies"}
{"question_id": "572", "schema": {"name": "isSubtree", "params": [{"name": "root", "type": "TreeNode"}, {"name": "subRoot", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 4, 5, 1, 2], "subRoot": [4, 1, 2]}, "outputs": true}, {"idx": 1, "inputs": {"root": [3, 4, 5, 1, 2, null, null, null, null, 0], "subRoot": [4, 1, 2]}, "outputs": false}], "title": "Subtree of Another Tree", "entry_fn_name": "isSubtree"}
{"question_id": "567", "schema": {"name": "checkInclusion", "params": [{"name": "s1", "type": "string"}, {"name": "s2", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "ab", "s2": "eidbaooo"}, "outputs": true}, {"idx": 1, "inputs": {"s1": "ab", "s2": "eidboaoo"}, "outputs": false}], "title": "Permutation in String", "entry_fn_name": "checkInclusion"}
{"question_id": "566", "schema": {"name": "matrixReshape", "params": [{"name": "mat", "type": "integer[][]"}, {"name": "r", "type": "integer"}, {"name": "c", "type": "integer"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 2], [3, 4]], "r": 1, "c": 4}, "outputs": [[1, 2, 3, 4]]}, {"idx": 1, "inputs": {"mat": [[1, 2], [3, 4]], "r": 2, "c": 4}, "outputs": [[1, 2], [3, 4]]}], "title": "Reshape the Matrix", "entry_fn_name": "matrixReshape"}
{"question_id": "565", "schema": {"name": "arrayNesting", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 4, 0, 3, 1, 6, 2]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [0, 1, 2]}, "outputs": 1}], "title": "Array Nesting", "entry_fn_name": "arrayNesting"}
{"question_id": "564", "schema": {"name": "nearestPalindromic", "params": [{"name": "n", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": "123"}, "outputs": "121"}, {"idx": 1, "inputs": {"n": "1"}, "outputs": "0"}], "title": "Find the Closest Palindrome", "entry_fn_name": "nearestPalindromic"}
{"question_id": "563", "schema": {"name": "findTilt", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"root": [4, 2, 9, 3, 5, null, 7]}, "outputs": 15}, {"idx": 2, "inputs": {"root": [21, 7, 14, 1, 1, 2, 2, 3, 3]}, "outputs": 9}], "title": "Binary Tree Tilt", "entry_fn_name": "findTilt"}
{"question_id": "561", "schema": {"name": "arrayPairSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 4, 3, 2]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [6, 2, 6, 5, 1, 2]}, "outputs": 9}], "title": "Array Partition", "entry_fn_name": "arrayPairSum"}
{"question_id": "560", "schema": {"name": "subarraySum", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1], "k": 2}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 2, 3], "k": 3}, "outputs": 2}], "title": "Subarray Sum Equals K", "entry_fn_name": "subarraySum"}
{"question_id": "557", "schema": {"name": "reverseWords", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "Let's take LeetCode contest"}, "outputs": "s'teL ekat edoCteeL tsetnoc"}, {"idx": 1, "inputs": {"s": "God Ding"}, "outputs": "doG gniD"}], "title": "Reverse Words in a String III", "entry_fn_name": "reverseWords"}
{"question_id": "556", "schema": {"name": "nextGreaterElement", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 12}, "outputs": 21}, {"idx": 1, "inputs": {"n": 21}, "outputs": -1}], "title": "Next Greater Element III", "entry_fn_name": "nextGreaterElement"}
{"question_id": "554", "schema": {"name": "leastBricks", "params": [{"name": "wall", "type": "list<list<integer>>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"wall": [[1, 2, 2, 1], [3, 1, 2], [1, 3, 2], [2, 4], [3, 1, 2], [1, 3, 1, 1]]}, "outputs": 2}, {"idx": 1, "inputs": {"wall": [[1], [1], [1]]}, "outputs": 3}], "title": "Brick Wall", "entry_fn_name": "leastBricks"}
{"question_id": "553", "schema": {"name": "optimalDivision", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1000, 100, 10, 2]}, "outputs": "1000/(100/10/2)"}, {"idx": 1, "inputs": {"nums": [2, 3, 4]}, "outputs": "2/(3/4)"}, {"idx": 2, "inputs": {"nums": [2]}, "outputs": "2"}], "title": "Optimal Division", "entry_fn_name": "optimalDivision"}
{"question_id": "552", "schema": {"name": "checkRecord", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 8}, {"idx": 1, "inputs": {"n": 1}, "outputs": 3}, {"idx": 2, "inputs": {"n": 10101}, "outputs": 183236316}], "title": "Student Attendance Record II", "entry_fn_name": "checkRecord"}
{"question_id": "551", "schema": {"name": "checkRecord", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "PPALLP"}, "outputs": true}, {"idx": 1, "inputs": {"s": "PPALLL"}, "outputs": false}], "title": "Student Attendance Record I", "entry_fn_name": "checkRecord"}
{"question_id": "547", "schema": {"name": "findCircleNum", "params": [{"name": "isConnected", "type": "integer[][]"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"isConnected": [[1, 1, 0], [1, 1, 0], [0, 0, 1]]}, "outputs": 2}, {"idx": 1, "inputs": {"isConnected": [[1, 0, 0], [0, 1, 0], [0, 0, 1]]}, "outputs": 3}], "title": "Number of Provinces", "entry_fn_name": "findCircleNum"}
{"question_id": "546", "schema": {"name": "removeBoxes", "params": [{"name": "boxes", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"boxes": [1, 3, 2, 2, 2, 3, 4, 3, 1]}, "outputs": 23}, {"idx": 1, "inputs": {"boxes": [1, 1, 1]}, "outputs": 9}, {"idx": 2, "inputs": {"boxes": [1]}, "outputs": 1}], "title": "Remove Boxes", "entry_fn_name": "removeBoxes"}
{"question_id": "543", "schema": {"name": "diameterOfBinaryTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"root": [1, 2]}, "outputs": 1}], "title": "Diameter of Binary Tree", "entry_fn_name": "diameterOfBinaryTree"}
{"question_id": "542", "schema": {"name": "updateMatrix", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[0, 0, 0], [0, 1, 0], [0, 0, 0]]}, "outputs": [[0, 0, 0], [0, 1, 0], [0, 0, 0]]}, {"idx": 1, "inputs": {"mat": [[0, 0, 0], [0, 1, 0], [1, 1, 1]]}, "outputs": [[0, 0, 0], [0, 1, 0], [1, 2, 1]]}], "title": "01 Matrix", "entry_fn_name": "updateMatrix"}
{"question_id": "541", "schema": {"name": "reverseStr", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcdefg", "k": 2}, "outputs": "bacdfeg"}, {"idx": 1, "inputs": {"s": "abcd", "k": 2}, "outputs": "bacd"}], "title": "Reverse String II", "entry_fn_name": "reverseStr"}
{"question_id": "540", "schema": {"name": "singleNonDuplicate", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 2, 3, 3, 4, 4, 8, 8]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [3, 3, 7, 7, 10, 11, 11]}, "outputs": 10}], "title": "Single Element in a Sorted Array", "entry_fn_name": "singleNonDuplicate"}
{"question_id": "539", "schema": {"name": "findMinDifference", "params": [{"name": "timePoints", "type": "list<string>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"timePoints": ["23:59", "00:00"]}, "outputs": 1}, {"idx": 1, "inputs": {"timePoints": ["00:00", "23:59", "00:00"]}, "outputs": 0}], "title": "Minimum Time Difference", "entry_fn_name": "findMinDifference"}
{"question_id": "538", "schema": {"name": "convertBST", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 1, 6, 0, 2, 5, 7, null, null, null, 3, null, null, null, 8]}, "outputs": [30, 36, 21, 36, 35, 26, 15, null, null, null, 33, null, null, null, 8]}, {"idx": 1, "inputs": {"root": [0, null, 1]}, "outputs": [1, null, 1]}], "title": "Convert BST to Greater Tree", "entry_fn_name": "convertBST"}
{"question_id": "537", "schema": {"name": "complexNumberMultiply", "params": [{"name": "num1", "type": "string"}, {"name": "num2", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num1": "1+1i", "num2": "1+1i"}, "outputs": "0+2i"}, {"idx": 1, "inputs": {"num1": "1+-1i", "num2": "1+-1i"}, "outputs": "0+-2i"}], "title": "Complex Number Multiplication", "entry_fn_name": "complexNumberMultiply"}
{"question_id": "532", "schema": {"name": "findPairs", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 4, 1, 5], "k": 2}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 5], "k": 1}, "outputs": 4}, {"idx": 2, "inputs": {"nums": [1, 3, 1, 5, 4], "k": 0}, "outputs": 1}], "title": "K-diff Pairs in an Array", "entry_fn_name": "findPairs"}
{"question_id": "530", "schema": {"name": "getMinimumDifference", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 2, 6, 1, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"root": [1, 0, 48, null, null, 12, 49]}, "outputs": 1}], "title": "Minimum Absolute Difference in BST", "entry_fn_name": "getMinimumDifference"}
{"question_id": "529", "schema": {"name": "updateBoard", "params": [{"name": "board", "type": "character[][]"}, {"name": "click", "type": "integer[]"}], "return": {"type": "character[][]"}}, "test_cases": [{"idx": 0, "inputs": {"board": [["E", "E", "E", "E", "E"], ["E", "E", "M", "E", "E"], ["E", "E", "E", "E", "E"], ["E", "E", "E", "E", "E"]], "click": [3, 0]}, "outputs": [["B", "1", "E", "1", "B"], ["B", "1", "M", "1", "B"], ["B", "1", "1", "1", "B"], ["B", "B", "B", "B", "B"]]}, {"idx": 1, "inputs": {"board": [["B", "1", "E", "1", "B"], ["B", "1", "M", "1", "B"], ["B", "1", "1", "1", "B"], ["B", "B", "B", "B", "B"]], "click": [1, 2]}, "outputs": [["B", "1", "E", "1", "B"], ["B", "1", "X", "1", "B"], ["B", "1", "1", "1", "B"], ["B", "B", "B", "B", "B"]]}], "title": "Minesweeper", "entry_fn_name": "updateBoard"}
{"question_id": "1721", "schema": {"name": "swapNodes", "params": [{"name": "head", "type": "ListNode"}, {"name": "k", "type": "integer"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5], "k": 2}, "outputs": [1, 4, 3, 2, 5]}, {"idx": 1, "inputs": {"head": [7, 9, 6, 6, 7, 8, 3, 0, 9, 5], "k": 5}, "outputs": [7, 9, 6, 6, 8, 7, 3, 0, 9, 5]}], "title": "Swapping Nodes in a Linked List", "entry_fn_name": "swapNodes"}
{"question_id": "525", "schema": {"name": "findMaxLength", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [0, 1, 0]}, "outputs": 2}], "title": "Contiguous Array", "entry_fn_name": "findMaxLength"}
{"question_id": "524", "schema": {"name": "findLongestWord", "params": [{"name": "s", "type": "string"}, {"name": "dictionary", "type": "list<string>"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abpcplea", "dictionary": ["ale", "apple", "monkey", "plea"]}, "outputs": "apple"}, {"idx": 1, "inputs": {"s": "abpcplea", "dictionary": ["a", "b", "c"]}, "outputs": "a"}], "title": "Longest Word in Dictionary through Deleting", "entry_fn_name": "findLongestWord"}
{"question_id": "522", "schema": {"name": "findLUSlength", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["aba", "cdc", "eae"]}, "outputs": 3}, {"idx": 1, "inputs": {"strs": ["aaa", "aaa", "aa"]}, "outputs": -1}], "title": "Longest Uncommon Subsequence II", "entry_fn_name": "findLUSlength"}
{"question_id": "521", "schema": {"name": "findLUSlength", "params": [{"name": "a", "type": "string"}, {"name": "b", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": "aba", "b": "cdc"}, "outputs": 3}, {"idx": 1, "inputs": {"a": "aaa", "b": "bbb"}, "outputs": 3}, {"idx": 2, "inputs": {"a": "aaa", "b": "aaa"}, "outputs": -1}], "title": "Longest Uncommon Subsequence I", "entry_fn_name": "findLUSlength"}
{"question_id": "520", "schema": {"name": "detectCapitalUse", "params": [{"name": "word", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"word": "USA"}, "outputs": true}, {"idx": 1, "inputs": {"word": "FlaG"}, "outputs": false}], "title": "Detect Capital", "entry_fn_name": "detectCapitalUse"}
{"question_id": "518", "schema": {"name": "change", "params": [{"name": "amount", "type": "integer"}, {"name": "coins", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"amount": 5, "coins": [1, 2, 5]}, "outputs": 4}, {"idx": 1, "inputs": {"amount": 3, "coins": [2]}, "outputs": 0}, {"idx": 2, "inputs": {"amount": 10, "coins": [10]}, "outputs": 1}], "title": "Coin Change 2", "entry_fn_name": "change"}
{"question_id": "517", "schema": {"name": "findMinMoves", "params": [{"name": "machines", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"machines": [1, 0, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"machines": [0, 3, 0]}, "outputs": 2}, {"idx": 2, "inputs": {"machines": [0, 2, 0]}, "outputs": -1}], "title": "Super Washing Machines", "entry_fn_name": "findMinMoves"}
{"question_id": "516", "schema": {"name": "longestPalindromeSubseq", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "bbbab"}, "outputs": 4}, {"idx": 1, "inputs": {"s": "cbbd"}, "outputs": 2}], "title": "Longest Palindromic Subsequence", "entry_fn_name": "longestPalindromeSubseq"}
{"question_id": "515", "schema": {"name": "largestValues", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 3, 2, 5, 3, null, 9]}, "outputs": [1, 3, 9]}, {"idx": 1, "inputs": {"root": [1, 2, 3]}, "outputs": [1, 3]}], "title": "Find Largest Value in Each Tree Row", "entry_fn_name": "largestValues"}
{"question_id": "514", "schema": {"name": "findRotateSteps", "params": [{"name": "ring", "type": "string"}, {"name": "key", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"ring": "godding", "key": "gd"}, "outputs": 4}, {"idx": 1, "inputs": {"ring": "godding", "key": "godding"}, "outputs": 13}], "title": "Freedom Trail", "entry_fn_name": "findRotateSteps"}
{"question_id": "513", "schema": {"name": "findBottomLeftValue", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [2, 1, 3]}, "outputs": 1}, {"idx": 1, "inputs": {"root": [1, 2, 3, 4, null, 5, 6, null, null, 7]}, "outputs": 7}], "title": "Find Bottom Left Tree Value", "entry_fn_name": "findBottomLeftValue"}
{"question_id": "508", "schema": {"name": "findFrequentTreeSum", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 2, -3]}, "outputs": [2, -3, 4]}, {"idx": 1, "inputs": {"root": [5, 2, -5]}, "outputs": [2]}], "title": "Most Frequent Subtree Sum", "entry_fn_name": "findFrequentTreeSum"}
{"question_id": "507", "schema": {"name": "checkPerfectNumber", "params": [{"name": "num", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"num": 28}, "outputs": true}, {"idx": 1, "inputs": {"num": 7}, "outputs": false}], "title": "Perfect Number", "entry_fn_name": "checkPerfectNumber"}
{"question_id": "506", "schema": {"name": "findRelativeRanks", "params": [{"name": "score", "type": "integer[]"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"score": [5, 4, 3, 2, 1]}, "outputs": ["Gold Medal", "Silver Medal", "Bronze Medal", "4", "5"]}, {"idx": 1, "inputs": {"score": [10, 3, 8, 9, 4]}, "outputs": ["Gold Medal", "5", "Bronze Medal", "Silver Medal", "4"]}], "title": "Relative Ranks", "entry_fn_name": "findRelativeRanks"}
{"question_id": "504", "schema": {"name": "convertToBase7", "params": [{"name": "num", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": 100}, "outputs": "202"}, {"idx": 1, "inputs": {"num": -7}, "outputs": "-10"}], "title": "Base 7", "entry_fn_name": "convertToBase7"}
{"question_id": "502", "schema": {"name": "findMaximizedCapital", "params": [{"name": "k", "type": "integer"}, {"name": "w", "type": "integer"}, {"name": "profits", "type": "integer[]"}, {"name": "capital", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"k": 2, "w": 0, "profits": [1, 2, 3], "capital": [0, 1, 1]}, "outputs": 4}, {"idx": 1, "inputs": {"k": 3, "w": 0, "profits": [1, 2, 3], "capital": [0, 1, 2]}, "outputs": 6}], "title": "IPO", "entry_fn_name": "findMaximizedCapital"}
{"question_id": "501", "schema": {"name": "findMode", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 2, 2]}, "outputs": [2]}, {"idx": 1, "inputs": {"root": [0]}, "outputs": [0]}], "title": "Find Mode in Binary Search Tree", "entry_fn_name": "findMode"}
{"question_id": "500", "schema": {"name": "findWords", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "string[]"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["Hello", "Alaska", "Dad", "Peace"]}, "outputs": ["Alaska", "Dad"]}, {"idx": 1, "inputs": {"words": ["omk"]}, "outputs": []}, {"idx": 2, "inputs": {"words": ["adsdf", "sfd"]}, "outputs": ["adsdf", "sfd"]}], "title": "Keyboard Row", "entry_fn_name": "findWords"}
{"question_id": "498", "schema": {"name": "findDiagonalOrder", "params": [{"name": "mat", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"mat": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": [1, 2, 4, 7, 5, 3, 6, 8, 9]}, {"idx": 1, "inputs": {"mat": [[1, 2], [3, 4]]}, "outputs": [1, 2, 3, 4]}], "title": "Diagonal Traverse", "entry_fn_name": "findDiagonalOrder"}
{"question_id": "496", "schema": {"name": "nextGreaterElement", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [4, 1, 2], "nums2": [1, 3, 4, 2]}, "outputs": [-1, 3, -1]}, {"idx": 1, "inputs": {"nums1": [2, 4], "nums2": [1, 2, 3, 4]}, "outputs": [3, -1]}], "title": "Next Greater Element I", "entry_fn_name": "nextGreaterElement"}
{"question_id": "495", "schema": {"name": "findPoisonedDuration", "params": [{"name": "timeSeries", "type": "integer[]"}, {"name": "duration", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"timeSeries": [1, 4], "duration": 2}, "outputs": 4}, {"idx": 1, "inputs": {"timeSeries": [1, 2], "duration": 2}, "outputs": 3}], "title": "Teemo Attacking", "entry_fn_name": "findPoisonedDuration"}
{"question_id": "494", "schema": {"name": "findTargetSumWays", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1, 1, 1], "target": 3}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [1], "target": 1}, "outputs": 1}], "title": "Target Sum", "entry_fn_name": "findTargetSumWays"}
{"question_id": "493", "schema": {"name": "reversePairs", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 2, 3, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 4, 3, 5, 1]}, "outputs": 3}], "title": "Reverse Pairs", "entry_fn_name": "reversePairs"}
{"question_id": "492", "schema": {"name": "constructRectangle", "params": [{"name": "area", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"area": 4}, "outputs": [2, 2]}, {"idx": 1, "inputs": {"area": 37}, "outputs": [37, 1]}, {"idx": 2, "inputs": {"area": 122122}, "outputs": [427, 286]}], "title": "Construct the Rectangle", "entry_fn_name": "constructRectangle"}
{"question_id": "491", "schema": {"name": "findSubsequences", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 6, 7, 7]}, "outputs": [[4, 6], [4, 6, 7], [4, 6, 7, 7], [4, 7], [4, 7, 7], [6, 7], [6, 7, 7], [7, 7]]}, {"idx": 1, "inputs": {"nums": [4, 4, 3, 2, 1]}, "outputs": [[4, 4]]}], "title": "Increasing Subsequences", "entry_fn_name": "findSubsequences"}
{"question_id": "1643", "schema": {"name": "kthSmallestPath", "params": [{"name": "destination", "type": "integer[]"}, {"type": "integer", "name": "k"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"destination": [2, 3], "k": 1}, "outputs": "HHHVV"}, {"idx": 1, "inputs": {"destination": [2, 3], "k": 2}, "outputs": "HHVHV"}, {"idx": 2, "inputs": {"destination": [2, 3], "k": 3}, "outputs": "HHVVH"}], "title": "Kth Smallest Instructions", "entry_fn_name": "kthSmallestPath"}
{"question_id": "488", "schema": {"name": "findMinStep", "params": [{"name": "board", "type": "string"}, {"name": "hand", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"board": "WRRBBW", "hand": "RB"}, "outputs": -1}, {"idx": 1, "inputs": {"board": "WWRRBBWW", "hand": "WRBRW"}, "outputs": 2}, {"idx": 2, "inputs": {"board": "G", "hand": "GGGGG"}, "outputs": 2}], "title": "Zuma Game", "entry_fn_name": "findMinStep"}
{"question_id": "486", "schema": {"name": "PredictTheWinner", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 5, 2]}, "outputs": false}, {"idx": 1, "inputs": {"nums": [1, 5, 233, 7]}, "outputs": true}], "title": "Predict the Winner", "entry_fn_name": "PredictTheWinner"}
{"question_id": "485", "schema": {"name": "findMaxConsecutiveOnes", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 0, 1, 1, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 0, 1, 1, 0, 1]}, "outputs": 2}], "title": "Max Consecutive Ones", "entry_fn_name": "findMaxConsecutiveOnes"}
{"question_id": "483", "schema": {"name": "smallestGoodBase", "params": [{"name": "n", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": "13"}, "outputs": "3"}, {"idx": 1, "inputs": {"n": "4681"}, "outputs": "8"}, {"idx": 2, "inputs": {"n": "1000000000000000000"}, "outputs": "999999999999999999"}], "title": "Smallest Good Base", "entry_fn_name": "smallestGoodBase"}
{"question_id": "482", "schema": {"name": "licenseKeyFormatting", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "5F3Z-2e-9-w", "k": 4}, "outputs": "5F3Z-2E9W"}, {"idx": 1, "inputs": {"s": "2-5g-3-J", "k": 2}, "outputs": "2-5G-3J"}], "title": "License Key Formatting", "entry_fn_name": "licenseKeyFormatting"}
{"question_id": "481", "schema": {"name": "magicalString", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6}, "outputs": 3}, {"idx": 1, "inputs": {"n": 1}, "outputs": 1}], "title": "Magical String", "entry_fn_name": "magicalString"}
{"question_id": "480", "schema": {"name": "medianSlidingWindow", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "double[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, -1, -3, 5, 3, 6, 7], "k": 3}, "outputs": [1.0, -1.0, -1.0, 3.0, 5.0, 6.0]}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 2, 3, 1, 4, 2], "k": 3}, "outputs": [2.0, 3.0, 3.0, 3.0, 2.0, 3.0, 2.0]}], "title": "Sliding Window Median", "entry_fn_name": "medianSlidingWindow"}
{"question_id": "477", "schema": {"name": "totalHammingDistance", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 14, 2]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [4, 14, 4]}, "outputs": 4}], "title": "Total Hamming Distance", "entry_fn_name": "totalHammingDistance"}
{"question_id": "476", "schema": {"name": "findComplement", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"num": 5}, "outputs": 2}, {"idx": 1, "inputs": {"num": 1}, "outputs": 0}], "title": "Number Complement", "entry_fn_name": "findComplement"}
{"question_id": "475", "schema": {"name": "findRadius", "params": [{"name": "houses", "type": "integer[]"}, {"name": "heaters", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"houses": [1, 2, 3], "heaters": [2]}, "outputs": 1}, {"idx": 1, "inputs": {"houses": [1, 2, 3, 4], "heaters": [1, 4]}, "outputs": 1}, {"idx": 2, "inputs": {"houses": [1, 5], "heaters": [2]}, "outputs": 3}], "title": "Heaters", "entry_fn_name": "findRadius"}
{"question_id": "473", "schema": {"name": "makesquare", "params": [{"name": "matchsticks", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"matchsticks": [1, 1, 2, 2, 2]}, "outputs": true}, {"idx": 1, "inputs": {"matchsticks": [3, 3, 3, 3, 4]}, "outputs": false}], "title": "Matchsticks to Square", "entry_fn_name": "makesquare"}
{"question_id": "472", "schema": {"name": "findAllConcatenatedWordsInADict", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["cat", "cats", "catsdogcats", "dog", "dogcatsdog", "hippopotamuses", "rat", "ratcatdogcat"]}, "outputs": ["catsdogcats", "dogcatsdog", "ratcatdogcat"]}, {"idx": 1, "inputs": {"words": ["cat", "dog", "catdog"]}, "outputs": ["catdog"]}], "title": "Concatenated Words", "entry_fn_name": "findAllConcatenatedWordsInADict"}
{"question_id": "468", "schema": {"name": "validIPAddress", "params": [{"name": "queryIP", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"queryIP": "172.16.254.1"}, "outputs": "IPv4"}, {"idx": 1, "inputs": {"queryIP": "2001:0db8:85a3:0:0:8A2E:0370:7334"}, "outputs": "IPv6"}, {"idx": 2, "inputs": {"queryIP": "256.256.256.256"}, "outputs": "Neither"}], "title": "Validate IP Address", "entry_fn_name": "validIPAddress"}
{"question_id": "466", "schema": {"name": "getMaxRepetitions", "params": [{"name": "s1", "type": "string"}, {"name": "n1", "type": "integer"}, {"name": "s2", "type": "string"}, {"name": "n2", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "acb", "n1": 4, "s2": "ab", "n2": 2}, "outputs": 2}, {"idx": 1, "inputs": {"s1": "acb", "n1": 1, "s2": "acb", "n2": 1}, "outputs": 1}], "title": "Count The Repetitions", "entry_fn_name": "getMaxRepetitions"}
{"question_id": "464", "schema": {"name": "canIWin", "params": [{"name": "maxChoosableInteger", "type": "integer"}, {"name": "desiredTotal", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"maxChoosableInteger": 10, "desiredTotal": 11}, "outputs": false}, {"idx": 1, "inputs": {"maxChoosableInteger": 10, "desiredTotal": 0}, "outputs": true}, {"idx": 2, "inputs": {"maxChoosableInteger": 10, "desiredTotal": 1}, "outputs": true}], "title": "Can I Win", "entry_fn_name": "canIWin"}
{"question_id": "463", "schema": {"name": "islandPerimeter", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0]]}, "outputs": 16}, {"idx": 1, "inputs": {"grid": [[1]]}, "outputs": 4}, {"idx": 2, "inputs": {"grid": [[1, 0]]}, "outputs": 4}], "title": "Island Perimeter", "entry_fn_name": "islandPerimeter"}
{"question_id": "462", "schema": {"name": "minMoves2", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 10, 2, 9]}, "outputs": 16}], "title": "Minimum Moves to Equal Array Elements II", "entry_fn_name": "minMoves2"}
{"question_id": "461", "schema": {"name": "hammingDistance", "params": [{"name": "x", "type": "integer"}, {"name": "y", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"x": 1, "y": 4}, "outputs": 2}, {"idx": 1, "inputs": {"x": 3, "y": 1}, "outputs": 1}], "title": "Hamming Distance", "entry_fn_name": "hammingDistance"}
{"question_id": "459", "schema": {"name": "repeatedSubstringPattern", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abab"}, "outputs": true}, {"idx": 1, "inputs": {"s": "aba"}, "outputs": false}, {"idx": 2, "inputs": {"s": "abcabcabcabc"}, "outputs": true}], "title": "Repeated Substring Pattern", "entry_fn_name": "repeatedSubstringPattern"}
{"question_id": "458", "schema": {"name": "poorPigs", "params": [{"name": "buckets", "type": "integer"}, {"name": "minutesToDie", "type": "integer"}, {"name": "minutesToTest", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"buckets": 1000, "minutesToDie": 15, "minutesToTest": 60}, "outputs": 5}, {"idx": 1, "inputs": {"buckets": 4, "minutesToDie": 15, "minutesToTest": 15}, "outputs": 2}, {"idx": 2, "inputs": {"buckets": 4, "minutesToDie": 15, "minutesToTest": 30}, "outputs": 2}], "title": "Poor Pigs", "entry_fn_name": "poorPigs"}
{"question_id": "457", "schema": {"name": "circularArrayLoop", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, -1, 1, 2, 2]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [-1, 2]}, "outputs": false}, {"idx": 2, "inputs": {"nums": [-2, 1, -1, -2, -2]}, "outputs": false}], "title": "Circular Array Loop", "entry_fn_name": "circularArrayLoop"}
{"question_id": "456", "schema": {"name": "find132pattern", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": false}, {"idx": 1, "inputs": {"nums": [3, 1, 4, 2]}, "outputs": true}, {"idx": 2, "inputs": {"nums": [-1, 3, 2, 0]}, "outputs": true}], "title": "132 Pattern", "entry_fn_name": "find132pattern"}
{"question_id": "455", "schema": {"name": "findContentChildren", "params": [{"name": "g", "type": "integer[]"}, {"name": "s", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"g": [1, 2, 3], "s": [1, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"g": [1, 2], "s": [1, 2, 3]}, "outputs": 2}], "title": "Assign Cookies", "entry_fn_name": "findContentChildren"}
{"question_id": "454", "schema": {"name": "fourSumCount", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}, {"name": "nums3", "type": "integer[]"}, {"name": "nums4", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2], "nums2": [-2, -1], "nums3": [-1, 2], "nums4": [0, 2]}, "outputs": 2}, {"idx": 1, "inputs": {"nums1": [0], "nums2": [0], "nums3": [0], "nums4": [0]}, "outputs": 1}], "title": "4Sum II", "entry_fn_name": "fourSumCount"}
{"question_id": "453", "schema": {"name": "minMoves", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 1, 1]}, "outputs": 0}], "title": "Minimum Moves to Equal Array Elements", "entry_fn_name": "minMoves"}
{"question_id": "452", "schema": {"name": "findMinArrowShots", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[10, 16], [2, 8], [1, 6], [7, 12]]}, "outputs": 2}, {"idx": 1, "inputs": {"points": [[1, 2], [3, 4], [5, 6], [7, 8]]}, "outputs": 4}, {"idx": 2, "inputs": {"points": [[1, 2], [2, 3], [3, 4], [4, 5]]}, "outputs": 2}], "title": "Minimum Number of Arrows to Burst Balloons", "entry_fn_name": "findMinArrowShots"}
{"question_id": "451", "schema": {"name": "frequencySort", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "tree"}, "outputs": "eert"}, {"idx": 1, "inputs": {"s": "cccaaa"}, "outputs": "aaaccc"}, {"idx": 2, "inputs": {"s": "Aabb"}, "outputs": "bbAa"}], "title": "Sort Characters By Frequency", "entry_fn_name": "frequencySort"}
{"question_id": "450", "schema": {"name": "deleteNode", "params": [{"name": "root", "type": "TreeNode", "dealloc": false}, {"name": "key", "type": "integer"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 3, 6, 2, 4, null, 7], "key": 3}, "outputs": [5, 4, 6, 2, null, null, 7]}, {"idx": 1, "inputs": {"root": [5, 3, 6, 2, 4, null, 7], "key": 0}, "outputs": [5, 3, 6, 2, 4, null, 7]}, {"idx": 2, "inputs": {"root": [], "key": 0}, "outputs": []}], "title": "Delete Node in a BST", "entry_fn_name": "deleteNode"}
{"question_id": "448", "schema": {"name": "findDisappearedNumbers", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 3, 2, 7, 8, 2, 3, 1]}, "outputs": [5, 6]}, {"idx": 1, "inputs": {"nums": [1, 1]}, "outputs": [2]}], "title": "Find All Numbers Disappeared in an Array", "entry_fn_name": "findDisappearedNumbers"}
{"question_id": "447", "schema": {"name": "numberOfBoomerangs", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[0, 0], [1, 0], [2, 0]]}, "outputs": 2}, {"idx": 1, "inputs": {"points": [[1, 1], [2, 2], [3, 3]]}, "outputs": 2}, {"idx": 2, "inputs": {"points": [[1, 1]]}, "outputs": 0}], "title": "Number of Boomerangs", "entry_fn_name": "numberOfBoomerangs"}
{"question_id": "446", "schema": {"name": "numberOfArithmeticSlices", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 4, 6, 8, 10]}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [7, 7, 7, 7, 7]}, "outputs": 16}], "title": "Arithmetic Slices II - Subsequence", "entry_fn_name": "numberOfArithmeticSlices"}
{"question_id": "445", "schema": {"name": "addTwoNumbers", "params": [{"name": "l1", "type": "ListNode", "dealloc": false}, {"name": "l2", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"l1": [7, 2, 4, 3], "l2": [5, 6, 4]}, "outputs": [7, 8, 0, 7]}, {"idx": 1, "inputs": {"l1": [2, 4, 3], "l2": [5, 6, 4]}, "outputs": [8, 0, 7]}, {"idx": 2, "inputs": {"l1": [0], "l2": [0]}, "outputs": [0]}], "title": "Add Two Numbers II", "entry_fn_name": "addTwoNumbers"}
{"question_id": "442", "schema": {"name": "findDuplicates", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 3, 2, 7, 8, 2, 3, 1]}, "outputs": [2, 3]}, {"idx": 1, "inputs": {"nums": [1, 1, 2]}, "outputs": [1]}, {"idx": 2, "inputs": {"nums": [1]}, "outputs": []}], "title": "Find All Duplicates in an Array", "entry_fn_name": "findDuplicates"}
{"question_id": "441", "schema": {"name": "arrangeCoins", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 5}, "outputs": 2}, {"idx": 1, "inputs": {"n": 8}, "outputs": 3}], "title": "Arranging Coins", "entry_fn_name": "arrangeCoins"}
{"question_id": "440", "schema": {"name": "findKthNumber", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 13, "k": 2}, "outputs": 10}, {"idx": 1, "inputs": {"n": 1, "k": 1}, "outputs": 1}], "title": "K-th Smallest in Lexicographical Order", "entry_fn_name": "findKthNumber"}
{"question_id": "438", "schema": {"name": "findAnagrams", "params": [{"name": "s", "type": "string"}, {"name": "p", "type": "string"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "cbaebabacd", "p": "abc"}, "outputs": [0, 6]}, {"idx": 1, "inputs": {"s": "abab", "p": "ab"}, "outputs": [0, 1, 2]}], "title": "Find All Anagrams in a String", "entry_fn_name": "findAnagrams"}
{"question_id": "437", "schema": {"name": "pathSum", "params": [{"name": "root", "type": "TreeNode"}, {"name": "targetSum", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [10, 5, -3, 3, 2, null, 11, 3, -2, null, 1], "targetSum": 8}, "outputs": 3}, {"idx": 1, "inputs": {"root": [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, 5, 1], "targetSum": 22}, "outputs": 3}], "title": "Path Sum III", "entry_fn_name": "pathSum"}
{"question_id": "436", "schema": {"name": "findRightInterval", "params": [{"name": "intervals", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 2]]}, "outputs": [-1]}, {"idx": 1, "inputs": {"intervals": [[3, 4], [2, 3], [1, 2]]}, "outputs": [-1, 0, 1]}, {"idx": 2, "inputs": {"intervals": [[1, 4], [2, 3], [3, 4]]}, "outputs": [-1, 2, -1]}], "title": "Find Right Interval", "entry_fn_name": "findRightInterval"}
{"question_id": "435", "schema": {"name": "eraseOverlapIntervals", "params": [{"name": "intervals", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 2], [2, 3], [3, 4], [1, 3]]}, "outputs": 1}, {"idx": 1, "inputs": {"intervals": [[1, 2], [1, 2], [1, 2]]}, "outputs": 2}, {"idx": 2, "inputs": {"intervals": [[1, 2], [2, 3]]}, "outputs": 0}], "title": "Non-overlapping Intervals", "entry_fn_name": "eraseOverlapIntervals"}
{"question_id": "434", "schema": {"name": "countSegments", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "Hello, my name is John"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "Hello"}, "outputs": 1}], "title": "Number of Segments in a String", "entry_fn_name": "countSegments"}
{"question_id": "433", "schema": {"name": "minMutation", "params": [{"name": "start", "type": "string"}, {"name": "end", "type": "string"}, {"name": "bank", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"start": "AACCGGTT", "end": "AACCGGTA", "bank": ["AACCGGTA"]}, "outputs": 1}, {"idx": 1, "inputs": {"start": "AACCGGTT", "end": "AAACGGTA", "bank": ["AACCGGTA", "AACCGCTA", "AAACGGTA"]}, "outputs": 2}, {"idx": 2, "inputs": {"start": "AAAAACCC", "end": "AACCCCCC", "bank": ["AAAACCCC", "AAACCCCC", "AACCCCCC"]}, "outputs": 3}], "title": "Minimum Genetic Mutation", "entry_fn_name": "minMutation"}
{"question_id": "424", "schema": {"name": "characterReplacement", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ABAB", "k": 2}, "outputs": 4}, {"idx": 1, "inputs": {"s": "AABABBA", "k": 1}, "outputs": 4}], "title": "Longest Repeating Character Replacement", "entry_fn_name": "characterReplacement"}
{"question_id": "423", "schema": {"name": "originalDigits", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "owoztneoer"}, "outputs": "012"}, {"idx": 1, "inputs": {"s": "fviefuro"}, "outputs": "45"}], "title": "Reconstruct Original Digits from English", "entry_fn_name": "originalDigits"}
{"question_id": "421", "schema": {"name": "findMaximumXOR", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 10, 5, 25, 2, 8]}, "outputs": 28}, {"idx": 1, "inputs": {"nums": [14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]}, "outputs": 127}], "title": "Maximum XOR of Two Numbers in an Array", "entry_fn_name": "findMaximumXOR"}
{"question_id": "420", "schema": {"name": "strongPasswordChecker", "params": [{"name": "password", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"password": "a"}, "outputs": 5}, {"idx": 1, "inputs": {"password": "aA1"}, "outputs": 3}, {"idx": 2, "inputs": {"password": "1337C0d3"}, "outputs": 0}], "title": "Strong Password Checker", "entry_fn_name": "strongPasswordChecker"}
{"question_id": "419", "schema": {"name": "countBattleships", "params": [{"name": "board", "type": "character[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"board": [["X", ".", ".", "X"], [".", ".", ".", "X"], [".", ".", ".", "X"]]}, "outputs": 2}, {"idx": 1, "inputs": {"board": [["."]]}, "outputs": 0}], "title": "Battleships in a Board", "entry_fn_name": "countBattleships"}
{"question_id": "417", "schema": {"name": "pacificAtlantic", "params": [{"name": "heights", "type": "integer[][]"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"heights": [[1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4]]}, "outputs": [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]}, {"idx": 1, "inputs": {"heights": [[2, 1], [1, 2]]}, "outputs": [[0, 0], [0, 1], [1, 0], [1, 1]]}], "title": "Pacific Atlantic Water Flow", "entry_fn_name": "pacificAtlantic"}
{"question_id": "416", "schema": {"name": "canPartition", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 5, 11, 5]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 5]}, "outputs": false}], "title": "Partition Equal Subset Sum", "entry_fn_name": "canPartition"}
{"question_id": "415", "schema": {"name": "addStrings", "params": [{"name": "num1", "type": "string"}, {"name": "num2", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num1": "11", "num2": "123"}, "outputs": "134"}, {"idx": 1, "inputs": {"num1": "456", "num2": "77"}, "outputs": "533"}, {"idx": 2, "inputs": {"num1": "0", "num2": "0"}, "outputs": "0"}], "title": "Add Strings", "entry_fn_name": "addStrings"}
{"question_id": "414", "schema": {"name": "thirdMax", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [1, 2]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [2, 2, 3, 1]}, "outputs": 1}], "title": "Third Maximum Number", "entry_fn_name": "thirdMax"}
{"question_id": "413", "schema": {"name": "numberOfArithmeticSlices", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1]}, "outputs": 0}], "title": "Arithmetic Slices", "entry_fn_name": "numberOfArithmeticSlices"}
{"question_id": "412", "schema": {"name": "fizzBuzz", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": ["1", "2", "Fizz"]}, {"idx": 1, "inputs": {"n": 5}, "outputs": ["1", "2", "Fizz", "4", "Buzz"]}, {"idx": 2, "inputs": {"n": 15}, "outputs": ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"]}], "title": "Fizz Buzz", "entry_fn_name": "fizzBuzz"}
{"question_id": "410", "schema": {"name": "splitArray", "params": [{"name": "nums", "type": "integer[]"}, {"name": "m", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [7, 2, 5, 10, 8], "m": 2}, "outputs": 18}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4, 5], "m": 2}, "outputs": 9}, {"idx": 2, "inputs": {"nums": [1, 4, 4], "m": 3}, "outputs": 4}], "title": "Split Array Largest Sum", "entry_fn_name": "splitArray"}
{"question_id": "409", "schema": {"name": "longestPalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abccccdd"}, "outputs": 7}, {"idx": 1, "inputs": {"s": "a"}, "outputs": 1}], "title": "Longest Palindrome", "entry_fn_name": "longestPalindrome"}
{"question_id": "407", "schema": {"name": "trapRainWater", "params": [{"name": "heightMap", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"heightMap": [[1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1]]}, "outputs": 4}, {"idx": 1, "inputs": {"heightMap": [[3, 3, 3, 3, 3], [3, 2, 2, 2, 3], [3, 2, 1, 2, 3], [3, 2, 2, 2, 3], [3, 3, 3, 3, 3]]}, "outputs": 10}], "title": "Trapping Rain Water II", "entry_fn_name": "trapRainWater"}
{"question_id": "406", "schema": {"name": "reconstructQueue", "params": [{"name": "people", "type": "integer[][]"}], "return": {"type": "integer[][]", "colsize": "2"}}, "test_cases": [{"idx": 0, "inputs": {"people": [[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]}, "outputs": [[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]]}, {"idx": 1, "inputs": {"people": [[6, 0], [5, 0], [4, 0], [3, 2], [2, 2], [1, 4]]}, "outputs": [[4, 0], [5, 0], [2, 2], [3, 2], [1, 4], [6, 0]]}], "title": "Queue Reconstruction by Height", "entry_fn_name": "reconstructQueue"}
{"question_id": "405", "schema": {"name": "toHex", "params": [{"name": "num", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": 26}, "outputs": "1a"}, {"idx": 1, "inputs": {"num": -1}, "outputs": "ffffffff"}], "title": "Convert a Number to Hexadecimal", "entry_fn_name": "toHex"}
{"question_id": "404", "schema": {"name": "sumOfLeftLeaves", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": 24}, {"idx": 1, "inputs": {"root": [1]}, "outputs": 0}], "title": "Sum of Left Leaves", "entry_fn_name": "sumOfLeftLeaves"}
{"question_id": "403", "schema": {"name": "canCross", "params": [{"name": "stones", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"stones": [0, 1, 3, 5, 6, 8, 12, 17]}, "outputs": true}, {"idx": 1, "inputs": {"stones": [0, 1, 2, 3, 4, 8, 9, 11]}, "outputs": false}], "title": "Frog Jump", "entry_fn_name": "canCross"}
{"question_id": "402", "schema": {"name": "removeKdigits", "params": [{"name": "num", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": "1432219", "k": 3}, "outputs": "1219"}, {"idx": 1, "inputs": {"num": "10200", "k": 1}, "outputs": "200"}, {"idx": 2, "inputs": {"num": "10", "k": 2}, "outputs": "0"}], "title": "Remove K Digits", "entry_fn_name": "removeKdigits"}
{"question_id": "401", "schema": {"name": "readBinaryWatch", "params": [{"name": "turnedOn", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"turnedOn": 1}, "outputs": ["0:01", "0:02", "0:04", "0:08", "0:16", "0:32", "1:00", "2:00", "4:00", "8:00"]}, {"idx": 1, "inputs": {"turnedOn": 9}, "outputs": []}], "title": "Binary Watch", "entry_fn_name": "readBinaryWatch"}
{"question_id": "400", "schema": {"name": "findNthDigit", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 3}, {"idx": 1, "inputs": {"n": 11}, "outputs": 0}], "title": "Nth Digit", "entry_fn_name": "findNthDigit"}
{"question_id": "399", "schema": {"name": "calcEquation", "params": [{"name": "equations", "type": "list<list<string>>"}, {"name": "values", "type": "double[]"}, {"name": "queries", "type": "list<list<string>>"}], "return": {"type": "double[]"}}, "test_cases": [{"idx": 0, "inputs": {"equations": [["a", "b"], ["b", "c"]], "values": [2.0, 3.0], "queries": [["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"]]}, "outputs": [6.0, 0.5, -1.0, 1.0, -1.0]}, {"idx": 1, "inputs": {"equations": [["a", "b"], ["b", "c"], ["bc", "cd"]], "values": [1.5, 2.5, 5.0], "queries": [["a", "c"], ["c", "b"], ["bc", "cd"], ["cd", "bc"]]}, "outputs": [3.75, 0.4, 5.0, 0.2]}, {"idx": 2, "inputs": {"equations": [["a", "b"]], "values": [0.5], "queries": [["a", "b"], ["b", "a"], ["a", "c"], ["x", "y"]]}, "outputs": [0.5, 2.0, -1.0, -1.0]}], "title": "Evaluate Division", "entry_fn_name": "calcEquation"}
{"question_id": "397", "schema": {"name": "integerReplacement", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 8}, "outputs": 3}, {"idx": 1, "inputs": {"n": 7}, "outputs": 4}, {"idx": 2, "inputs": {"n": 4}, "outputs": 2}], "title": "Integer Replacement", "entry_fn_name": "integerReplacement"}
{"question_id": "396", "schema": {"name": "maxRotateFunction", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 3, 2, 6]}, "outputs": 26}, {"idx": 1, "inputs": {"nums": [100]}, "outputs": 0}], "title": "Rotate Function", "entry_fn_name": "maxRotateFunction"}
{"question_id": "395", "schema": {"name": "longestSubstring", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aaabb", "k": 3}, "outputs": 3}, {"idx": 1, "inputs": {"s": "ababbc", "k": 2}, "outputs": 5}], "title": "Longest Substring with At Least K Repeating Characters", "entry_fn_name": "longestSubstring"}
{"question_id": "394", "schema": {"name": "decodeString", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "3[a]2[bc]"}, "outputs": "aaabcbc"}, {"idx": 1, "inputs": {"s": "3[a2[c]]"}, "outputs": "accaccacc"}, {"idx": 2, "inputs": {"s": "2[abc]3[cd]ef"}, "outputs": "abcabccdcdcdef"}], "title": "Decode String", "entry_fn_name": "decodeString"}
{"question_id": "393", "schema": {"name": "validUtf8", "params": [{"name": "data", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"data": [197, 130, 1]}, "outputs": true}, {"idx": 1, "inputs": {"data": [235, 140, 4]}, "outputs": false}], "title": "UTF-8 Validation", "entry_fn_name": "validUtf8"}
{"question_id": "392", "schema": {"name": "isSubsequence", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abc", "t": "ahbgdc"}, "outputs": true}, {"idx": 1, "inputs": {"s": "axc", "t": "ahbgdc"}, "outputs": false}], "title": "Is Subsequence", "entry_fn_name": "isSubsequence"}
{"question_id": "391", "schema": {"name": "isRectangleCover", "params": [{"name": "rectangles", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"rectangles": [[1, 1, 3, 3], [3, 1, 4, 2], [3, 2, 4, 4], [1, 3, 2, 4], [2, 3, 3, 4]]}, "outputs": true}, {"idx": 1, "inputs": {"rectangles": [[1, 1, 2, 3], [1, 3, 2, 4], [3, 1, 4, 2], [3, 2, 4, 4]]}, "outputs": false}, {"idx": 2, "inputs": {"rectangles": [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [2, 2, 4, 4]]}, "outputs": false}], "title": "Perfect Rectangle", "entry_fn_name": "isRectangleCover"}
{"question_id": "390", "schema": {"name": "lastRemaining", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 9}, "outputs": 6}, {"idx": 1, "inputs": {"n": 1}, "outputs": 1}], "title": "Elimination Game", "entry_fn_name": "lastRemaining"}
{"question_id": "389", "schema": {"name": "findTheDifference", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "character"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcd", "t": "abcde"}, "outputs": "e"}, {"idx": 1, "inputs": {"s": "", "t": "y"}, "outputs": "y"}], "title": "Find the Difference", "entry_fn_name": "findTheDifference"}
{"question_id": "388", "schema": {"name": "lengthLongestPath", "params": [{"name": "input", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"input": "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"}, "outputs": 20}, {"idx": 1, "inputs": {"input": "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"}, "outputs": 32}, {"idx": 2, "inputs": {"input": "a"}, "outputs": 0}], "title": "Longest Absolute File Path", "entry_fn_name": "lengthLongestPath"}
{"question_id": "387", "schema": {"name": "firstUniqChar", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leetcode"}, "outputs": 0}, {"idx": 1, "inputs": {"s": "loveleetcode"}, "outputs": 2}, {"idx": 2, "inputs": {"s": "aabb"}, "outputs": -1}], "title": "First Unique Character in a String", "entry_fn_name": "firstUniqChar"}
{"question_id": "386", "schema": {"name": "lexicalOrder", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 13}, "outputs": [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]}, {"idx": 1, "inputs": {"n": 2}, "outputs": [1, 2]}], "title": "Lexicographical Numbers", "entry_fn_name": "lexicalOrder"}
{"question_id": "385", "schema": {"name": "deserialize", "params": [{"name": "s", "type": "string"}], "return": {"type": "NestedInteger"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"s": "324"}, "outputs": 324}, {"idx": 1, "inputs": {"s": "[123,[456,[789]]]"}, "outputs": [123, [456, [789]]]}], "title": "Mini Parser", "entry_fn_name": "deserialize"}
{"question_id": "383", "schema": {"name": "canConstruct", "params": [{"name": "ransomNote", "type": "string"}, {"name": "magazine", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"ransomNote": "a", "magazine": "b"}, "outputs": false}, {"idx": 1, "inputs": {"ransomNote": "aa", "magazine": "ab"}, "outputs": false}, {"idx": 2, "inputs": {"ransomNote": "aa", "magazine": "aab"}, "outputs": true}], "title": "Ransom Note", "entry_fn_name": "canConstruct"}
{"question_id": "378", "schema": {"name": "kthSmallest", "params": [{"name": "matrix", "type": "integer[][]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 5, 9], [10, 11, 13], [12, 13, 15]], "k": 8}, "outputs": 13}, {"idx": 1, "inputs": {"matrix": [[-5]], "k": 1}, "outputs": -5}], "title": "Kth Smallest Element in a Sorted Matrix", "entry_fn_name": "kthSmallest"}
{"question_id": "377", "schema": {"name": "combinationSum4", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3], "target": 4}, "outputs": 7}, {"idx": 1, "inputs": {"nums": [9], "target": 3}, "outputs": 0}], "title": "Combination Sum IV", "entry_fn_name": "combinationSum4"}
{"question_id": "376", "schema": {"name": "wiggleMaxLength", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 7, 4, 9, 2, 5]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [1, 17, 5, 10, 13, 15, 10, 5, 16, 8]}, "outputs": 7}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 4, 5, 6, 7, 8, 9]}, "outputs": 2}], "title": "Wiggle Subsequence", "entry_fn_name": "wiggleMaxLength"}
{"question_id": "375", "schema": {"name": "getMoneyAmount", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10}, "outputs": 16}, {"idx": 1, "inputs": {"n": 1}, "outputs": 0}, {"idx": 2, "inputs": {"n": 2}, "outputs": 1}], "title": "Guess Number Higher or Lower II", "entry_fn_name": "getMoneyAmount"}
{"question_id": "374", "schema": {"name": "guessNumber", "params": [{"name": "n", "type": "integer"}, {"name": "pick", "type": "integer"}], "return": {"type": "integer"}, "manual": true, "languages": ["cpp", "java", "python", "c", "csharp", "javascript", "ruby", "swift", "golang", "python3", "scala", "kotlin", "rust", "php", "typescript"]}, "test_cases": [{"idx": 0, "inputs": {"n": 10, "pick": 6}, "outputs": 6}, {"idx": 1, "inputs": {"n": 1, "pick": 1}, "outputs": 1}, {"idx": 2, "inputs": {"n": 2, "pick": 1}, "outputs": 1}], "title": "Guess Number Higher or Lower", "entry_fn_name": "guessNumber"}
{"question_id": "373", "schema": {"name": "kSmallestPairs", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 7, 11], "nums2": [2, 4, 6], "k": 3}, "outputs": [[1, 2], [1, 4], [1, 6]]}, {"idx": 1, "inputs": {"nums1": [1, 1, 2], "nums2": [1, 2, 3], "k": 2}, "outputs": [[1, 1], [1, 1]]}, {"idx": 2, "inputs": {"nums1": [1, 2], "nums2": [3], "k": 3}, "outputs": [[1, 3], [2, 3]]}], "title": "Find K Pairs with Smallest Sums", "entry_fn_name": "kSmallestPairs"}
{"question_id": "372", "schema": {"name": "superPow", "params": [{"name": "a", "type": "integer"}, {"name": "b", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": 2, "b": [3]}, "outputs": 8}, {"idx": 1, "inputs": {"a": 2, "b": [1, 0]}, "outputs": 1024}, {"idx": 2, "inputs": {"a": 1, "b": [4, 3, 3, 8, 5, 2]}, "outputs": 1}], "title": "Super Pow", "entry_fn_name": "superPow"}
{"question_id": "371", "schema": {"name": "getSum", "params": [{"name": "a", "type": "integer"}, {"name": "b", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"a": 1, "b": 2}, "outputs": 3}, {"idx": 1, "inputs": {"a": 2, "b": 3}, "outputs": 5}], "title": "Sum of Two Integers", "entry_fn_name": "getSum"}
{"question_id": "368", "schema": {"name": "largestDivisibleSubset", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"nums": [1, 2, 4, 8]}, "outputs": [1, 2, 4, 8]}], "title": "Largest Divisible Subset", "entry_fn_name": "largestDivisibleSubset"}
{"question_id": "367", "schema": {"name": "isPerfectSquare", "params": [{"name": "num", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"num": 16}, "outputs": true}, {"idx": 1, "inputs": {"num": 14}, "outputs": false}], "title": "Valid Perfect Square", "entry_fn_name": "isPerfectSquare"}
{"question_id": "365", "schema": {"name": "canMeasureWater", "params": [{"name": "jug1Capacity", "type": "integer"}, {"name": "jug2Capacity", "type": "integer"}, {"name": "targetCapacity", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"jug1Capacity": 3, "jug2Capacity": 5, "targetCapacity": 4}, "outputs": true}, {"idx": 1, "inputs": {"jug1Capacity": 2, "jug2Capacity": 6, "targetCapacity": 5}, "outputs": false}, {"idx": 2, "inputs": {"jug1Capacity": 1, "jug2Capacity": 2, "targetCapacity": 3}, "outputs": true}], "title": "Water and Jug Problem", "entry_fn_name": "canMeasureWater"}
{"question_id": "363", "schema": {"name": "maxSumSubmatrix", "params": [{"name": "matrix", "type": "integer[][]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 0, 1], [0, -2, 3]], "k": 2}, "outputs": 2}, {"idx": 1, "inputs": {"matrix": [[2, 2, -1]], "k": 3}, "outputs": 3}], "title": "Max Sum of Rectangle No Larger Than K", "entry_fn_name": "maxSumSubmatrix"}
{"question_id": "357", "schema": {"name": "countNumbersWithUniqueDigits", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 91}, {"idx": 1, "inputs": {"n": 0}, "outputs": 1}], "title": "Count Numbers with Unique Digits", "entry_fn_name": "countNumbersWithUniqueDigits"}
{"question_id": "354", "schema": {"name": "maxEnvelopes", "params": [{"name": "envelopes", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"envelopes": [[5, 4], [6, 4], [6, 7], [2, 3]]}, "outputs": 3}, {"idx": 1, "inputs": {"envelopes": [[1, 1], [1, 1], [1, 1]]}, "outputs": 1}], "title": "Russian Doll Envelopes", "entry_fn_name": "maxEnvelopes"}
{"question_id": "350", "schema": {"name": "intersect", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 2, 1], "nums2": [2, 2]}, "outputs": [2, 2]}, {"idx": 1, "inputs": {"nums1": [4, 9, 5], "nums2": [9, 4, 9, 8, 4]}, "outputs": [4, 9]}], "title": "Intersection of Two Arrays II", "entry_fn_name": "intersect"}
{"question_id": "349", "schema": {"name": "intersection", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 2, 1], "nums2": [2, 2]}, "outputs": [2]}, {"idx": 1, "inputs": {"nums1": [4, 9, 5], "nums2": [9, 4, 9, 8, 4]}, "outputs": [9, 4]}], "title": "Intersection of Two Arrays", "entry_fn_name": "intersection"}
{"question_id": "347", "schema": {"name": "topKFrequent", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 1, 2, 2, 3], "k": 2}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"nums": [1], "k": 1}, "outputs": [1]}], "title": "Top K Frequent Elements", "entry_fn_name": "topKFrequent"}
{"question_id": "345", "schema": {"name": "reverseVowels", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "hello"}, "outputs": "holle"}, {"idx": 1, "inputs": {"s": "leetcode"}, "outputs": "leotcede"}], "title": "Reverse Vowels of a String", "entry_fn_name": "reverseVowels"}
{"question_id": "344", "schema": {"name": "reverseString", "params": [{"name": "s", "type": "character[]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"s": ["h", "e", "l", "l", "o"]}, "outputs": ["o", "l", "l", "e", "h"]}, {"idx": 1, "inputs": {"s": ["H", "a", "n", "n", "a", "h"]}, "outputs": ["h", "a", "n", "n", "a", "H"]}], "title": "Reverse String", "entry_fn_name": "reverseString"}
{"question_id": "343", "schema": {"name": "integerBreak", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 1}, {"idx": 1, "inputs": {"n": 10}, "outputs": 36}], "title": "Integer Break", "entry_fn_name": "integerBreak"}
{"question_id": "342", "schema": {"name": "isPowerOfFour", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 16}, "outputs": true}, {"idx": 1, "inputs": {"n": 5}, "outputs": false}, {"idx": 2, "inputs": {"n": 1}, "outputs": true}], "title": "Power of Four", "entry_fn_name": "isPowerOfFour"}
{"question_id": "338", "schema": {"name": "countBits", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": [0, 1, 1]}, {"idx": 1, "inputs": {"n": 5}, "outputs": [0, 1, 1, 2, 1, 2]}], "title": "Counting Bits", "entry_fn_name": "countBits"}
{"question_id": "337", "schema": {"name": "rob", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 2, 3, null, 3, null, 1]}, "outputs": 7}, {"idx": 1, "inputs": {"root": [3, 4, 5, 1, 3, null, 1]}, "outputs": 9}], "title": "House Robber III", "entry_fn_name": "rob"}
{"question_id": "336", "schema": {"name": "palindromePairs", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "list<list<integer>>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["abcd", "dcba", "lls", "s", "sssll"]}, "outputs": [[0, 1], [1, 0], [3, 2], [2, 4]]}, {"idx": 1, "inputs": {"words": ["bat", "tab", "cat"]}, "outputs": [[0, 1], [1, 0]]}, {"idx": 2, "inputs": {"words": ["a", ""]}, "outputs": [[0, 1], [1, 0]]}], "title": "Palindrome Pairs", "entry_fn_name": "palindromePairs"}
{"question_id": "335", "schema": {"name": "isSelfCrossing", "params": [{"name": "distance", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"distance": [2, 1, 1, 2]}, "outputs": true}, {"idx": 1, "inputs": {"distance": [1, 2, 3, 4]}, "outputs": false}, {"idx": 2, "inputs": {"distance": [1, 1, 1, 1]}, "outputs": true}], "title": "Self Crossing", "entry_fn_name": "isSelfCrossing"}
{"question_id": "334", "schema": {"name": "increasingTriplet", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [5, 4, 3, 2, 1]}, "outputs": false}, {"idx": 2, "inputs": {"nums": [2, 1, 5, 0, 4, 6]}, "outputs": true}], "title": "Increasing Triplet Subsequence", "entry_fn_name": "increasingTriplet"}
{"question_id": "332", "schema": {"name": "findItinerary", "params": [{"name": "tickets", "type": "list<list<string>>"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"tickets": [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]}, "outputs": ["JFK", "MUC", "LHR", "SFO", "SJC"]}, {"idx": 1, "inputs": {"tickets": [["JFK", "SFO"], ["JFK", "ATL"], ["SFO", "ATL"], ["ATL", "JFK"], ["ATL", "SFO"]]}, "outputs": ["JFK", "ATL", "JFK", "SFO", "ATL", "SFO"]}], "title": "Reconstruct Itinerary", "entry_fn_name": "findItinerary"}
{"question_id": "331", "schema": {"name": "isValidSerialization", "params": [{"name": "preorder", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"preorder": "9,3,4,#,#,1,#,#,2,#,6,#,#"}, "outputs": true}, {"idx": 1, "inputs": {"preorder": "1,#"}, "outputs": false}, {"idx": 2, "inputs": {"preorder": "9,#,#,1"}, "outputs": false}], "title": "Verify Preorder Serialization of a Binary Tree", "entry_fn_name": "isValidSerialization"}
{"question_id": "329", "schema": {"name": "longestIncreasingPath", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[9, 9, 4], [6, 6, 8], [2, 1, 1]]}, "outputs": 4}, {"idx": 1, "inputs": {"matrix": [[3, 4, 5], [3, 2, 6], [2, 2, 1]]}, "outputs": 4}, {"idx": 2, "inputs": {"matrix": [[1]]}, "outputs": 1}], "title": "Longest Increasing Path in a Matrix", "entry_fn_name": "longestIncreasingPath"}
{"question_id": "328", "schema": {"name": "oddEvenList", "params": [{"name": "head", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5]}, "outputs": [1, 3, 5, 2, 4]}, {"idx": 1, "inputs": {"head": [2, 1, 3, 5, 6, 4, 7]}, "outputs": [2, 3, 6, 7, 1, 5, 4]}], "title": "Odd Even Linked List", "entry_fn_name": "oddEvenList"}
{"question_id": "327", "schema": {"name": "countRangeSum", "params": [{"name": "nums", "type": "integer[]"}, {"name": "lower", "type": "integer"}, {"name": "upper", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-2, 5, -1], "lower": -2, "upper": 2}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [0], "lower": 0, "upper": 0}, "outputs": 1}], "title": "Count of Range Sum", "entry_fn_name": "countRangeSum"}
{"question_id": "326", "schema": {"name": "isPowerOfThree", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 27}, "outputs": true}, {"idx": 1, "inputs": {"n": 0}, "outputs": false}, {"idx": 2, "inputs": {"n": 9}, "outputs": true}], "title": "Power of Three", "entry_fn_name": "isPowerOfThree"}
{"question_id": "324", "schema": {"name": "wiggleSort", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "void"}, "output": {"paramindex": 0}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 5, 1, 1, 6, 4]}, "outputs": [1, 6, 1, 5, 1, 4]}, {"idx": 1, "inputs": {"nums": [1, 3, 2, 2, 3, 1]}, "outputs": [2, 3, 1, 3, 1, 2]}], "title": "Wiggle Sort II", "entry_fn_name": "wiggleSort"}
{"question_id": "322", "schema": {"name": "coinChange", "params": [{"name": "coins", "type": "integer[]"}, {"name": "amount", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"coins": [1, 2, 5], "amount": 11}, "outputs": 3}, {"idx": 1, "inputs": {"coins": [2], "amount": 3}, "outputs": -1}, {"idx": 2, "inputs": {"coins": [1], "amount": 0}, "outputs": 0}], "title": "Coin Change", "entry_fn_name": "coinChange"}
{"question_id": "321", "schema": {"name": "maxNumber", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [3, 4, 6, 5], "nums2": [9, 1, 2, 5, 8, 3], "k": 5}, "outputs": [9, 8, 6, 5, 3]}, {"idx": 1, "inputs": {"nums1": [6, 7], "nums2": [6, 0, 4], "k": 5}, "outputs": [6, 7, 6, 0, 4]}, {"idx": 2, "inputs": {"nums1": [3, 9], "nums2": [8, 9], "k": 3}, "outputs": [9, 8, 9]}], "title": "Create Maximum Number", "entry_fn_name": "maxNumber"}
{"question_id": "319", "schema": {"name": "bulbSwitch", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 1}, {"idx": 1, "inputs": {"n": 0}, "outputs": 0}, {"idx": 2, "inputs": {"n": 1}, "outputs": 1}], "title": "Bulb Switcher", "entry_fn_name": "bulbSwitch"}
{"question_id": "318", "schema": {"name": "maxProduct", "params": [{"name": "words", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]}, "outputs": 16}, {"idx": 1, "inputs": {"words": ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]}, "outputs": 4}, {"idx": 2, "inputs": {"words": ["a", "aa", "aaa", "aaaa"]}, "outputs": 0}], "title": "Maximum Product of Word Lengths", "entry_fn_name": "maxProduct"}
{"question_id": "316", "schema": {"name": "removeDuplicateLetters", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "bcabc"}, "outputs": "abc"}, {"idx": 1, "inputs": {"s": "cbacdcbc"}, "outputs": "acdb"}], "title": "Remove Duplicate Letters", "entry_fn_name": "removeDuplicateLetters"}
{"question_id": "315", "schema": {"name": "countSmaller", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 2, 6, 1]}, "outputs": [2, 1, 1, 0]}, {"idx": 1, "inputs": {"nums": [-1]}, "outputs": [0]}, {"idx": 2, "inputs": {"nums": [-1, -1]}, "outputs": [0, 0]}], "title": "Count of Smaller Numbers After Self", "entry_fn_name": "countSmaller"}
{"question_id": "313", "schema": {"name": "nthSuperUglyNumber", "params": [{"name": "n", "type": "integer"}, {"name": "primes", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 12, "primes": [2, 7, 13, 19]}, "outputs": 32}, {"idx": 1, "inputs": {"n": 1, "primes": [2, 3, 5]}, "outputs": 1}], "title": "Super Ugly Number", "entry_fn_name": "nthSuperUglyNumber"}
{"question_id": "312", "schema": {"name": "maxCoins", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 1, 5, 8]}, "outputs": 167}, {"idx": 1, "inputs": {"nums": [1, 5]}, "outputs": 10}], "title": "Burst Balloons", "entry_fn_name": "maxCoins"}
{"question_id": "310", "schema": {"name": "findMinHeightTrees", "params": [{"name": "n", "type": "integer"}, {"name": "edges", "type": "integer[][]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "edges": [[1, 0], [1, 2], [1, 3]]}, "outputs": [1]}, {"idx": 1, "inputs": {"n": 6, "edges": [[3, 0], [3, 1], [3, 2], [3, 4], [5, 4]]}, "outputs": [3, 4]}], "title": "Minimum Height Trees", "entry_fn_name": "findMinHeightTrees"}
{"question_id": "309", "schema": {"name": "maxProfit", "params": [{"name": "prices", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [1, 2, 3, 0, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"prices": [1]}, "outputs": 0}], "title": "Best Time to Buy and Sell Stock with Cooldown", "entry_fn_name": "maxProfit"}
{"question_id": "306", "schema": {"name": "isAdditiveNumber", "params": [{"name": "num", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {}, "outputs": true}, {"idx": 1, "inputs": {}, "outputs": true}], "title": "Additive Number", "entry_fn_name": "isAdditiveNumber"}
{"question_id": "301", "schema": {"name": "removeInvalidParentheses", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "()())()"}, "outputs": ["(())()", "()()()"]}, {"idx": 1, "inputs": {"s": "(a)())()"}, "outputs": ["(a())()", "(a)()()"]}, {"idx": 2, "inputs": {"s": ")("}, "outputs": [""]}], "title": "Remove Invalid Parentheses", "entry_fn_name": "removeInvalidParentheses"}
{"question_id": "300", "schema": {"name": "lengthOfLIS", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 9, 2, 5, 3, 7, 101, 18]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [0, 1, 0, 3, 2, 3]}, "outputs": 4}, {"idx": 2, "inputs": {"nums": [7, 7, 7, 7, 7, 7, 7]}, "outputs": 1}], "title": "Longest Increasing Subsequence", "entry_fn_name": "lengthOfLIS"}
{"question_id": "299", "schema": {"name": "getHint", "params": [{"name": "secret", "type": "string"}, {"name": "guess", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"secret": "1807", "guess": "7810"}, "outputs": "1A3B"}, {"idx": 1, "inputs": {"secret": "1123", "guess": "0111"}, "outputs": "1A1B"}], "title": "Bulls and Cows", "entry_fn_name": "getHint"}
{"question_id": "292", "schema": {"name": "canWinNim", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": false}, {"idx": 1, "inputs": {"n": 1}, "outputs": true}, {"idx": 2, "inputs": {"n": 2}, "outputs": true}], "title": "Nim Game", "entry_fn_name": "canWinNim"}
{"question_id": "290", "schema": {"name": "wordPattern", "params": [{"name": "pattern", "type": "string"}, {"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"pattern": "abba", "s": "dog cat cat dog"}, "outputs": true}, {"idx": 1, "inputs": {"pattern": "abba", "s": "dog cat cat fish"}, "outputs": false}, {"idx": 2, "inputs": {"pattern": "aaaa", "s": "dog cat cat dog"}, "outputs": false}], "title": "Word Pattern", "entry_fn_name": "wordPattern"}
{"question_id": "289", "schema": {"name": "gameOfLife", "params": [{"name": "board", "type": "integer[][]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"board": [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]}, "outputs": [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]}, {"idx": 1, "inputs": {"board": [[1, 1], [1, 0]]}, "outputs": [[1, 1], [1, 1]]}], "title": "Game of Life", "entry_fn_name": "gameOfLife"}
{"question_id": "287", "schema": {"name": "findDuplicate", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 4, 2, 2]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [3, 1, 3, 4, 2]}, "outputs": 3}], "title": "Find the Duplicate Number", "entry_fn_name": "findDuplicate"}
{"question_id": "283", "schema": {"name": "moveZeroes", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 0, 3, 12]}, "outputs": [1, 3, 12, 0, 0]}, {"idx": 1, "inputs": {"nums": [0]}, "outputs": [0]}], "title": "Move Zeroes", "entry_fn_name": "moveZeroes"}
{"question_id": "282", "schema": {"name": "addOperators", "params": [{"name": "num", "type": "string"}, {"name": "target", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"num": "123", "target": 6}, "outputs": ["1*2*3", "1+2+3"]}, {"idx": 1, "inputs": {"num": "232", "target": 8}, "outputs": ["2*3+2", "2+3*2"]}, {"idx": 2, "inputs": {"num": "3456237490", "target": 9191}, "outputs": []}], "title": "Expression Add Operators", "entry_fn_name": "addOperators"}
{"question_id": "279", "schema": {"name": "numSquares", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 12}, "outputs": 3}, {"idx": 1, "inputs": {"n": 13}, "outputs": 2}], "title": "Perfect Squares", "entry_fn_name": "numSquares"}
{"question_id": "278", "schema": {"name": "firstBadVersion", "params": [{"name": "n", "type": "integer"}, {"name": "bad", "type": "integer"}], "return": {"type": "integer"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"n": 5, "bad": 4}, "outputs": 4}, {"idx": 1, "inputs": {"n": 1, "bad": 1}, "outputs": 1}], "title": "First Bad Version", "entry_fn_name": "firstBadVersion"}
{"question_id": "275", "schema": {"name": "hIndex", "params": [{"name": "citations", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"citations": [0, 1, 3, 5, 6]}, "outputs": 3}, {"idx": 1, "inputs": {"citations": [1, 2, 100]}, "outputs": 2}], "title": "H-Index II", "entry_fn_name": "hIndex"}
{"question_id": "274", "schema": {"name": "hIndex", "params": [{"name": "citations", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"citations": [3, 0, 6, 1, 5]}, "outputs": 3}, {"idx": 1, "inputs": {"citations": [1, 3, 1]}, "outputs": 1}], "title": "H-Index", "entry_fn_name": "hIndex"}
{"question_id": "273", "schema": {"name": "numberToWords", "params": [{"name": "num", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": 123}, "outputs": "One Hundred Twenty Three"}, {"idx": 1, "inputs": {"num": 12345}, "outputs": "Twelve Thousand Three Hundred Forty Five"}, {"idx": 2, "inputs": {"num": 1234567}, "outputs": "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"}], "title": "Integer to English Words", "entry_fn_name": "numberToWords"}
{"question_id": "268", "schema": {"name": "missingNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 0, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [0, 1]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [9, 6, 4, 2, 3, 5, 7, 0, 1]}, "outputs": 8}], "title": "Missing Number", "entry_fn_name": "missingNumber"}
{"question_id": "264", "schema": {"name": "nthUglyNumber", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10}, "outputs": 12}, {"idx": 1, "inputs": {"n": 1}, "outputs": 1}], "title": "Ugly Number II", "entry_fn_name": "nthUglyNumber"}
{"question_id": "263", "schema": {"name": "isUgly", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 6}, "outputs": true}, {"idx": 1, "inputs": {"n": 1}, "outputs": true}, {"idx": 2, "inputs": {"n": 14}, "outputs": false}], "title": "Ugly Number", "entry_fn_name": "isUgly"}
{"question_id": "260", "schema": {"name": "singleNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 1, 3, 2, 5]}, "outputs": [3, 5]}, {"idx": 1, "inputs": {"nums": [-1, 0]}, "outputs": [-1, 0]}, {"idx": 2, "inputs": {"nums": [0, 1]}, "outputs": [1, 0]}], "title": "Single Number III", "entry_fn_name": "singleNumber"}
{"question_id": "258", "schema": {"name": "addDigits", "params": [{"name": "num", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"num": 38}, "outputs": 2}, {"idx": 1, "inputs": {"num": 0}, "outputs": 0}], "title": "Add Digits", "entry_fn_name": "addDigits"}
{"question_id": "257", "schema": {"name": "binaryTreePaths", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<string>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, null, 5]}, "outputs": ["1->2->5", "1->3"]}, {"idx": 1, "inputs": {"root": [1]}, "outputs": ["1"]}], "title": "Binary Tree Paths", "entry_fn_name": "binaryTreePaths"}
{"question_id": "242", "schema": {"name": "isAnagram", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "anagram", "t": "nagaram"}, "outputs": true}, {"idx": 1, "inputs": {"s": "rat", "t": "car"}, "outputs": false}], "title": "Valid Anagram", "entry_fn_name": "isAnagram"}
{"question_id": "241", "schema": {"name": "diffWaysToCompute", "params": [{"name": "expression", "type": "string"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"expression": "2-1-1"}, "outputs": [0, 2]}, {"idx": 1, "inputs": {"expression": "2*3-4*5"}, "outputs": [-34, -14, -10, -10, 10]}], "title": "Different Ways to Add Parentheses", "entry_fn_name": "diffWaysToCompute"}
{"question_id": "240", "schema": {"name": "searchMatrix", "params": [{"name": "matrix", "type": "integer[][]"}, {"name": "target", "type": "integer"}], "return": {"type": "boolean"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], "target": 5}, "outputs": true}, {"idx": 1, "inputs": {"matrix": [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], "target": 20}, "outputs": false}], "title": "Search a 2D Matrix II", "entry_fn_name": "searchMatrix"}
{"question_id": "239", "schema": {"name": "maxSlidingWindow", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, -1, -3, 5, 3, 6, 7], "k": 3}, "outputs": [3, 3, 5, 5, 6, 7]}, {"idx": 1, "inputs": {"nums": [1], "k": 1}, "outputs": [1]}], "title": "Sliding Window Maximum", "entry_fn_name": "maxSlidingWindow"}
{"question_id": "238", "schema": {"name": "productExceptSelf", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": [24, 12, 8, 6]}, {"idx": 1, "inputs": {"nums": [-1, 1, 0, -3, 3]}, "outputs": [0, 0, 9, 0, 0]}], "title": "Product of Array Except Self", "entry_fn_name": "productExceptSelf"}
{"question_id": "237", "schema": {"name": "deleteNode", "params": [{"name": "head", "type": "ListNode"}, {"name": "node", "type": "integer"}], "return": {"type": "void"}, "output": {"paramindex": 0}, "manual": true, "languages": ["cpp", "java", "python", "c", "csharp", "javascript", "ruby", "swift", "golang", "python3", "scala", "kotlin", "php", "typescript"]}, "test_cases": [{"idx": 0, "inputs": {"head": [4, 5, 1, 9], "node": 5}, "outputs": [4, 1, 9]}, {"idx": 1, "inputs": {"head": [4, 5, 1, 9], "node": 1}, "outputs": [4, 5, 9]}], "title": "Delete Node in a Linked List", "entry_fn_name": "deleteNode"}
{"question_id": "236", "schema": {"name": "lowestCommonAncestor", "params": [{"name": "root", "type": "TreeNode"}, {"name": "p", "type": "integer"}, {"name": "q", "type": "integer"}], "return": {"type": "TreeNode"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4], "p": 5, "q": 1}, "outputs": 3}, {"idx": 1, "inputs": {"root": [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4], "p": 5, "q": 4}, "outputs": 5}, {"idx": 2, "inputs": {"root": [1, 2], "p": 1, "q": 2}, "outputs": 1}], "title": "Lowest Common Ancestor of a Binary Tree", "entry_fn_name": "lowestCommonAncestor"}
{"question_id": "235", "schema": {"name": "lowestCommonAncestor", "params": [{"name": "root", "type": "TreeNode"}, {"name": "p", "type": "integer"}, {"name": "q", "type": "integer"}], "return": {"type": "TreeNode"}, "manual": true}, "test_cases": [{"idx": 0, "inputs": {"root": [6, 2, 8, 0, 4, 7, 9, null, null, 3, 5], "p": 2, "q": 8}, "outputs": 6}, {"idx": 1, "inputs": {"root": [6, 2, 8, 0, 4, 7, 9, null, null, 3, 5], "p": 2, "q": 4}, "outputs": 2}, {"idx": 2, "inputs": {"root": [2, 1], "p": 2, "q": 1}, "outputs": 2}], "title": "Lowest Common Ancestor of a Binary Search Tree", "entry_fn_name": "lowestCommonAncestor"}
{"question_id": "234", "schema": {"name": "isPalindrome", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 2, 1]}, "outputs": true}, {"idx": 1, "inputs": {"head": [1, 2]}, "outputs": false}], "title": "Palindrome Linked List", "entry_fn_name": "isPalindrome"}
{"question_id": "233", "schema": {"name": "countDigitOne", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 13}, "outputs": 6}, {"idx": 1, "inputs": {"n": 0}, "outputs": 0}], "title": "Number of Digit One", "entry_fn_name": "countDigitOne"}
{"question_id": "231", "schema": {"name": "isPowerOfTwo", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": true}, {"idx": 1, "inputs": {"n": 16}, "outputs": true}, {"idx": 2, "inputs": {"n": 3}, "outputs": false}], "title": "Power of Two", "entry_fn_name": "isPowerOfTwo"}
{"question_id": "230", "schema": {"name": "kthSmallest", "params": [{"name": "root", "type": "TreeNode"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 1, 4, null, 2], "k": 1}, "outputs": 1}, {"idx": 1, "inputs": {"root": [5, 3, 6, 2, 4, null, null, 1], "k": 3}, "outputs": 3}], "title": "Kth Smallest Element in a BST", "entry_fn_name": "kthSmallest"}
{"question_id": "229", "schema": {"name": "majorityElement", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 3]}, "outputs": [3]}, {"idx": 1, "inputs": {"nums": [1]}, "outputs": [1]}, {"idx": 2, "inputs": {"nums": [1, 2]}, "outputs": [1, 2]}], "title": "Majority Element II", "entry_fn_name": "majorityElement"}
{"question_id": "228", "schema": {"name": "summaryRanges", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [0, 1, 2, 4, 5, 7]}, "outputs": ["0->2", "4->5", "7"]}, {"idx": 1, "inputs": {"nums": [0, 2, 3, 4, 6, 8, 9]}, "outputs": ["0", "2->4", "6", "8->9"]}], "title": "Summary Ranges", "entry_fn_name": "summaryRanges"}
{"question_id": "227", "schema": {"name": "calculate", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "3+2*2"}, "outputs": 7}, {"idx": 1, "inputs": {"s": " 3/2 "}, "outputs": 1}, {"idx": 2, "inputs": {"s": " 3+5 / 2 "}, "outputs": 5}], "title": "Basic Calculator II", "entry_fn_name": "calculate"}
{"question_id": "226", "schema": {"name": "invertTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "TreeNode"}}, "test_cases": [{"idx": 0, "inputs": {"root": [4, 2, 7, 1, 3, 6, 9]}, "outputs": [4, 7, 2, 9, 6, 3, 1]}, {"idx": 1, "inputs": {"root": [2, 1, 3]}, "outputs": [2, 3, 1]}, {"idx": 2, "inputs": {"root": []}, "outputs": []}], "title": "Invert Binary Tree", "entry_fn_name": "invertTree"}
{"question_id": "224", "schema": {"name": "calculate", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "1 + 1"}, "outputs": 2}, {"idx": 1, "inputs": {"s": " 2-1 + 2 "}, "outputs": 3}, {"idx": 2, "inputs": {"s": "(1+(4+5+2)-3)+(6+8)"}, "outputs": 23}], "title": "Basic Calculator", "entry_fn_name": "calculate"}
{"question_id": "223", "schema": {"name": "computeArea", "params": [{"name": "ax1", "type": "integer"}, {"name": "ay1", "type": "integer"}, {"name": "ax2", "type": "integer"}, {"name": "ay2", "type": "integer"}, {"name": "bx1", "type": "integer"}, {"name": "by1", "type": "integer"}, {"name": "bx2", "type": "integer"}, {"name": "by2", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"ax1": -3, "ay1": 0, "ax2": 3, "ay2": 4, "bx1": 0, "by1": -1, "bx2": 9, "by2": 2}, "outputs": 45}, {"idx": 1, "inputs": {"ax1": -2, "ay1": -2, "ax2": 2, "ay2": 2, "bx1": -2, "by1": -2, "bx2": 2, "by2": 2}, "outputs": 16}], "title": "Rectangle Area", "entry_fn_name": "computeArea"}
{"question_id": "222", "schema": {"name": "countNodes", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, 4, 5, 6]}, "outputs": 6}, {"idx": 1, "inputs": {"root": []}, "outputs": 0}, {"idx": 2, "inputs": {"root": [1]}, "outputs": 1}], "title": "Count Complete Tree Nodes", "entry_fn_name": "countNodes"}
{"question_id": "221", "schema": {"name": "maximalSquare", "params": [{"name": "matrix", "type": "character[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]}, "outputs": 4}, {"idx": 1, "inputs": {"matrix": [["0", "1"], ["1", "0"]]}, "outputs": 1}, {"idx": 2, "inputs": {"matrix": [["0"]]}, "outputs": 0}], "title": "Maximal Square", "entry_fn_name": "maximalSquare"}
{"question_id": "220", "schema": {"name": "containsNearbyAlmostDuplicate", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}, {"name": "t", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1], "k": 3, "t": 0}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 0, 1, 1], "k": 1, "t": 2}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 5, 9, 1, 5, 9], "k": 2, "t": 3}, "outputs": false}], "title": "Contains Duplicate III", "entry_fn_name": "containsNearbyAlmostDuplicate"}
{"question_id": "219", "schema": {"name": "containsNearbyDuplicate", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1], "k": 3}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 0, 1, 1], "k": 1}, "outputs": true}, {"idx": 2, "inputs": {"nums": [1, 2, 3, 1, 2, 3], "k": 2}, "outputs": false}], "title": "Contains Duplicate II", "entry_fn_name": "containsNearbyDuplicate"}
{"question_id": "218", "schema": {"name": "getSkyline", "params": [{"name": "buildings", "type": "integer[][]"}], "return": {"type": "list<list<integer>>", "colsize": 2, "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"buildings": [[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]]}, "outputs": [[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]]}, {"idx": 1, "inputs": {"buildings": [[0, 2, 3], [2, 5, 3]]}, "outputs": [[0, 3], [5, 0]]}], "title": "The Skyline Problem", "entry_fn_name": "getSkyline"}
{"question_id": "217", "schema": {"name": "containsDuplicate", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 4]}, "outputs": false}, {"idx": 2, "inputs": {"nums": [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]}, "outputs": true}], "title": "Contains Duplicate", "entry_fn_name": "containsDuplicate"}
{"question_id": "216", "schema": {"name": "combinationSum3", "params": [{"name": "k", "type": "integer"}, {"name": "n", "type": "integer"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"k": 3, "n": 7}, "outputs": [[1, 2, 4]]}, {"idx": 1, "inputs": {"k": 3, "n": 9}, "outputs": [[1, 2, 6], [1, 3, 5], [2, 3, 4]]}, {"idx": 2, "inputs": {"k": 4, "n": 1}, "outputs": []}], "title": "Combination Sum III", "entry_fn_name": "combinationSum3"}
{"question_id": "215", "schema": {"name": "findKthLargest", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 1, 5, 6, 4], "k": 2}, "outputs": 5}, {"idx": 1, "inputs": {"nums": [3, 2, 3, 1, 2, 4, 5, 5, 6], "k": 4}, "outputs": 4}], "title": "Kth Largest Element in an Array", "entry_fn_name": "findKthLargest"}
{"question_id": "214", "schema": {"name": "shortestPalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aacecaaa"}, "outputs": "aaacecaaa"}, {"idx": 1, "inputs": {"s": "abcd"}, "outputs": "dcbabcd"}], "title": "Shortest Palindrome", "entry_fn_name": "shortestPalindrome"}
{"question_id": "213", "schema": {"name": "rob", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [1, 2, 3, 1]}, "outputs": 4}, {"idx": 2, "inputs": {"nums": [1, 2, 3]}, "outputs": 3}], "title": "House Robber II", "entry_fn_name": "rob"}
{"question_id": "212", "schema": {"name": "findWords", "params": [{"name": "board", "type": "character[][]"}, {"name": "words", "type": "string[]"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"board": [["o", "a", "a", "n"], ["e", "t", "a", "e"], ["i", "h", "k", "r"], ["i", "f", "l", "v"]], "words": ["oath", "pea", "eat", "rain"]}, "outputs": ["eat", "oath"]}, {"idx": 1, "inputs": {"board": [["a", "b"], ["c", "d"]], "words": ["abcb"]}, "outputs": []}], "title": "Word Search II", "entry_fn_name": "findWords"}
{"question_id": "210", "schema": {"name": "findOrder", "params": [{"name": "numCourses", "type": "integer"}, {"name": "prerequisites", "type": "integer[][]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"numCourses": 2, "prerequisites": [[1, 0]]}, "outputs": [0, 1]}, {"idx": 1, "inputs": {"numCourses": 4, "prerequisites": [[1, 0], [2, 0], [3, 1], [3, 2]]}, "outputs": [0, 2, 1, 3]}, {"idx": 2, "inputs": {"numCourses": 1, "prerequisites": []}, "outputs": [0]}], "title": "Course Schedule II", "entry_fn_name": "findOrder"}
{"question_id": "209", "schema": {"name": "minSubArrayLen", "params": [{"name": "target", "type": "integer"}, {"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"target": 7, "nums": [2, 3, 1, 2, 4, 3]}, "outputs": 2}, {"idx": 1, "inputs": {"target": 4, "nums": [1, 4, 4]}, "outputs": 1}, {"idx": 2, "inputs": {"target": 11, "nums": [1, 1, 1, 1, 1, 1, 1, 1]}, "outputs": 0}], "title": "Minimum Size Subarray Sum", "entry_fn_name": "minSubArrayLen"}
{"question_id": "207", "schema": {"name": "canFinish", "params": [{"name": "numCourses", "type": "integer"}, {"name": "prerequisites", "type": "integer[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"numCourses": 2, "prerequisites": [[1, 0]]}, "outputs": true}, {"idx": 1, "inputs": {"numCourses": 2, "prerequisites": [[1, 0], [0, 1]]}, "outputs": false}], "title": "Course Schedule", "entry_fn_name": "canFinish"}
{"question_id": "206", "schema": {"name": "reverseList", "params": [{"name": "head", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5]}, "outputs": [5, 4, 3, 2, 1]}, {"idx": 1, "inputs": {"head": [1, 2]}, "outputs": [2, 1]}, {"idx": 2, "inputs": {"head": []}, "outputs": []}], "title": "Reverse Linked List", "entry_fn_name": "reverseList"}
{"question_id": "205", "schema": {"name": "isIsomorphic", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "egg", "t": "add"}, "outputs": true}, {"idx": 1, "inputs": {"s": "foo", "t": "bar"}, "outputs": false}, {"idx": 2, "inputs": {"s": "paper", "t": "title"}, "outputs": true}], "title": "Isomorphic Strings", "entry_fn_name": "isIsomorphic"}
{"question_id": "204", "schema": {"name": "countPrimes", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 10}, "outputs": 4}, {"idx": 1, "inputs": {"n": 0}, "outputs": 0}, {"idx": 2, "inputs": {"n": 1}, "outputs": 0}], "title": "Count Primes", "entry_fn_name": "countPrimes"}
{"question_id": "203", "schema": {"name": "removeElements", "params": [{"name": "head", "type": "ListNode", "dealloc": false}, {"name": "val", "type": "integer"}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 6, 3, 4, 5, 6], "val": 6}, "outputs": [1, 2, 3, 4, 5]}, {"idx": 1, "inputs": {"head": [], "val": 1}, "outputs": []}, {"idx": 2, "inputs": {"head": [7, 7, 7, 7], "val": 7}, "outputs": []}], "title": "Remove Linked List Elements", "entry_fn_name": "removeElements"}
{"question_id": "202", "schema": {"name": "isHappy", "params": [{"name": "n", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"n": 19}, "outputs": true}, {"idx": 1, "inputs": {"n": 2}, "outputs": false}], "title": "Happy Number", "entry_fn_name": "isHappy"}
{"question_id": "201", "schema": {"name": "rangeBitwiseAnd", "params": [{"name": "left", "type": "integer"}, {"name": "right", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"left": 5, "right": 7}, "outputs": 4}, {"idx": 1, "inputs": {"left": 0, "right": 0}, "outputs": 0}, {"idx": 2, "inputs": {"left": 1, "right": 2147483647}, "outputs": 0}], "title": "Bitwise AND of Numbers Range", "entry_fn_name": "rangeBitwiseAnd"}
{"question_id": "200", "schema": {"name": "numIslands", "params": [{"name": "grid", "type": "character[][]"}], "return": {"type": "integer"}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"grid": [["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]]}, "outputs": 1}, {"idx": 1, "inputs": {"grid": [["1", "1", "0", "0", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]}, "outputs": 3}], "title": "Number of Islands", "entry_fn_name": "numIslands"}
{"question_id": "199", "schema": {"name": "rightSideView", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<integer>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3, null, 5, null, 4]}, "outputs": [1, 3, 4]}, {"idx": 1, "inputs": {"root": [1, null, 3]}, "outputs": [1, 3]}, {"idx": 2, "inputs": {"root": []}, "outputs": []}], "title": "Binary Tree Right Side View", "entry_fn_name": "rightSideView"}
{"question_id": "198", "schema": {"name": "rob", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [2, 7, 9, 3, 1]}, "outputs": 12}], "title": "House Robber", "entry_fn_name": "rob"}
{"question_id": "189", "schema": {"name": "rotate", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 4, 5, 6, 7], "k": 3}, "outputs": [5, 6, 7, 1, 2, 3, 4]}, {"idx": 1, "inputs": {"nums": [-1, -100, 3, 99], "k": 2}, "outputs": [3, 99, -1, -100]}], "title": "Rotate Array", "entry_fn_name": "rotate"}
{"question_id": "188", "schema": {"name": "maxProfit", "params": [{"name": "k", "type": "integer"}, {"name": "prices", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"k": 2, "prices": [2, 4, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"k": 2, "prices": [3, 2, 6, 5, 0, 3]}, "outputs": 7}], "title": "Best Time to Buy and Sell Stock IV", "entry_fn_name": "maxProfit"}
{"question_id": "187", "schema": {"name": "findRepeatedDnaSequences", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"}, "outputs": ["AAAAACCCCC", "CCCCCAAAAA"]}, {"idx": 1, "inputs": {"s": "AAAAAAAAAAAAA"}, "outputs": ["AAAAAAAAAA"]}], "title": "Repeated DNA Sequences", "entry_fn_name": "findRepeatedDnaSequences"}
{"question_id": "179", "schema": {"name": "largestNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [10, 2]}, "outputs": "210"}, {"idx": 1, "inputs": {"nums": [3, 30, 34, 5, 9]}, "outputs": "9534330"}], "title": "Largest Number", "entry_fn_name": "largestNumber"}
{"question_id": "174", "schema": {"name": "calculateMinimumHP", "params": [{"name": "dungeon", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"dungeon": [[-2, -3, 3], [-5, -10, 1], [10, 30, -5]]}, "outputs": 7}, {"idx": 1, "inputs": {"dungeon": [[0]]}, "outputs": 1}], "title": "Dungeon Game", "entry_fn_name": "calculateMinimumHP"}
{"question_id": "172", "schema": {"name": "trailingZeroes", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 0}, {"idx": 1, "inputs": {"n": 5}, "outputs": 1}, {"idx": 2, "inputs": {"n": 0}, "outputs": 0}], "title": "Factorial Trailing Zeroes", "entry_fn_name": "trailingZeroes"}
{"question_id": "171", "schema": {"name": "titleToNumber", "params": [{"name": "columnTitle", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"columnTitle": "A"}, "outputs": 1}, {"idx": 1, "inputs": {"columnTitle": "AB"}, "outputs": 28}, {"idx": 2, "inputs": {"columnTitle": "ZY"}, "outputs": 701}], "title": "Excel Sheet Column Number", "entry_fn_name": "titleToNumber"}
{"question_id": "169", "schema": {"name": "majorityElement", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 2, 3]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [2, 2, 1, 1, 1, 2, 2]}, "outputs": 2}], "title": "Majority Element", "entry_fn_name": "majorityElement"}
{"question_id": "168", "schema": {"name": "convertToTitle", "params": [{"name": "columnNumber", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"columnNumber": 1}, "outputs": "A"}, {"idx": 1, "inputs": {"columnNumber": 28}, "outputs": "AB"}, {"idx": 2, "inputs": {"columnNumber": 701}, "outputs": "ZY"}], "title": "Excel Sheet Column Title", "entry_fn_name": "convertToTitle"}
{"question_id": "166", "schema": {"name": "fractionToDecimal", "params": [{"name": "numerator", "type": "integer"}, {"name": "denominator", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"numerator": 1, "denominator": 2}, "outputs": "0.5"}, {"idx": 1, "inputs": {"numerator": 2, "denominator": 1}, "outputs": "2"}, {"idx": 2, "inputs": {"numerator": 4, "denominator": 333}, "outputs": "0.(012)"}], "title": "Fraction to Recurring Decimal", "entry_fn_name": "fractionToDecimal"}
{"question_id": "165", "schema": {"name": "compareVersion", "params": [{"name": "version1", "type": "string"}, {"name": "version2", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"version1": "1.01", "version2": "1.001"}, "outputs": 0}, {"idx": 1, "inputs": {"version1": "1.0", "version2": "1.0.0"}, "outputs": 0}, {"idx": 2, "inputs": {"version1": "0.1", "version2": "1.1"}, "outputs": -1}], "title": "Compare Version Numbers", "entry_fn_name": "compareVersion"}
{"question_id": "164", "schema": {"name": "maximumGap", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 6, 9, 1]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [10]}, "outputs": 0}], "title": "Maximum Gap", "entry_fn_name": "maximumGap"}
{"question_id": "162", "schema": {"name": "findPeakElement", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3, 1]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 2, 1, 3, 5, 6, 4]}, "outputs": 5}], "title": "Find Peak Element", "entry_fn_name": "findPeakElement"}
{"question_id": "154", "schema": {"name": "findMin", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 5]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [2, 2, 2, 0, 1]}, "outputs": 0}], "title": "Find Minimum in Rotated Sorted Array II", "entry_fn_name": "findMin"}
{"question_id": "153", "schema": {"name": "findMin", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [3, 4, 5, 1, 2]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [4, 5, 6, 7, 0, 1, 2]}, "outputs": 0}, {"idx": 2, "inputs": {"nums": [11, 13, 15, 17]}, "outputs": 11}], "title": "Find Minimum in Rotated Sorted Array", "entry_fn_name": "findMin"}
{"question_id": "152", "schema": {"name": "maxProduct", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, -2, 4]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [-2, 0, -1]}, "outputs": 0}], "title": "Maximum Product Subarray", "entry_fn_name": "maxProduct"}
{"question_id": "151", "schema": {"name": "reverseWords", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "the sky is blue"}, "outputs": "blue is sky the"}, {"idx": 1, "inputs": {"s": "  hello world  "}, "outputs": "world hello"}, {"idx": 2, "inputs": {"s": "a good   example"}, "outputs": "example good a"}], "title": "Reverse Words in a String", "entry_fn_name": "reverseWords"}
{"question_id": "150", "schema": {"name": "evalRPN", "params": [{"name": "tokens", "type": "string[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"tokens": ["2", "1", "+", "3", "*"]}, "outputs": 9}, {"idx": 1, "inputs": {"tokens": ["4", "13", "5", "/", "+"]}, "outputs": 6}, {"idx": 2, "inputs": {"tokens": ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]}, "outputs": 22}], "title": "Evaluate Reverse Polish Notation", "entry_fn_name": "evalRPN"}
{"question_id": "149", "schema": {"name": "maxPoints", "params": [{"name": "points", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"points": [[1, 1], [2, 2], [3, 3]]}, "outputs": 3}, {"idx": 1, "inputs": {"points": [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]}, "outputs": 4}], "title": "Max Points on a Line", "entry_fn_name": "maxPoints"}
{"question_id": "148", "schema": {"name": "sortList", "params": [{"name": "head", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [4, 2, 1, 3]}, "outputs": [1, 2, 3, 4]}, {"idx": 1, "inputs": {"head": [-1, 5, 3, 4, 0]}, "outputs": [-1, 0, 3, 4, 5]}, {"idx": 2, "inputs": {"head": []}, "outputs": []}], "title": "Sort List", "entry_fn_name": "sortList"}
{"question_id": "147", "schema": {"name": "insertionSortList", "params": [{"name": "head", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [4, 2, 1, 3]}, "outputs": [1, 2, 3, 4]}, {"idx": 1, "inputs": {"head": [-1, 5, 3, 4, 0]}, "outputs": [-1, 0, 3, 4, 5]}], "title": "Insertion Sort List", "entry_fn_name": "insertionSortList"}
{"question_id": "145", "schema": {"name": "postorderTraversal", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<integer>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 2, 3]}, "outputs": [3, 2, 1]}, {"idx": 1, "inputs": {"root": []}, "outputs": []}, {"idx": 2, "inputs": {"root": [1]}, "outputs": [1]}], "title": "Binary Tree Postorder Traversal", "entry_fn_name": "postorderTraversal"}
{"question_id": "144", "schema": {"name": "preorderTraversal", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<integer>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 2, 3]}, "outputs": [1, 2, 3]}, {"idx": 1, "inputs": {"root": []}, "outputs": []}, {"idx": 2, "inputs": {"root": [1]}, "outputs": [1]}], "title": "Binary Tree Preorder Traversal", "entry_fn_name": "preorderTraversal"}
{"question_id": "143", "schema": {"name": "reorderList", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4]}, "outputs": [1, 4, 2, 3]}, {"idx": 1, "inputs": {"head": [1, 2, 3, 4, 5]}, "outputs": [1, 5, 2, 4, 3]}], "title": "Reorder List", "entry_fn_name": "reorderList"}
{"question_id": "141", "schema": {"name": "hasCycle", "params": [{"name": "head", "type": "ListNode"}, {"name": "pos", "type": "integer"}], "return": {"type": "boolean"}, "manual": true, "languages": ["cpp", "java", "python", "c", "csharp", "javascript", "ruby", "swift", "golang", "python3", "scala", "kotlin", "php", "typescript"]}, "test_cases": [{"idx": 0, "inputs": {"head": [3, 2, 0, -4], "pos": 1}, "outputs": true}, {"idx": 1, "inputs": {"head": [1, 2], "pos": 0}, "outputs": true}, {"idx": 2, "inputs": {"head": [1], "pos": -1}, "outputs": false}], "title": "Linked List Cycle", "entry_fn_name": "hasCycle"}
{"question_id": "140", "schema": {"name": "wordBreak", "params": [{"name": "s", "type": "string"}, {"name": "wordDict", "type": "list<string>"}], "return": {"type": "list<string>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"s": "catsanddog", "wordDict": ["cat", "cats", "and", "sand", "dog"]}, "outputs": ["cats and dog", "cat sand dog"]}, {"idx": 1, "inputs": {"s": "pineapplepenapple", "wordDict": ["apple", "pen", "applepen", "pine", "pineapple"]}, "outputs": ["pine apple pen apple", "pineapple pen apple", "pine applepen apple"]}, {"idx": 2, "inputs": {"s": "catsandog", "wordDict": ["cats", "dog", "sand", "and", "cat"]}, "outputs": []}], "title": "Word Break II", "entry_fn_name": "wordBreak"}
{"question_id": "139", "schema": {"name": "wordBreak", "params": [{"name": "s", "type": "string"}, {"name": "wordDict", "type": "list<string>"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "leetcode", "wordDict": ["leet", "code"]}, "outputs": true}, {"idx": 1, "inputs": {"s": "applepenapple", "wordDict": ["apple", "pen"]}, "outputs": true}, {"idx": 2, "inputs": {"s": "catsandog", "wordDict": ["cats", "dog", "sand", "and", "cat"]}, "outputs": false}], "title": "Word Break", "entry_fn_name": "wordBreak"}
{"question_id": "138", "schema": {"name": "copyRandomList", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "golang", "swift", "kotlin", "ruby", "c", "scala", "php", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"head": [[7, null], [13, 0], [11, 4], [10, 2], [1, 0]]}, "outputs": [[7, null], [13, 0], [11, 4], [10, 2], [1, 0]]}, {"idx": 1, "inputs": {"head": [[1, 1], [2, 1]]}, "outputs": [[1, 1], [2, 1]]}, {"idx": 2, "inputs": {"head": [[3, null], [3, 0], [3, null]]}, "outputs": [[3, null], [3, 0], [3, null]]}], "title": "Copy List with Random Pointer", "entry_fn_name": "copyRandomList"}
{"question_id": "137", "schema": {"name": "singleNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 2, 3, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [0, 1, 0, 1, 0, 1, 99]}, "outputs": 99}], "title": "Single Number II", "entry_fn_name": "singleNumber"}
{"question_id": "136", "schema": {"name": "singleNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 2, 1]}, "outputs": 1}, {"idx": 1, "inputs": {"nums": [4, 1, 2, 1, 2]}, "outputs": 4}, {"idx": 2, "inputs": {"nums": [1]}, "outputs": 1}], "title": "Single Number", "entry_fn_name": "singleNumber"}
{"question_id": "135", "schema": {"name": "candy", "params": [{"name": "ratings", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"ratings": [1, 0, 2]}, "outputs": 5}, {"idx": 1, "inputs": {"ratings": [1, 2, 2]}, "outputs": 4}], "title": "Candy", "entry_fn_name": "candy"}
{"question_id": "134", "schema": {"name": "canCompleteCircuit", "params": [{"name": "gas", "type": "integer[]"}, {"name": "cost", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"gas": [1, 2, 3, 4, 5], "cost": [3, 4, 5, 1, 2]}, "outputs": 3}, {"idx": 1, "inputs": {"gas": [2, 3, 4], "cost": [3, 4, 3]}, "outputs": -1}], "title": "Gas Station", "entry_fn_name": "canCompleteCircuit"}
{"question_id": "133", "schema": {"name": "cloneGraph", "params": [{"name": "edges", "type": "integer[][]"}], "return": {"type": "boolean"}, "languages": ["cpp", "java", "python", "csharp", "javascript", "python3", "golang", "swift", "kotlin", "ruby", "c", "scala", "php", "typescript"], "manual": true}, "test_cases": [{"idx": 0, "inputs": {"adjList": [[2, 4], [1, 3], [2, 4], [1, 3]]}, "outputs": [[2, 4], [1, 3], [2, 4], [1, 3]]}, {"idx": 1, "inputs": {"adjList": [[]]}, "outputs": [[]]}, {"idx": 2, "inputs": {"adjList": []}, "outputs": []}], "title": "Clone Graph", "entry_fn_name": "cloneGraph"}
{"question_id": "132", "schema": {"name": "minCut", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aab"}, "outputs": 1}, {"idx": 1, "inputs": {"s": "a"}, "outputs": 0}, {"idx": 2, "inputs": {"s": "ab"}, "outputs": 1}], "title": "Palindrome Partitioning II", "entry_fn_name": "minCut"}
{"question_id": "131", "schema": {"name": "partition", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<list<string>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"s": "aab"}, "outputs": [["a", "a", "b"], ["aa", "b"]]}, {"idx": 1, "inputs": {"s": "a"}, "outputs": [["a"]]}], "title": "Palindrome Partitioning", "entry_fn_name": "partition"}
{"question_id": "130", "schema": {"name": "solve", "params": [{"name": "board", "type": "character[][]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"board": [["X", "X", "X", "X"], ["X", "O", "O", "X"], ["X", "X", "O", "X"], ["X", "O", "X", "X"]]}, "outputs": [["X", "X", "X", "X"], ["X", "X", "X", "X"], ["X", "X", "X", "X"], ["X", "O", "X", "X"]]}, {"idx": 1, "inputs": {"board": [["X"]]}, "outputs": [["X"]]}], "title": "Surrounded Regions", "entry_fn_name": "solve"}
{"question_id": "129", "schema": {"name": "sumNumbers", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3]}, "outputs": 25}, {"idx": 1, "inputs": {"root": [4, 9, 0, 5, 1]}, "outputs": 1026}], "title": "Sum Root to Leaf Numbers", "entry_fn_name": "sumNumbers"}
{"question_id": "128", "schema": {"name": "longestConsecutive", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [100, 4, 200, 1, 3, 2]}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]}, "outputs": 9}], "title": "Longest Consecutive Sequence", "entry_fn_name": "longestConsecutive"}
{"question_id": "127", "schema": {"name": "ladderLength", "params": [{"name": "beginWord", "type": "string"}, {"name": "endWord", "type": "string"}, {"name": "wordList", "type": "list<string>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"beginWord": "hit", "endWord": "cog", "wordList": ["hot", "dot", "dog", "lot", "log", "cog"]}, "outputs": 5}, {"idx": 1, "inputs": {"beginWord": "hit", "endWord": "cog", "wordList": ["hot", "dot", "dog", "lot", "log"]}, "outputs": 0}], "title": "Word Ladder", "entry_fn_name": "ladderLength"}
{"question_id": "126", "schema": {"name": "findLadders", "params": [{"name": "beginWord", "type": "string"}, {"name": "endWord", "type": "string"}, {"name": "wordList", "type": "list<string>"}], "return": {"type": "list<list<string>>"}}, "test_cases": [{"idx": 0, "inputs": {"beginWord": "hit", "endWord": "cog", "wordList": ["hot", "dot", "dog", "lot", "log", "cog"]}, "outputs": [["hit", "hot", "dot", "dog", "cog"], ["hit", "hot", "lot", "log", "cog"]]}, {"idx": 1, "inputs": {"beginWord": "hit", "endWord": "cog", "wordList": ["hot", "dot", "dog", "lot", "log"]}, "outputs": []}], "title": "Word Ladder II", "entry_fn_name": "findLadders"}
{"question_id": "125", "schema": {"name": "isPalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "A man, a plan, a canal: Panama"}, "outputs": true}, {"idx": 1, "inputs": {"s": "race a car"}, "outputs": false}, {"idx": 2, "inputs": {"s": " "}, "outputs": true}], "title": "Valid Palindrome", "entry_fn_name": "isPalindrome"}
{"question_id": "124", "schema": {"name": "maxPathSum", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 3]}, "outputs": 6}, {"idx": 1, "inputs": {"root": [-10, 9, 20, null, null, 15, 7]}, "outputs": 42}], "title": "Binary Tree Maximum Path Sum", "entry_fn_name": "maxPathSum"}
{"question_id": "123", "schema": {"name": "maxProfit", "params": [{"name": "prices", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [3, 3, 5, 0, 0, 3, 1, 4]}, "outputs": 6}, {"idx": 1, "inputs": {"prices": [1, 2, 3, 4, 5]}, "outputs": 4}, {"idx": 2, "inputs": {"prices": [7, 6, 4, 3, 1]}, "outputs": 0}], "title": "Best Time to Buy and Sell Stock III", "entry_fn_name": "maxProfit"}
{"question_id": "122", "schema": {"name": "maxProfit", "params": [{"name": "prices", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [7, 1, 5, 3, 6, 4]}, "outputs": 7}, {"idx": 1, "inputs": {"prices": [1, 2, 3, 4, 5]}, "outputs": 4}, {"idx": 2, "inputs": {"prices": [7, 6, 4, 3, 1]}, "outputs": 0}], "title": "Best Time to Buy and Sell Stock II", "entry_fn_name": "maxProfit"}
{"question_id": "121", "schema": {"name": "maxProfit", "params": [{"name": "prices", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"prices": [7, 1, 5, 3, 6, 4]}, "outputs": 5}, {"idx": 1, "inputs": {"prices": [7, 6, 4, 3, 1]}, "outputs": 0}], "title": "Best Time to Buy and Sell Stock", "entry_fn_name": "maxProfit"}
{"question_id": "120", "schema": {"name": "minimumTotal", "params": [{"name": "triangle", "type": "list<list<integer>>"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"triangle": [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]}, "outputs": 11}, {"idx": 1, "inputs": {"triangle": [[-10]]}, "outputs": -10}], "title": "Triangle", "entry_fn_name": "minimumTotal"}
{"question_id": "119", "schema": {"name": "getRow", "params": [{"name": "rowIndex", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"rowIndex": 3}, "outputs": [1, 3, 3, 1]}, {"idx": 1, "inputs": {"rowIndex": 0}, "outputs": [1]}, {"idx": 2, "inputs": {"rowIndex": 1}, "outputs": [1, 1]}], "title": "Pascal's Triangle II", "entry_fn_name": "getRow"}
{"question_id": "118", "schema": {"name": "generate", "params": [{"name": "numRows", "type": "integer"}], "return": {"type": "list<list<integer>>", "dealloc": true, "rowsize": "param_1"}}, "test_cases": [{"idx": 0, "inputs": {"numRows": 5}, "outputs": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]}, {"idx": 1, "inputs": {"numRows": 1}, "outputs": [[1]]}], "title": "Pascal's Triangle", "entry_fn_name": "generate"}
{"question_id": "115", "schema": {"name": "numDistinct", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "rabbbit", "t": "rabbit"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "babgbag", "t": "bag"}, "outputs": 5}], "title": "Distinct Subsequences", "entry_fn_name": "numDistinct"}
{"question_id": "114", "schema": {"name": "flatten", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 5, 3, 4, null, 6]}, "outputs": [1, null, 2, null, 3, null, 4, null, 5, null, 6]}, {"idx": 1, "inputs": {"root": []}, "outputs": []}, {"idx": 2, "inputs": {"root": [0]}, "outputs": [0]}], "title": "Flatten Binary Tree to Linked List", "entry_fn_name": "flatten"}
{"question_id": "113", "schema": {"name": "pathSum", "params": [{"name": "root", "type": "TreeNode"}, {"name": "targetSum", "type": "integer"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, 5, 1], "targetSum": 22}, "outputs": [[5, 4, 11, 2], [5, 8, 4, 5]]}, {"idx": 1, "inputs": {"root": [1, 2, 3], "targetSum": 5}, "outputs": []}, {"idx": 2, "inputs": {"root": [1, 2], "targetSum": 0}, "outputs": []}], "title": "Path Sum II", "entry_fn_name": "pathSum"}
{"question_id": "112", "schema": {"name": "hasPathSum", "params": [{"name": "root", "type": "TreeNode"}, {"name": "targetSum", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, null, 1], "targetSum": 22}, "outputs": true}, {"idx": 1, "inputs": {"root": [1, 2, 3], "targetSum": 5}, "outputs": false}, {"idx": 2, "inputs": {"root": [], "targetSum": 0}, "outputs": false}], "title": "Path Sum", "entry_fn_name": "hasPathSum"}
{"question_id": "111", "schema": {"name": "minDepth", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": 2}, {"idx": 1, "inputs": {"root": [2, null, 3, null, 4, null, 5, null, 6]}, "outputs": 5}], "title": "Minimum Depth of Binary Tree", "entry_fn_name": "minDepth"}
{"question_id": "110", "schema": {"name": "isBalanced", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": true}, {"idx": 1, "inputs": {"root": [1, 2, 2, 3, 3, null, null, 4, 4]}, "outputs": false}, {"idx": 2, "inputs": {"root": []}, "outputs": true}], "title": "Balanced Binary Tree", "entry_fn_name": "isBalanced"}
{"question_id": "109", "schema": {"name": "sortedListToBST", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "TreeNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [-10, -3, 0, 5, 9]}, "outputs": [0, -3, 9, -10, null, 5]}, {"idx": 1, "inputs": {"head": []}, "outputs": []}], "title": "Convert Sorted List to Binary Search Tree", "entry_fn_name": "sortedListToBST"}
{"question_id": "108", "schema": {"name": "sortedArrayToBST", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "TreeNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-10, -3, 0, 5, 9]}, "outputs": [0, -3, 9, -10, null, 5]}, {"idx": 1, "inputs": {"nums": [1, 3]}, "outputs": [3, 1]}], "title": "Convert Sorted Array to Binary Search Tree", "entry_fn_name": "sortedArrayToBST"}
{"question_id": "107", "schema": {"name": "levelOrderBottom", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": [[15, 7], [9, 20], [3]]}, {"idx": 1, "inputs": {"root": [1]}, "outputs": [[1]]}, {"idx": 2, "inputs": {"root": []}, "outputs": []}], "title": "Binary Tree Level Order Traversal II", "entry_fn_name": "levelOrderBottom"}
{"question_id": "106", "schema": {"name": "buildTree", "params": [{"name": "inorder", "type": "integer[]"}, {"name": "postorder", "type": "integer[]"}], "return": {"type": "TreeNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"inorder": [9, 3, 15, 20, 7], "postorder": [9, 15, 7, 20, 3]}, "outputs": [3, 9, 20, null, null, 15, 7]}, {"idx": 1, "inputs": {"inorder": [-1], "postorder": [-1]}, "outputs": [-1]}], "title": "Construct Binary Tree from Inorder and Postorder Traversal", "entry_fn_name": "buildTree"}
{"question_id": "105", "schema": {"name": "buildTree", "params": [{"name": "preorder", "type": "integer[]"}, {"name": "inorder", "type": "integer[]"}], "return": {"type": "TreeNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"preorder": [3, 9, 20, 15, 7], "inorder": [9, 3, 15, 20, 7]}, "outputs": [3, 9, 20, null, null, 15, 7]}, {"idx": 1, "inputs": {"preorder": [-1], "inorder": [-1]}, "outputs": [-1]}], "title": "Construct Binary Tree from Preorder and Inorder Traversal", "entry_fn_name": "buildTree"}
{"question_id": "104", "schema": {"name": "maxDepth", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": 3}, {"idx": 1, "inputs": {"root": [1, null, 2]}, "outputs": 2}], "title": "Maximum Depth of Binary Tree", "entry_fn_name": "maxDepth"}
{"question_id": "103", "schema": {"name": "zigzagLevelOrder", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": [[3], [20, 9], [15, 7]]}, {"idx": 1, "inputs": {"root": [1]}, "outputs": [[1]]}, {"idx": 2, "inputs": {"root": []}, "outputs": []}], "title": "Binary Tree Zigzag Level Order Traversal", "entry_fn_name": "zigzagLevelOrder"}
{"question_id": "102", "schema": {"name": "levelOrder", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [3, 9, 20, null, null, 15, 7]}, "outputs": [[3], [9, 20], [15, 7]]}, {"idx": 1, "inputs": {"root": [1]}, "outputs": [[1]]}, {"idx": 2, "inputs": {"root": []}, "outputs": []}], "title": "Binary Tree Level Order Traversal", "entry_fn_name": "levelOrder"}
{"question_id": "101", "schema": {"name": "isSymmetric", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 2, 2, 3, 4, 4, 3]}, "outputs": true}, {"idx": 1, "inputs": {"root": [1, 2, 2, null, 3, null, 3]}, "outputs": false}], "title": "Symmetric Tree", "entry_fn_name": "isSymmetric"}
{"question_id": "100", "schema": {"name": "isSameTree", "params": [{"name": "p", "type": "TreeNode"}, {"name": "q", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"p": [1, 2, 3], "q": [1, 2, 3]}, "outputs": true}, {"idx": 1, "inputs": {"p": [1, 2], "q": [1, null, 2]}, "outputs": false}, {"idx": 2, "inputs": {"p": [1, 2, 1], "q": [1, 1, 2]}, "outputs": false}], "title": "Same Tree", "entry_fn_name": "isSameTree"}
{"question_id": "99", "schema": {"name": "recoverTree", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, 3, null, null, 2]}, "outputs": [3, 1, null, null, 2]}, {"idx": 1, "inputs": {"root": [3, 1, 4, null, null, 2]}, "outputs": [2, 1, 4, null, null, 3]}], "title": "Recover Binary Search Tree", "entry_fn_name": "recoverTree"}
{"question_id": "98", "schema": {"name": "isValidBST", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"root": [2, 1, 3]}, "outputs": true}, {"idx": 1, "inputs": {"root": [5, 1, 4, null, null, 3, 6]}, "outputs": false}], "title": "Validate Binary Search Tree", "entry_fn_name": "isValidBST"}
{"question_id": "97", "schema": {"name": "isInterleave", "params": [{"name": "s1", "type": "string"}, {"name": "s2", "type": "string"}, {"name": "s3", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "aabcc", "s2": "dbbca", "s3": "aadbbcbcac"}, "outputs": true}, {"idx": 1, "inputs": {"s1": "aabcc", "s2": "dbbca", "s3": "aadbbbaccc"}, "outputs": false}, {"idx": 2, "inputs": {"s1": "", "s2": "", "s3": ""}, "outputs": true}], "title": "Interleaving String", "entry_fn_name": "isInterleave"}
{"question_id": "96", "schema": {"name": "numTrees", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": 5}, {"idx": 1, "inputs": {"n": 1}, "outputs": 1}], "title": "Unique Binary Search Trees", "entry_fn_name": "numTrees"}
{"question_id": "95", "schema": {"name": "generateTrees", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<TreeNode>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": [[1, null, 2, null, 3], [1, null, 3, 2], [2, 1, 3], [3, 1, null, null, 2], [3, 2, null, 1]]}, {"idx": 1, "inputs": {"n": 1}, "outputs": [[1]]}], "title": "Unique Binary Search Trees II", "entry_fn_name": "generateTrees"}
{"question_id": "94", "schema": {"name": "inorderTraversal", "params": [{"name": "root", "type": "TreeNode"}], "return": {"type": "list<integer>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"root": [1, null, 2, 3]}, "outputs": [1, 3, 2]}, {"idx": 1, "inputs": {"root": []}, "outputs": []}, {"idx": 2, "inputs": {"root": [1]}, "outputs": [1]}], "title": "Binary Tree Inorder Traversal", "entry_fn_name": "inorderTraversal"}
{"question_id": "93", "schema": {"name": "restoreIpAddresses", "params": [{"name": "s", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "25525511135"}, "outputs": ["255.255.11.135", "255.255.111.35"]}, {"idx": 1, "inputs": {"s": "0000"}, "outputs": ["0.0.0.0"]}, {"idx": 2, "inputs": {"s": "101023"}, "outputs": ["1.0.10.23", "1.0.102.3", "10.1.0.23", "10.10.2.3", "101.0.2.3"]}], "title": "Restore IP Addresses", "entry_fn_name": "restoreIpAddresses"}
{"question_id": "92", "schema": {"name": "reverseBetween", "params": [{"name": "head", "type": "ListNode", "dealloc": false}, {"name": "left", "type": "integer"}, {"name": "right", "type": "integer"}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5], "left": 2, "right": 4}, "outputs": [1, 4, 3, 2, 5]}, {"idx": 1, "inputs": {"head": [5], "left": 1, "right": 1}, "outputs": [5]}], "title": "Reverse Linked List II", "entry_fn_name": "reverseBetween"}
{"question_id": "91", "schema": {"name": "numDecodings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "12"}, "outputs": 2}, {"idx": 1, "inputs": {"s": "226"}, "outputs": 3}, {"idx": 2, "inputs": {"s": "06"}, "outputs": 0}], "title": "Decode Ways", "entry_fn_name": "numDecodings"}
{"question_id": "90", "schema": {"name": "subsetsWithDup", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 2]}, "outputs": [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]}, {"idx": 1, "inputs": {"nums": [0]}, "outputs": [[], [0]]}], "title": "Subsets II", "entry_fn_name": "subsetsWithDup"}
{"question_id": "89", "schema": {"name": "grayCode", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": [0, 1, 3, 2]}, {"idx": 1, "inputs": {"n": 1}, "outputs": [0, 1]}], "title": "Gray Code", "entry_fn_name": "grayCode"}
{"question_id": "88", "schema": {"name": "merge", "params": [{"name": "nums1", "type": "integer[]", "implicitsizeparam": false}, {"name": "m", "type": "integer"}, {"name": "nums2", "type": "integer[]", "implicitsizeparam": false}, {"name": "n", "type": "integer"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 2, 3, 0, 0, 0], "m": 3, "nums2": [2, 5, 6], "n": 3}, "outputs": [1, 2, 2, 3, 5, 6]}, {"idx": 1, "inputs": {"nums1": [1], "m": 1, "nums2": [], "n": 0}, "outputs": [1]}, {"idx": 2, "inputs": {"nums1": [0], "m": 0, "nums2": [1], "n": 1}, "outputs": [1]}], "title": "Merge Sorted Array", "entry_fn_name": "merge"}
{"question_id": "87", "schema": {"name": "isScramble", "params": [{"name": "s1", "type": "string"}, {"name": "s2", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s1": "great", "s2": "rgeat"}, "outputs": true}, {"idx": 1, "inputs": {"s1": "abcde", "s2": "caebd"}, "outputs": false}, {"idx": 2, "inputs": {"s1": "a", "s2": "a"}, "outputs": true}], "title": "Scramble String", "entry_fn_name": "isScramble"}
{"question_id": "86", "schema": {"name": "partition", "params": [{"name": "head", "type": "ListNode", "dealloc": false}, {"name": "x", "type": "integer"}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 4, 3, 2, 5, 2], "x": 3}, "outputs": [1, 2, 2, 4, 3, 5]}, {"idx": 1, "inputs": {"head": [2, 1], "x": 2}, "outputs": [1, 2]}], "title": "Partition List", "entry_fn_name": "partition"}
{"question_id": "85", "schema": {"name": "maximalRectangle", "params": [{"name": "matrix", "type": "character[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]]}, "outputs": 6}, {"idx": 1, "inputs": {"matrix": [["0"]]}, "outputs": 0}, {"idx": 2, "inputs": {"matrix": [["1"]]}, "outputs": 1}], "title": "Maximal Rectangle", "entry_fn_name": "maximalRectangle"}
{"question_id": "84", "schema": {"name": "largestRectangleArea", "params": [{"name": "heights", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"heights": [2, 1, 5, 6, 2, 3]}, "outputs": 10}, {"idx": 1, "inputs": {"heights": [2, 4]}, "outputs": 4}], "title": "Largest Rectangle in Histogram", "entry_fn_name": "largestRectangleArea"}
{"question_id": "83", "schema": {"name": "deleteDuplicates", "params": [{"name": "head", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 1, 2]}, "outputs": [1, 2]}, {"idx": 1, "inputs": {"head": [1, 1, 2, 3, 3]}, "outputs": [1, 2, 3]}], "title": "Remove Duplicates from Sorted List", "entry_fn_name": "deleteDuplicates"}
{"question_id": "82", "schema": {"name": "deleteDuplicates", "params": [{"name": "head", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 3, 4, 4, 5]}, "outputs": [1, 2, 5]}, {"idx": 1, "inputs": {"head": [1, 1, 1, 2, 3]}, "outputs": [2, 3]}], "title": "Remove Duplicates from Sorted List II", "entry_fn_name": "deleteDuplicates"}
{"question_id": "81", "schema": {"name": "search", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 5, 6, 0, 0, 1, 2], "target": 0}, "outputs": true}, {"idx": 1, "inputs": {"nums": [2, 5, 6, 0, 0, 1, 2], "target": 3}, "outputs": false}], "title": "Search in Rotated Sorted Array II", "entry_fn_name": "search"}
{"question_id": "79", "schema": {"name": "exist", "params": [{"name": "board", "type": "character[][]"}, {"name": "word", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"board": [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], "word": "ABCCED"}, "outputs": true}, {"idx": 1, "inputs": {"board": [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], "word": "SEE"}, "outputs": true}, {"idx": 2, "inputs": {"board": [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], "word": "ABCB"}, "outputs": false}], "title": "Word Search", "entry_fn_name": "exist"}
{"question_id": "78", "schema": {"name": "subsets", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]}, {"idx": 1, "inputs": {"nums": [0]}, "outputs": [[], [0]]}], "title": "Subsets", "entry_fn_name": "subsets"}
{"question_id": "77", "schema": {"name": "combine", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"n": 4, "k": 2}, "outputs": [[2, 4], [3, 4], [2, 3], [1, 2], [1, 3], [1, 4]]}, {"idx": 1, "inputs": {"n": 1, "k": 1}, "outputs": [[1]]}], "title": "Combinations", "entry_fn_name": "combine"}
{"question_id": "76", "schema": {"name": "minWindow", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "ADOBECODEBANC", "t": "ABC"}, "outputs": "BANC"}, {"idx": 1, "inputs": {"s": "a", "t": "a"}, "outputs": "a"}, {"idx": 2, "inputs": {"s": "a", "t": "aa"}, "outputs": ""}], "title": "Minimum Window Substring", "entry_fn_name": "minWindow"}
{"question_id": "75", "schema": {"name": "sortColors", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "void"}, "output": {"paramindex": 0}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 0, 2, 1, 1, 0]}, "outputs": [0, 0, 1, 1, 2, 2]}, {"idx": 1, "inputs": {"nums": [2, 0, 1]}, "outputs": [0, 1, 2]}], "title": "Sort Colors", "entry_fn_name": "sortColors"}
{"question_id": "74", "schema": {"name": "searchMatrix", "params": [{"name": "matrix", "type": "integer[][]"}, {"name": "target", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], "target": 3}, "outputs": true}, {"idx": 1, "inputs": {"matrix": [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], "target": 13}, "outputs": false}], "title": "Search a 2D Matrix", "entry_fn_name": "searchMatrix"}
{"question_id": "73", "schema": {"name": "setZeroes", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "void"}, "output": {"paramindex": 0}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 1, 1], [1, 0, 1], [1, 1, 1]]}, "outputs": [[1, 0, 1], [0, 0, 0], [1, 0, 1]]}, {"idx": 1, "inputs": {"matrix": [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]}, "outputs": [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]]}], "title": "Set Matrix Zeroes", "entry_fn_name": "setZeroes"}
{"question_id": "72", "schema": {"name": "minDistance", "params": [{"name": "word1", "type": "string"}, {"name": "word2", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"word1": "horse", "word2": "ros"}, "outputs": 3}, {"idx": 1, "inputs": {"word1": "intention", "word2": "execution"}, "outputs": 5}], "title": "Edit Distance", "entry_fn_name": "minDistance"}
{"question_id": "71", "schema": {"name": "simplifyPath", "params": [{"name": "path", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"path": "/home/"}, "outputs": "/home"}, {"idx": 1, "inputs": {"path": "/../"}, "outputs": "/"}, {"idx": 2, "inputs": {"path": "/home//foo/"}, "outputs": "/home/foo"}], "title": "Simplify Path", "entry_fn_name": "simplifyPath"}
{"question_id": "70", "schema": {"name": "climbStairs", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 2}, "outputs": 2}, {"idx": 1, "inputs": {"n": 3}, "outputs": 3}], "title": "Climbing Stairs", "entry_fn_name": "climbStairs"}
{"question_id": "69", "schema": {"name": "mySqrt", "params": [{"name": "x", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"x": 4}, "outputs": 2}, {"idx": 1, "inputs": {"x": 8}, "outputs": 2}], "title": "Sqrt(x)", "entry_fn_name": "mySqrt"}
{"question_id": "68", "schema": {"name": "fullJustify", "params": [{"name": "words", "type": "string[]"}, {"name": "maxWidth", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"words": ["This", "is", "an", "example", "of", "text", "justification."], "maxWidth": 16}, "outputs": ["This    is    an", "example  of text", "justification.  "]}, {"idx": 1, "inputs": {"words": ["What", "must", "be", "acknowledgment", "shall", "be"], "maxWidth": 16}, "outputs": ["What   must   be", "acknowledgment  ", "shall be        "]}, {"idx": 2, "inputs": {"words": ["Science", "is", "what", "we", "understand", "well", "enough", "to", "explain", "to", "a", "computer.", "Art", "is", "everything", "else", "we", "do"], "maxWidth": 20}, "outputs": ["Science  is  what we", "understand      well", "enough to explain to", "a  computer.  Art is", "everything  else  we", "do                  "]}], "title": "Text Justification", "entry_fn_name": "fullJustify"}
{"question_id": "67", "schema": {"name": "addBinary", "params": [{"name": "a", "type": "string"}, {"name": "b", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"a": "11", "b": "1"}, "outputs": "100"}, {"idx": 1, "inputs": {"a": "1010", "b": "1011"}, "outputs": "10101"}], "title": "Add Binary", "entry_fn_name": "addBinary"}
{"question_id": "66", "schema": {"name": "plusOne", "params": [{"name": "digits", "type": "integer[]"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"digits": [1, 2, 3]}, "outputs": [1, 2, 4]}, {"idx": 1, "inputs": {"digits": [4, 3, 2, 1]}, "outputs": [4, 3, 2, 2]}, {"idx": 2, "inputs": {"digits": [9]}, "outputs": [1, 0]}], "title": "Plus One", "entry_fn_name": "plusOne"}
{"question_id": "65", "schema": {"name": "isNumber", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "0"}, "outputs": true}, {"idx": 1, "inputs": {"s": "e"}, "outputs": false}, {"idx": 2, "inputs": {"s": "."}, "outputs": false}], "title": "Valid Number", "entry_fn_name": "isNumber"}
{"question_id": "64", "schema": {"name": "minPathSum", "params": [{"name": "grid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"grid": [[1, 3, 1], [1, 5, 1], [4, 2, 1]]}, "outputs": 7}, {"idx": 1, "inputs": {"grid": [[1, 2, 3], [4, 5, 6]]}, "outputs": 12}], "title": "Minimum Path Sum", "entry_fn_name": "minPathSum"}
{"question_id": "63", "schema": {"name": "uniquePathsWithObstacles", "params": [{"name": "obstacleGrid", "type": "integer[][]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"obstacleGrid": [[0, 0, 0], [0, 1, 0], [0, 0, 0]]}, "outputs": 2}, {"idx": 1, "inputs": {"obstacleGrid": [[0, 1], [0, 0]]}, "outputs": 1}], "title": "Unique Paths II", "entry_fn_name": "uniquePathsWithObstacles"}
{"question_id": "62", "schema": {"name": "uniquePaths", "params": [{"name": "m", "type": "integer"}, {"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"m": 3, "n": 7}, "outputs": 28}, {"idx": 1, "inputs": {"m": 3, "n": 2}, "outputs": 3}], "title": "Unique Paths", "entry_fn_name": "uniquePaths"}
{"question_id": "61", "schema": {"name": "rotateRight", "params": [{"name": "head", "type": "ListNode", "dealloc": false}, {"name": "k", "type": "integer"}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5], "k": 2}, "outputs": [4, 5, 1, 2, 3]}, {"idx": 1, "inputs": {"head": [0, 1, 2], "k": 4}, "outputs": [2, 0, 1]}], "title": "Rotate List", "entry_fn_name": "rotateRight"}
{"question_id": "60", "schema": {"name": "getPermutation", "params": [{"name": "n", "type": "integer"}, {"name": "k", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3, "k": 3}, "outputs": "213"}, {"idx": 1, "inputs": {"n": 4, "k": 9}, "outputs": "2314"}, {"idx": 2, "inputs": {"n": 3, "k": 1}, "outputs": "123"}], "title": "Permutation Sequence", "entry_fn_name": "getPermutation"}
{"question_id": "59", "schema": {"name": "generateMatrix", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[][]", "rowsize": "param_1", "colsize": "param_1", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": [[1, 2, 3], [8, 9, 4], [7, 6, 5]]}, {"idx": 1, "inputs": {"n": 1}, "outputs": [[1]]}], "title": "Spiral Matrix II", "entry_fn_name": "generateMatrix"}
{"question_id": "58", "schema": {"name": "lengthOfLastWord", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "Hello World"}, "outputs": 5}, {"idx": 1, "inputs": {"s": "   fly me   to   the moon  "}, "outputs": 4}, {"idx": 2, "inputs": {"s": "luffy is still joyboy"}, "outputs": 6}], "title": "Length of Last Word", "entry_fn_name": "lengthOfLastWord"}
{"question_id": "57", "schema": {"name": "insert", "params": [{"name": "intervals", "type": "integer[][]"}, {"name": "newInterval", "type": "integer[]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 3], [6, 9]], "newInterval": [2, 5]}, "outputs": [[1, 5], [6, 9]]}, {"idx": 1, "inputs": {"intervals": [[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]], "newInterval": [4, 8]}, "outputs": [[1, 2], [3, 10], [12, 16]]}], "title": "Insert Interval", "entry_fn_name": "insert"}
{"question_id": "56", "schema": {"name": "merge", "params": [{"name": "intervals", "type": "integer[][]"}], "return": {"type": "integer[][]"}}, "test_cases": [{"idx": 0, "inputs": {"intervals": [[1, 3], [2, 6], [8, 10], [15, 18]]}, "outputs": [[1, 6], [8, 10], [15, 18]]}, {"idx": 1, "inputs": {"intervals": [[1, 4], [4, 5]]}, "outputs": [[1, 5]]}], "title": "Merge Intervals", "entry_fn_name": "merge"}
{"question_id": "55", "schema": {"name": "canJump", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 1, 1, 4]}, "outputs": true}, {"idx": 1, "inputs": {"nums": [3, 2, 1, 0, 4]}, "outputs": false}], "title": "Jump Game", "entry_fn_name": "canJump"}
{"question_id": "54", "schema": {"name": "spiralOrder", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "list<integer>", "size": "size_1 * col_size_1", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": [1, 2, 3, 6, 9, 8, 7, 4, 5]}, {"idx": 1, "inputs": {"matrix": [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]}, "outputs": [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]}], "title": "Spiral Matrix", "entry_fn_name": "spiralOrder"}
{"question_id": "53", "schema": {"name": "maxSubArray", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4]}, "outputs": 6}, {"idx": 1, "inputs": {"nums": [1]}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [5, 4, -1, 7, 8]}, "outputs": 23}], "title": "Maximum Subarray", "entry_fn_name": "maxSubArray"}
{"question_id": "52", "schema": {"name": "totalNQueens", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": 2}, {"idx": 1, "inputs": {"n": 1}, "outputs": 1}], "title": "N-Queens II", "entry_fn_name": "totalNQueens"}
{"question_id": "51", "schema": {"name": "solveNQueens", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<list<string>>", "colsize": "param_1", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"n": 4}, "outputs": [[".Q..", "...Q", "Q...", "..Q."], ["..Q.", "Q...", "...Q", ".Q.."]]}, {"idx": 1, "inputs": {"n": 1}, "outputs": [["Q"]]}], "title": "N-Queens", "entry_fn_name": "solveNQueens"}
{"question_id": "50", "schema": {"name": "myPow", "params": [{"name": "x", "type": "double"}, {"name": "n", "type": "integer"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"x": 2.0, "n": 10}, "outputs": 1024.0}, {"idx": 1, "inputs": {"x": 2.1, "n": 3}, "outputs": 9.261}, {"idx": 2, "inputs": {"x": 2.0, "n": -2}, "outputs": 0.25}], "title": "Pow(x, n)", "entry_fn_name": "myPow"}
{"question_id": "49", "schema": {"name": "groupAnagrams", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "list<list<string>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["eat", "tea", "tan", "ate", "nat", "bat"]}, "outputs": [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]}, {"idx": 1, "inputs": {"strs": [""]}, "outputs": [[""]]}, {"idx": 2, "inputs": {"strs": ["a"]}, "outputs": [["a"]]}], "title": "Group Anagrams", "entry_fn_name": "groupAnagrams"}
{"question_id": "48", "schema": {"name": "rotate", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"matrix": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}, "outputs": [[7, 4, 1], [8, 5, 2], [9, 6, 3]]}, {"idx": 1, "inputs": {"matrix": [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]}, "outputs": [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]}], "title": "Rotate Image", "entry_fn_name": "rotate"}
{"question_id": "47", "schema": {"name": "permuteUnique", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<list<integer>>", "colsize": "size_1", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 1, 2]}, "outputs": [[1, 1, 2], [1, 2, 1], [2, 1, 1]]}, {"idx": 1, "inputs": {"nums": [1, 2, 3]}, "outputs": [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]}], "title": "Permutations II", "entry_fn_name": "permuteUnique"}
{"question_id": "46", "schema": {"name": "permute", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<list<integer>>", "colsize": "size_1", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]}, {"idx": 1, "inputs": {"nums": [0, 1]}, "outputs": [[0, 1], [1, 0]]}, {"idx": 2, "inputs": {"nums": [1]}, "outputs": [[1]]}], "title": "Permutations", "entry_fn_name": "permute"}
{"question_id": "45", "schema": {"name": "jump", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 3, 1, 1, 4]}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [2, 3, 0, 1, 4]}, "outputs": 2}], "title": "Jump Game II", "entry_fn_name": "jump"}
{"question_id": "44", "schema": {"name": "isMatch", "params": [{"name": "s", "type": "string"}, {"name": "p", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aa", "p": "a"}, "outputs": false}, {"idx": 1, "inputs": {"s": "aa", "p": "*"}, "outputs": true}, {"idx": 2, "inputs": {"s": "cb", "p": "?a"}, "outputs": false}], "title": "Wildcard Matching", "entry_fn_name": "isMatch"}
{"question_id": "43", "schema": {"name": "multiply", "params": [{"name": "num1", "type": "string"}, {"name": "num2", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num1": "2", "num2": "3"}, "outputs": "6"}, {"idx": 1, "inputs": {"num1": "123", "num2": "456"}, "outputs": "56088"}], "title": "Multiply Strings", "entry_fn_name": "multiply"}
{"question_id": "42", "schema": {"name": "trap", "params": [{"name": "height", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"height": [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]}, "outputs": 6}, {"idx": 1, "inputs": {"height": [4, 2, 0, 3, 2, 5]}, "outputs": 9}], "title": "Trapping Rain Water", "entry_fn_name": "trap"}
{"question_id": "41", "schema": {"name": "firstMissingPositive", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 0]}, "outputs": 3}, {"idx": 1, "inputs": {"nums": [3, 4, -1, 1]}, "outputs": 2}, {"idx": 2, "inputs": {"nums": [7, 8, 9, 11, 12]}, "outputs": 1}], "title": "First Missing Positive", "entry_fn_name": "firstMissingPositive"}
{"question_id": "40", "schema": {"name": "combinationSum2", "params": [{"name": "candidates", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"candidates": [10, 1, 2, 7, 6, 1, 5], "target": 8}, "outputs": [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]}, {"idx": 1, "inputs": {"candidates": [2, 5, 2, 1, 2], "target": 5}, "outputs": [[1, 2, 2], [5]]}], "title": "Combination Sum II", "entry_fn_name": "combinationSum2"}
{"question_id": "39", "schema": {"name": "combinationSum", "params": [{"name": "candidates", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "list<list<integer>>", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"candidates": [2, 3, 6, 7], "target": 7}, "outputs": [[2, 2, 3], [7]]}, {"idx": 1, "inputs": {"candidates": [2, 3, 5], "target": 8}, "outputs": [[2, 2, 2, 2], [2, 3, 3], [3, 5]]}, {"idx": 2, "inputs": {"candidates": [2], "target": 1}, "outputs": []}], "title": "Combination Sum", "entry_fn_name": "combinationSum"}
{"question_id": "38", "schema": {"name": "countAndSay", "params": [{"name": "n", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"n": 1}, "outputs": "1"}, {"idx": 1, "inputs": {"n": 4}, "outputs": "1211"}], "title": "Count and Say", "entry_fn_name": "countAndSay"}
{"question_id": "37", "schema": {"name": "solveSudoku", "params": [{"name": "board", "type": "character[][]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"board": [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]}, "outputs": [["5", "3", "4", "6", "7", "8", "9", "1", "2"], ["6", "7", "2", "1", "9", "5", "3", "4", "8"], ["1", "9", "8", "3", "4", "2", "5", "6", "7"], ["8", "5", "9", "7", "6", "1", "4", "2", "3"], ["4", "2", "6", "8", "5", "3", "7", "9", "1"], ["7", "1", "3", "9", "2", "4", "8", "5", "6"], ["9", "6", "1", "5", "3", "7", "2", "8", "4"], ["2", "8", "7", "4", "1", "9", "6", "3", "5"], ["3", "4", "5", "2", "8", "6", "1", "7", "9"]]}], "title": "Sudoku Solver", "entry_fn_name": "solveSudoku"}
{"question_id": "36", "schema": {"name": "isValidSudoku", "params": [{"name": "board", "type": "character[][]"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"board": [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]}, "outputs": true}, {"idx": 1, "inputs": {"board": [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]}, "outputs": false}], "title": "Valid Sudoku", "entry_fn_name": "isValidSudoku"}
{"question_id": "35", "schema": {"name": "searchInsert", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 3, 5, 6], "target": 5}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [1, 3, 5, 6], "target": 2}, "outputs": 1}, {"idx": 2, "inputs": {"nums": [1, 3, 5, 6], "target": 7}, "outputs": 4}], "title": "Search Insert Position", "entry_fn_name": "searchInsert"}
{"question_id": "34", "schema": {"name": "searchRange", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer[]"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [5, 7, 7, 8, 8, 10], "target": 8}, "outputs": [3, 4]}, {"idx": 1, "inputs": {"nums": [5, 7, 7, 8, 8, 10], "target": 6}, "outputs": [-1, -1]}, {"idx": 2, "inputs": {"nums": [], "target": 0}, "outputs": [-1, -1]}], "title": "Find First and Last Position of Element in Sorted Array", "entry_fn_name": "searchRange"}
{"question_id": "33", "schema": {"name": "search", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [4, 5, 6, 7, 0, 1, 2], "target": 0}, "outputs": 4}, {"idx": 1, "inputs": {"nums": [4, 5, 6, 7, 0, 1, 2], "target": 3}, "outputs": -1}, {"idx": 2, "inputs": {"nums": [1], "target": 0}, "outputs": -1}], "title": "Search in Rotated Sorted Array", "entry_fn_name": "search"}
{"question_id": "32", "schema": {"name": "longestValidParentheses", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "(()"}, "outputs": 2}, {"idx": 1, "inputs": {"s": ")()())"}, "outputs": 4}, {"idx": 2, "inputs": {"s": ""}, "outputs": 0}], "title": "Longest Valid Parentheses", "entry_fn_name": "longestValidParentheses"}
{"question_id": "31", "schema": {"name": "nextPermutation", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 2, 3]}, "outputs": [1, 3, 2]}, {"idx": 1, "inputs": {"nums": [3, 2, 1]}, "outputs": [1, 2, 3]}, {"idx": 2, "inputs": {"nums": [1, 1, 5]}, "outputs": [1, 5, 1]}], "title": "Next Permutation", "entry_fn_name": "nextPermutation"}
{"question_id": "30", "schema": {"name": "findSubstring", "params": [{"name": "s", "type": "string"}, {"name": "words", "type": "string[]"}], "return": {"type": "list<integer>"}}, "test_cases": [{"idx": 0, "inputs": {"s": "barfoothefoobarman", "words": ["foo", "bar"]}, "outputs": [0, 9]}, {"idx": 1, "inputs": {"s": "wordgoodgoodgoodbestword", "words": ["word", "good", "best", "word"]}, "outputs": []}, {"idx": 2, "inputs": {"s": "barfoofoobarthefoobarman", "words": ["bar", "foo", "the"]}, "outputs": [6, 9, 12]}], "title": "Substring with Concatenation of All Words", "entry_fn_name": "findSubstring"}
{"question_id": "29", "schema": {"name": "divide", "params": [{"name": "dividend", "type": "integer"}, {"name": "divisor", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"dividend": 10, "divisor": 3}, "outputs": 3}, {"idx": 1, "inputs": {"dividend": 7, "divisor": -3}, "outputs": -2}], "title": "Divide Two Integers", "entry_fn_name": "divide"}
{"question_id": "28", "schema": {"name": "strStr", "params": [{"name": "haystack", "type": "string"}, {"name": "needle", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"haystack": "hello", "needle": "ll"}, "outputs": 2}, {"idx": 1, "inputs": {"haystack": "aaaaa", "needle": "bba"}, "outputs": -1}], "title": "Implement strStr()", "entry_fn_name": "strStr"}
{"question_id": "25", "schema": {"name": "reverseKGroup", "params": [{"name": "head", "type": "ListNode"}, {"name": "k", "type": "integer"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5], "k": 2}, "outputs": [2, 1, 4, 3, 5]}, {"idx": 1, "inputs": {"head": [1, 2, 3, 4, 5], "k": 3}, "outputs": [3, 2, 1, 4, 5]}], "title": "Reverse Nodes in k-Group", "entry_fn_name": "reverseKGroup"}
{"question_id": "24", "schema": {"name": "swapPairs", "params": [{"name": "head", "type": "ListNode"}], "return": {"type": "ListNode"}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4]}, "outputs": [2, 1, 4, 3]}, {"idx": 1, "inputs": {"head": []}, "outputs": []}, {"idx": 2, "inputs": {"head": [1]}, "outputs": [1]}], "title": "Swap Nodes in Pairs", "entry_fn_name": "swapPairs"}
{"question_id": "23", "schema": {"name": "mergeKLists", "params": [{"name": "lists", "type": "ListNode[]", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"lists": [[1, 4, 5], [1, 3, 4], [2, 6]]}, "outputs": [1, 1, 2, 3, 4, 4, 5, 6]}, {"idx": 1, "inputs": {"lists": []}, "outputs": []}, {"idx": 2, "inputs": {"lists": [[]]}, "outputs": []}], "title": "Merge k Sorted Lists", "entry_fn_name": "mergeKLists"}
{"question_id": "22", "schema": {"name": "generateParenthesis", "params": [{"name": "n", "type": "integer"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"n": 3}, "outputs": ["((()))", "(()())", "(())()", "()(())", "()()()"]}, {"idx": 1, "inputs": {"n": 1}, "outputs": ["()"]}], "title": "Generate Parentheses", "entry_fn_name": "generateParenthesis"}
{"question_id": "21", "schema": {"name": "mergeTwoLists", "params": [{"name": "list1", "type": "ListNode", "dealloc": false}, {"name": "list2", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"list1": [1, 2, 4], "list2": [1, 3, 4]}, "outputs": [1, 1, 2, 3, 4, 4]}, {"idx": 1, "inputs": {"list1": [], "list2": []}, "outputs": []}, {"idx": 2, "inputs": {"list1": [], "list2": [0]}, "outputs": [0]}], "title": "Merge Two Sorted Lists", "entry_fn_name": "mergeTwoLists"}
{"question_id": "20", "schema": {"name": "isValid", "params": [{"name": "s", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "()"}, "outputs": true}, {"idx": 1, "inputs": {"s": "()[]{}"}, "outputs": true}, {"idx": 2, "inputs": {"s": "(]"}, "outputs": false}], "title": "Valid Parentheses", "entry_fn_name": "isValid"}
{"question_id": "19", "schema": {"name": "removeNthFromEnd", "params": [{"name": "head", "type": "ListNode", "dealloc": false}, {"name": "n", "type": "integer"}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"head": [1, 2, 3, 4, 5], "n": 2}, "outputs": [1, 2, 3, 5]}, {"idx": 1, "inputs": {"head": [1], "n": 1}, "outputs": []}, {"idx": 2, "inputs": {"head": [1, 2], "n": 1}, "outputs": [1]}], "title": "Remove Nth Node From End of List", "entry_fn_name": "removeNthFromEnd"}
{"question_id": "18", "schema": {"name": "fourSum", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "list<list<integer>>", "colsize": 4, "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [1, 0, -1, 0, -2, 2], "target": 0}, "outputs": [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]}, {"idx": 1, "inputs": {"nums": [2, 2, 2, 2, 2], "target": 8}, "outputs": [[2, 2, 2, 2]]}], "title": "4Sum", "entry_fn_name": "fourSum"}
{"question_id": "17", "schema": {"name": "letterCombinations", "params": [{"name": "digits", "type": "string"}], "return": {"type": "list<string>"}}, "test_cases": [{"idx": 0, "inputs": {"digits": "23"}, "outputs": ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]}, {"idx": 1, "inputs": {"digits": ""}, "outputs": []}, {"idx": 2, "inputs": {"digits": "2"}, "outputs": ["a", "b", "c"]}], "title": "Letter Combinations of a Phone Number", "entry_fn_name": "letterCombinations"}
{"question_id": "16", "schema": {"name": "threeSumClosest", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-1, 2, 1, -4], "target": 1}, "outputs": 2}, {"idx": 1, "inputs": {"nums": [0, 0, 0], "target": 1}, "outputs": 0}], "title": "3Sum Closest", "entry_fn_name": "threeSumClosest"}
{"question_id": "15", "schema": {"name": "threeSum", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "list<list<integer>>", "colsize": 3, "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"nums": [-1, 0, 1, 2, -1, -4]}, "outputs": [[-1, -1, 2], [-1, 0, 1]]}, {"idx": 1, "inputs": {"nums": [0, 1, 1]}, "outputs": []}, {"idx": 2, "inputs": {"nums": [0, 0, 0]}, "outputs": [[0, 0, 0]]}], "title": "3Sum", "entry_fn_name": "threeSum"}
{"question_id": "14", "schema": {"name": "longestCommonPrefix", "params": [{"name": "strs", "type": "string[]"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"strs": ["flower", "flow", "flight"]}, "outputs": "fl"}, {"idx": 1, "inputs": {"strs": ["dog", "racecar", "car"]}, "outputs": ""}], "title": "Longest Common Prefix", "entry_fn_name": "longestCommonPrefix"}
{"question_id": "13", "schema": {"name": "romanToInt", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "III"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "LVIII"}, "outputs": 58}, {"idx": 2, "inputs": {"s": "MCMXCIV"}, "outputs": 1994}], "title": "Roman to Integer", "entry_fn_name": "romanToInt"}
{"question_id": "12", "schema": {"name": "intToRoman", "params": [{"name": "num", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"num": 3}, "outputs": "III"}, {"idx": 1, "inputs": {"num": 58}, "outputs": "LVIII"}, {"idx": 2, "inputs": {"num": 1994}, "outputs": "MCMXCIV"}], "title": "Integer to Roman", "entry_fn_name": "intToRoman"}
{"question_id": "11", "schema": {"name": "maxArea", "params": [{"name": "height", "type": "integer[]"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"height": [1, 8, 6, 2, 5, 4, 8, 3, 7]}, "outputs": 49}, {"idx": 1, "inputs": {"height": [1, 1]}, "outputs": 1}], "title": "Container With Most Water", "entry_fn_name": "maxArea"}
{"question_id": "10", "schema": {"name": "isMatch", "params": [{"name": "s", "type": "string"}, {"name": "p", "type": "string"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"s": "aa", "p": "a"}, "outputs": false}, {"idx": 1, "inputs": {"s": "aa", "p": "a*"}, "outputs": true}, {"idx": 2, "inputs": {"s": "ab", "p": ".*"}, "outputs": true}], "title": "Regular Expression Matching", "entry_fn_name": "isMatch"}
{"question_id": "9", "schema": {"name": "isPalindrome", "params": [{"name": "x", "type": "integer"}], "return": {"type": "boolean"}}, "test_cases": [{"idx": 0, "inputs": {"x": 121}, "outputs": true}, {"idx": 1, "inputs": {"x": -121}, "outputs": false}, {"idx": 2, "inputs": {"x": 10}, "outputs": false}], "title": "Palindrome Number", "entry_fn_name": "isPalindrome"}
{"question_id": "8", "schema": {"name": "myAtoi", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "42"}, "outputs": 42}, {"idx": 1, "inputs": {"s": "   -42"}, "outputs": -42}, {"idx": 2, "inputs": {"s": "4193 with words"}, "outputs": 4193}], "title": "String to Integer (atoi)", "entry_fn_name": "myAtoi"}
{"question_id": "7", "schema": {"name": "reverse", "params": [{"name": "x", "type": "integer"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"x": 123}, "outputs": 321}, {"idx": 1, "inputs": {"x": -123}, "outputs": -321}, {"idx": 2, "inputs": {"x": 120}, "outputs": 21}], "title": "Reverse Integer", "entry_fn_name": "reverse"}
{"question_id": "6", "schema": {"name": "convert", "params": [{"name": "s", "type": "string"}, {"name": "numRows", "type": "integer"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "PAYPALISHIRING", "numRows": 3}, "outputs": "PAHNAPLSIIGYIR"}, {"idx": 1, "inputs": {"s": "PAYPALISHIRING", "numRows": 4}, "outputs": "PINALSIGYAHRPI"}, {"idx": 2, "inputs": {"s": "A", "numRows": 1}, "outputs": "A"}], "title": "Zigzag Conversion", "entry_fn_name": "convert"}
{"question_id": "5", "schema": {"name": "longestPalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}, "test_cases": [{"idx": 0, "inputs": {"s": "babad"}, "outputs": "bab"}, {"idx": 1, "inputs": {"s": "cbbd"}, "outputs": "bb"}], "title": "Longest Palindromic Substring", "entry_fn_name": "longestPalindrome"}
{"question_id": "4", "schema": {"name": "findMedianSortedArrays", "params": [{"name": "nums1", "type": "integer[]"}, {"name": "nums2", "type": "integer[]"}], "return": {"type": "double"}}, "test_cases": [{"idx": 0, "inputs": {"nums1": [1, 3], "nums2": [2]}, "outputs": 2.0}, {"idx": 1, "inputs": {"nums1": [1, 2], "nums2": [3, 4]}, "outputs": 2.5}], "title": "Median of Two Sorted Arrays", "entry_fn_name": "findMedianSortedArrays"}
{"question_id": "3", "schema": {"name": "lengthOfLongestSubstring", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}, "test_cases": [{"idx": 0, "inputs": {"s": "abcabcbb"}, "outputs": 3}, {"idx": 1, "inputs": {"s": "bbbbb"}, "outputs": 1}, {"idx": 2, "inputs": {"s": "pwwkew"}, "outputs": 3}], "title": "Longest Substring Without Repeating Characters", "entry_fn_name": "lengthOfLongestSubstring"}
{"question_id": "2", "schema": {"name": "addTwoNumbers", "params": [{"name": "l1", "type": "ListNode", "dealloc": false}, {"name": "l2", "type": "ListNode", "dealloc": false}], "return": {"type": "ListNode", "dealloc": true}}, "test_cases": [{"idx": 0, "inputs": {"l1": [2, 4, 3], "l2": [5, 6, 4]}, "outputs": [7, 0, 8]}, {"idx": 1, "inputs": {"l1": [0], "l2": [0]}, "outputs": [0]}, {"idx": 2, "inputs": {"l1": [9, 9, 9, 9, 9, 9, 9], "l2": [9, 9, 9, 9]}, "outputs": [8, 9, 9, 9, 0, 0, 0, 1]}], "title": "Add Two Numbers", "entry_fn_name": "addTwoNumbers"}
{"question_id": "1", "schema": {"name": "twoSum", "params": [{"name": "nums", "type": "integer[]"}, {"name": "target", "type": "integer"}], "return": {"type": "integer[]", "size": 2}, "manual": false}, "test_cases": [{"idx": 0, "inputs": {"nums": [2, 7, 11, 15], "target": 9}, "outputs": [0, 1]}, {"idx": 1, "inputs": {"nums": [3, 2, 4], "target": 6}, "outputs": [1, 2]}, {"idx": 2, "inputs": {"nums": [3, 3], "target": 6}, "outputs": [0, 1]}], "title": "Two Sum", "entry_fn_name": "twoSum"}
